var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if(ctor.instance_) {
      return ctor.instance_
    }
    if(goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor
    }
    return ctor.instance_ = new ctor
  }
};
goog.instantiatedSingletons_ = [];
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if(doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if(isDeps) {
          return false
        }else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call((value));
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments))
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.getMsgWithFallback = function(a, b) {
  return a
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if(Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error)
  }else {
    this.stack = (new Error).stack || ""
  }
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str))
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;")
    }
    if(str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;")
    }
    if(str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "\x26")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"\x26";
      case "lt":
        return"\x3c";
      case "gt":
        return"\x3e";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  })
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase()
  })
};
goog.string.parseInt = function(value) {
  if(isFinite(value)) {
    value = String(value)
  }
  if(goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10)
  }
  return NaN
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return(value)
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
  return(value)
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if(f.call(opt_obj, element, index, arr)) {
      ++count
    }
  }, opt_obj);
  return count
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.toArray = function(object) {
  var length = object.length;
  if(length > 0) {
    var rv = new Array(length);
    for(var i = 0;i < length;i++) {
      rv[i] = object[i]
    }
    return rv
  }
  return[]
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element
  });
  return ret
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if(opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end
  }
  if(step * (end - start) < 0) {
    return[]
  }
  if(step > 0) {
    for(var i = start;i < end;i += step) {
      array.push(i)
    }
  }else {
    for(var i = start;i > end;i += step) {
      array.push(i)
    }
  }
  return array
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if(Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result)
  }
  return result
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj)
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if(opt_a2 != null) {
    for(var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i]
    }
  }
  return this
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = ""
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core.pr_opts = function pr_opts() {
  return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_], true)
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number"
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x)
};
cljs.core.type_satisfies_ = function type_satisfies_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3941__auto__ = ty;
    if(cljs.core.truth_(and__3941__auto__)) {
      return ty.cljs$lang$type
    }else {
      return and__3941__auto__
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""))
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if(cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s
  }else {
    return[cljs.core.str(ty)].join("")
  }
};
cljs.core.aclone = function aclone(array_like) {
  return array_like.slice()
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array
}();
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__7670__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__7670 = function(array, i, var_args) {
      var idxs = null;
      if(arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7670__delegate.call(this, array, i, idxs)
    };
    G__7670.cljs$lang$maxFixedArity = 2;
    G__7670.cljs$lang$applyTo = function(arglist__7671) {
      var array = cljs.core.first(arglist__7671);
      arglist__7671 = cljs.core.next(arglist__7671);
      var i = cljs.core.first(arglist__7671);
      var idxs = cljs.core.rest(arglist__7671);
      return G__7670__delegate(array, i, idxs)
    };
    G__7670.cljs$core$IFn$_invoke$arity$variadic = G__7670__delegate;
    return G__7670
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val
  };
  var aset__4 = function() {
    var G__7672__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv)
    };
    var G__7672 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if(arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__7672__delegate.call(this, array, idx, idx2, idxv)
    };
    G__7672.cljs$lang$maxFixedArity = 3;
    G__7672.cljs$lang$applyTo = function(arglist__7673) {
      var array = cljs.core.first(arglist__7673);
      arglist__7673 = cljs.core.next(arglist__7673);
      var idx = cljs.core.first(arglist__7673);
      arglist__7673 = cljs.core.next(arglist__7673);
      var idx2 = cljs.core.first(arglist__7673);
      var idxv = cljs.core.rest(arglist__7673);
      return G__7672__delegate(array, idx, idx2, idxv)
    };
    G__7672.cljs$core$IFn$_invoke$arity$variadic = G__7672__delegate;
    return G__7672
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset
}();
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array
}();
cljs.core.Fn = {};
cljs.core.IFn = {};
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3941__auto__ = this$;
      if(and__3941__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3941__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__3469__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3943__auto__ = cljs.core._invoke[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._invoke["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = {};
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._count[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._count["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = {};
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._empty[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._empty["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = {};
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._conj[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._conj["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = {};
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__3469__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._nth[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._nth["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__3469__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._nth[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._nth["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = {};
cljs.core.ISeq = {};
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._first[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._first["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._rest[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._rest["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = {};
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._next[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._next["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = {};
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3941__auto__ = o;
      if(and__3941__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__3469__auto__ = o == null ? null : o;
      return function() {
        var or__3943__auto__ = cljs.core._lookup[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._lookup["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3941__auto__ = o;
      if(and__3941__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__3469__auto__ = o == null ? null : o;
      return function() {
        var or__3943__auto__ = cljs.core._lookup[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._lookup["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = {};
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._dissoc[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._dissoc["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = {};
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._key[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._key["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._val[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._val["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = {};
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._disjoin[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._disjoin["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = {};
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._peek[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._peek["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._pop[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pop["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = {};
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc_n[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = {};
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._deref[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._deref["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = {};
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._meta[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._meta["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = {};
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._with_meta[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._with_meta["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = {};
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__3469__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._reduce[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._reduce["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3941__auto__ = coll;
      if(and__3941__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__3469__auto__ = coll == null ? null : coll;
      return function() {
        var or__3943__auto__ = cljs.core._reduce[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core._reduce["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = {};
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._kv_reduce[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = {};
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._equiv[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._equiv["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = {};
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._hash[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._hash["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = {};
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._seq[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._seq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = {};
cljs.core.IList = {};
cljs.core.IRecord = {};
cljs.core.IReversible = {};
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._rseq[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._rseq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = {};
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._sorted_seq[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._entry_key[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._entry_key["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._comparator[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._comparator["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IWriter = {};
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3941__auto__ = writer;
    if(and__3941__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__3469__auto__ = writer == null ? null : writer;
    return function() {
      var or__3943__auto__ = cljs.core._write[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._write["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3941__auto__ = writer;
    if(and__3941__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__3469__auto__ = writer == null ? null : writer;
    return function() {
      var or__3943__auto__ = cljs.core._flush[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._flush["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = {};
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3941__auto__ = o;
    if(and__3941__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__3469__auto__ = o == null ? null : o;
    return function() {
      var or__3943__auto__ = cljs.core._pr_writer[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = {};
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3941__auto__ = d;
    if(and__3941__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__3469__auto__ = d == null ? null : d;
    return function() {
      var or__3943__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = {};
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3941__auto__ = this$;
    if(and__3941__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__3469__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3943__auto__ = cljs.core._notify_watches[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3941__auto__ = this$;
    if(and__3941__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__3469__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3943__auto__ = cljs.core._add_watch[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._add_watch["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3941__auto__ = this$;
    if(and__3941__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__3469__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3943__auto__ = cljs.core._remove_watch[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = {};
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._as_transient[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._as_transient["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3941__auto__ = tcoll;
    if(and__3941__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__3469__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3943__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = {};
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__3469__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._compare[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._compare["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = {};
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._drop_first[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._drop_first["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = {};
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._chunked_first[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._chunked_rest[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = {};
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3941__auto__ = coll;
    if(and__3941__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__3469__auto__ = coll == null ? null : coll;
    return function() {
      var or__3943__auto__ = cljs.core._chunked_next[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INamed = {};
cljs.core._name = function _name(x) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$INamed$_name$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x)
  }else {
    var x__3469__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._name[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._name["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._namespace = function _namespace(x) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x)
  }else {
    var x__3469__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._namespace[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._namespace["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x)
  }
};
goog.provide("cljs.core.StringBufferWriter");
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  return null
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb)
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("")
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name))
};
goog.provide("cljs.core.Symbol");
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Symbol")
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  return cljs.core._write.call(null, writer, self__.str)
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  return self__.name
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  return self__.ns
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var h__3290__auto__ = self__._hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_symbol.call(null, sym);
    self__._hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta)
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  return self__._meta
};
cljs.core.Symbol.prototype.call = function() {
  var G__7675 = null;
  var G__7675__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null)
  };
  var G__7675__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found)
  };
  G__7675 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7675__2.call(this, self__, coll);
      case 3:
        return G__7675__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7675
}();
cljs.core.Symbol.prototype.apply = function(self__, args7674) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args7674.slice()))
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  if(other instanceof cljs.core.Symbol) {
    return self__.str === other.str
  }else {
    return false
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta)
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(name instanceof cljs.core.Symbol) {
      return name
    }else {
      return symbol.call(null, null, name)
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null)
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol
}();
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__7677 = coll;
      if(G__7677) {
        if(function() {
          var or__3943__auto__ = G__7677.cljs$lang$protocol_mask$partition0$ & 8388608;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7677.cljs$core$ISeqable$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._seq.call(null, coll)
    }else {
      if(coll instanceof Array) {
        if(coll.length === 0) {
          return null
        }else {
          return new cljs.core.IndexedSeq(coll, 0)
        }
      }else {
        if(typeof coll === "string") {
          if(coll.length === 0) {
            return null
          }else {
            return new cljs.core.IndexedSeq(coll, 0)
          }
        }else {
          if(cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__7679 = coll;
      if(G__7679) {
        if(function() {
          var or__3943__auto__ = G__7679.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7679.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__7681 = coll;
      if(G__7681) {
        if(function() {
          var or__3943__auto__ = G__7681.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7681.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(!(s == null)) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__7683 = coll;
      if(G__7683) {
        if(function() {
          var or__3943__auto__ = G__7683.cljs$lang$protocol_mask$partition0$ & 128;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7683.cljs$core$INext$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    var or__3943__auto__ = x === y;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return cljs.core._equiv.call(null, x, y)
    }
  };
  var _EQ___3 = function() {
    var G__7684__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__7685 = y;
            var G__7686 = cljs.core.first.call(null, more);
            var G__7687 = cljs.core.next.call(null, more);
            x = G__7685;
            y = G__7686;
            more = G__7687;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__7684 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7684__delegate.call(this, x, y, more)
    };
    G__7684.cljs$lang$maxFixedArity = 2;
    G__7684.cljs$lang$applyTo = function(arglist__7688) {
      var x = cljs.core.first(arglist__7688);
      arglist__7688 = cljs.core.next(arglist__7688);
      var y = cljs.core.first(arglist__7688);
      var more = cljs.core.rest(arglist__7688);
      return G__7684__delegate(x, y, more)
    };
    G__7684.cljs$core$IFn$_invoke$arity$variadic = G__7684__delegate;
    return G__7684
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_
}();
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IKVReduce["null"] = true;
cljs.core._kv_reduce["null"] = function(_, f, init) {
  return init
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var and__3941__auto__ = other instanceof Date;
  if(and__3941__auto__) {
    return o.toString() === other.toString()
  }else {
    return and__3941__auto__
  }
};
cljs.core.IHash["number"] = true;
cljs.core._hash["number"] = function(o) {
  return Math.floor(o) % 2147483647
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IHash["boolean"] = true;
cljs.core._hash["boolean"] = function(o) {
  if(o === true) {
    return 1
  }else {
    return 0
  }
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
goog.provide("cljs.core.Reduced");
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  return self__.val
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val)
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__7689 = nval;
            var G__7690 = n + 1;
            val = G__7689;
            n = G__7690;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__7691 = nval;
          var G__7692 = n + 1;
          val__$1 = G__7691;
          n = G__7692;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__7693 = nval;
          var G__7694 = n + 1;
          val__$1 = G__7693;
          n = G__7694;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__7695 = nval;
            var G__7696 = n + 1;
            val = G__7695;
            n = G__7696;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__7697 = nval;
          var G__7698 = n + 1;
          val__$1 = G__7697;
          n = G__7698;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__7699 = nval;
          var G__7700 = n + 1;
          val__$1 = G__7699;
          n = G__7700;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__7702 = x;
  if(G__7702) {
    if(function() {
      var or__3943__auto__ = G__7702.cljs$lang$protocol_mask$partition0$ & 2;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7702.cljs$core$ICounted$
      }
    }()) {
      return true
    }else {
      if(!G__7702.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__7702)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__7702)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__7704 = x;
  if(G__7704) {
    if(function() {
      var or__3943__auto__ = G__7704.cljs$lang$protocol_mask$partition0$ & 16;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7704.cljs$core$IIndexed$
      }
    }()) {
      return true
    }else {
      if(!G__7704.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__7704)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__7704)
  }
};
goog.provide("cljs.core.IndexedSeq");
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var c = coll.cljs$core$ICounted$_count$arity$1(coll);
  if(c > 0) {
    return new cljs.core.RSeq(coll, c - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i)
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.arr.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  return self__.arr[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return cljs.core.list.call(null)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i)
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq
}();
goog.provide("cljs.core.RSeq");
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, col)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, col)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta)
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__7705 = sn;
      s = G__7705;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if(!(coll == null)) {
      return cljs.core._conj.call(null, coll, x)
    }else {
      return cljs.core.list.call(null, x)
    }
  };
  var conj__3 = function() {
    var G__7706__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__7707 = conj.call(null, coll, x);
          var G__7708 = cljs.core.first.call(null, xs);
          var G__7709 = cljs.core.next.call(null, xs);
          coll = G__7707;
          x = G__7708;
          xs = G__7709;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__7706 = function(coll, x, var_args) {
      var xs = null;
      if(arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7706__delegate.call(this, coll, x, xs)
    };
    G__7706.cljs$lang$maxFixedArity = 2;
    G__7706.cljs$lang$applyTo = function(arglist__7710) {
      var coll = cljs.core.first(arglist__7710);
      arglist__7710 = cljs.core.next(arglist__7710);
      var x = cljs.core.first(arglist__7710);
      var xs = cljs.core.rest(arglist__7710);
      return G__7706__delegate(coll, x, xs)
    };
    G__7706.cljs$core$IFn$_invoke$arity$variadic = G__7706__delegate;
    return G__7706
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__7711 = cljs.core.next.call(null, s);
      var G__7712 = acc + 1;
      s = G__7711;
      acc = G__7712;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__7714 = coll;
      if(G__7714) {
        if(function() {
          var or__3943__auto__ = G__7714.cljs$lang$protocol_mask$partition0$ & 2;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7714.cljs$core$ICounted$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._count.call(null, coll)
    }else {
      if(coll instanceof Array) {
        return coll.length
      }else {
        if(typeof coll === "string") {
          return coll.length
        }else {
          if(cljs.core.type_satisfies_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  }else {
    return 0
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__7715 = cljs.core.next.call(null, coll);
              var G__7716 = n - 1;
              coll = G__7715;
              n = G__7716;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__7717 = cljs.core.next.call(null, coll);
              var G__7718 = n - 1;
              var G__7719 = not_found;
              coll = G__7717;
              n = G__7718;
              not_found = G__7719;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__7724 = coll;
        if(G__7724) {
          if(function() {
            var or__3943__auto__ = G__7724.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7724.cljs$core$IIndexed$
            }
          }()) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, Math.floor(n))
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return null
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return null
            }
          }else {
            if(cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__7725 = coll;
                  if(G__7725) {
                    if(function() {
                      var or__3943__auto__ = G__7725.cljs$lang$protocol_mask$partition0$ & 64;
                      if(or__3943__auto__) {
                        return or__3943__auto__
                      }else {
                        return G__7725.cljs$core$ISeq$
                      }
                    }()) {
                      return true
                    }else {
                      if(!G__7725.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__7725)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__7725)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n))
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(function() {
        var G__7726 = coll;
        if(G__7726) {
          if(function() {
            var or__3943__auto__ = G__7726.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7726.cljs$core$IIndexed$
            }
          }()) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, Math.floor(n), not_found)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return not_found
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__7727 = coll;
                  if(G__7727) {
                    if(function() {
                      var or__3943__auto__ = G__7727.cljs$lang$protocol_mask$partition0$ & 64;
                      if(or__3943__auto__) {
                        return or__3943__auto__
                      }else {
                        return G__7727.cljs$core$ISeq$
                      }
                    }()) {
                      return true
                    }else {
                      if(!G__7727.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__7727)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__7727)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n), not_found)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if(o == null) {
      return null
    }else {
      if(function() {
        var G__7730 = o;
        if(G__7730) {
          if(function() {
            var or__3943__auto__ = G__7730.cljs$lang$protocol_mask$partition0$ & 256;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7730.cljs$core$ILookup$
            }
          }()) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return null
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return null
            }
          }else {
            if(cljs.core.type_satisfies_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if(!(o == null)) {
      if(function() {
        var G__7731 = o;
        if(G__7731) {
          if(function() {
            var or__3943__auto__ = G__7731.cljs$lang$protocol_mask$partition0$ & 256;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7731.cljs$core$ILookup$
            }
          }()) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return not_found
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.type_satisfies_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if(!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v)
    }else {
      return cljs.core.hash_map.call(null, k, v)
    }
  };
  var assoc__4 = function() {
    var G__7732__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__7733 = ret;
          var G__7734 = cljs.core.first.call(null, kvs);
          var G__7735 = cljs.core.second.call(null, kvs);
          var G__7736 = cljs.core.nnext.call(null, kvs);
          coll = G__7733;
          k = G__7734;
          v = G__7735;
          kvs = G__7736;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__7732 = function(coll, k, v, var_args) {
      var kvs = null;
      if(arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__7732__delegate.call(this, coll, k, v, kvs)
    };
    G__7732.cljs$lang$maxFixedArity = 3;
    G__7732.cljs$lang$applyTo = function(arglist__7737) {
      var coll = cljs.core.first(arglist__7737);
      arglist__7737 = cljs.core.next(arglist__7737);
      var k = cljs.core.first(arglist__7737);
      arglist__7737 = cljs.core.next(arglist__7737);
      var v = cljs.core.first(arglist__7737);
      var kvs = cljs.core.rest(arglist__7737);
      return G__7732__delegate(coll, k, v, kvs)
    };
    G__7732.cljs$core$IFn$_invoke$arity$variadic = G__7732__delegate;
    return G__7732
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__7738__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__7739 = ret;
          var G__7740 = cljs.core.first.call(null, ks);
          var G__7741 = cljs.core.next.call(null, ks);
          coll = G__7739;
          k = G__7740;
          ks = G__7741;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__7738 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7738__delegate.call(this, coll, k, ks)
    };
    G__7738.cljs$lang$maxFixedArity = 2;
    G__7738.cljs$lang$applyTo = function(arglist__7742) {
      var coll = cljs.core.first(arglist__7742);
      arglist__7742 = cljs.core.next(arglist__7742);
      var k = cljs.core.first(arglist__7742);
      var ks = cljs.core.rest(arglist__7742);
      return G__7738__delegate(coll, k, ks)
    };
    G__7738.cljs$core$IFn$_invoke$arity$variadic = G__7738__delegate;
    return G__7738
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3943__auto__ = goog.isFunction(f);
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var G__7744 = f;
    if(G__7744) {
      if(cljs.core.truth_(function() {
        var or__3943__auto____$1 = null;
        if(cljs.core.truth_(or__3943__auto____$1)) {
          return or__3943__auto____$1
        }else {
          return G__7744.cljs$core$Fn$
        }
      }())) {
        return true
      }else {
        if(!G__7744.cljs$lang$protocol_mask$partition$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.Fn, G__7744)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.Fn, G__7744)
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if(function() {
    var and__3941__auto__ = cljs.core.fn_QMARK_.call(null, o);
    if(and__3941__auto__) {
      return!function() {
        var G__7750 = o;
        if(G__7750) {
          if(function() {
            var or__3943__auto__ = G__7750.cljs$lang$protocol_mask$partition0$ & 262144;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7750.cljs$core$IWithMeta$
            }
          }()) {
            return true
          }else {
            if(!G__7750.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IWithMeta, G__7750)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IWithMeta, G__7750)
        }
      }()
    }else {
      return and__3941__auto__
    }
  }()) {
    return with_meta.call(null, function() {
      if(typeof cljs.core.t7751 !== "undefined") {
      }else {
        goog.provide("cljs.core.t7751");
        cljs.core.t7751 = function(meta, o, with_meta, meta7752) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta7752 = meta7752;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217
        };
        cljs.core.t7751.cljs$lang$type = true;
        cljs.core.t7751.cljs$lang$ctorStr = "cljs.core/t7751";
        cljs.core.t7751.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
          return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/t7751")
        };
        cljs.core.t7751.prototype.call = function() {
          var G__7755__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__7755 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
            }
            return G__7755__delegate.call(this, self__, args)
          };
          G__7755.cljs$lang$maxFixedArity = 1;
          G__7755.cljs$lang$applyTo = function(arglist__7756) {
            var self__ = cljs.core.first(arglist__7756);
            var args = cljs.core.rest(arglist__7756);
            return G__7755__delegate(self__, args)
          };
          G__7755.cljs$core$IFn$_invoke$arity$variadic = G__7755__delegate;
          return G__7755
        }();
        cljs.core.t7751.prototype.apply = function(self__, args7754) {
          var self__ = this;
          return self__.call.apply(self__, [self__].concat(args7754.slice()))
        };
        cljs.core.t7751.prototype.cljs$core$Fn$ = true;
        cljs.core.t7751.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7753) {
          var self__ = this;
          return self__.meta7752
        };
        cljs.core.t7751.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7753, meta7752__$1) {
          var self__ = this;
          return new cljs.core.t7751(self__.meta, self__.o, self__.with_meta, meta7752__$1)
        };
        cljs.core.__GT_t7751 = function __GT_t7751(meta__$1, o__$1, with_meta__$1, meta7752) {
          return new cljs.core.t7751(meta__$1, o__$1, with_meta__$1, meta7752)
        }
      }
      return new cljs.core.t7751(meta, o, with_meta, null)
    }(), meta)
  }else {
    return cljs.core._with_meta.call(null, o, meta)
  }
};
cljs.core.meta = function meta(o) {
  if(function() {
    var G__7758 = o;
    if(G__7758) {
      if(function() {
        var or__3943__auto__ = G__7758.cljs$lang$protocol_mask$partition0$ & 131072;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__7758.cljs$core$IMeta$
        }
      }()) {
        return true
      }else {
        if(!G__7758.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__7758)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__7758)
    }
  }()) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__7759__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__7760 = ret;
          var G__7761 = cljs.core.first.call(null, ks);
          var G__7762 = cljs.core.next.call(null, ks);
          coll = G__7760;
          k = G__7761;
          ks = G__7762;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__7759 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7759__delegate.call(this, coll, k, ks)
    };
    G__7759.cljs$lang$maxFixedArity = 2;
    G__7759.cljs$lang$applyTo = function(arglist__7763) {
      var coll = cljs.core.first(arglist__7763);
      arglist__7763 = cljs.core.next(arglist__7763);
      var k = cljs.core.first(arglist__7763);
      var ks = cljs.core.rest(arglist__7763);
      return G__7759__delegate(coll, k, ks)
    };
    G__7759.cljs$core$IFn$_invoke$arity$variadic = G__7759__delegate;
    return G__7759
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(typeof h === "number") {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function() {
  var hash = null;
  var hash__1 = function(o) {
    return hash.call(null, o, true)
  };
  var hash__2 = function(o, check_cache) {
    if(function() {
      var and__3941__auto__ = goog.isString(o);
      if(and__3941__auto__) {
        return check_cache
      }else {
        return and__3941__auto__
      }
    }()) {
      return cljs.core.check_string_hash_cache.call(null, o)
    }else {
      return cljs.core._hash.call(null, o)
    }
  };
  hash = function(o, check_cache) {
    switch(arguments.length) {
      case 1:
        return hash__1.call(this, o);
      case 2:
        return hash__2.call(this, o, check_cache)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash.cljs$core$IFn$_invoke$arity$1 = hash__1;
  hash.cljs$core$IFn$_invoke$arity$2 = hash__2;
  return hash
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  var or__3943__auto__ = coll == null;
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    return cljs.core.not.call(null, cljs.core.seq.call(null, coll))
  }
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__7765 = x;
    if(G__7765) {
      if(function() {
        var or__3943__auto__ = G__7765.cljs$lang$protocol_mask$partition0$ & 8;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__7765.cljs$core$ICollection$
        }
      }()) {
        return true
      }else {
        if(!G__7765.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__7765)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__7765)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__7767 = x;
    if(G__7767) {
      if(function() {
        var or__3943__auto__ = G__7767.cljs$lang$protocol_mask$partition0$ & 4096;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__7767.cljs$core$ISet$
        }
      }()) {
        return true
      }else {
        if(!G__7767.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__7767)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__7767)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__7769 = x;
  if(G__7769) {
    if(function() {
      var or__3943__auto__ = G__7769.cljs$lang$protocol_mask$partition0$ & 512;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7769.cljs$core$IAssociative$
      }
    }()) {
      return true
    }else {
      if(!G__7769.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__7769)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__7769)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__7771 = x;
  if(G__7771) {
    if(function() {
      var or__3943__auto__ = G__7771.cljs$lang$protocol_mask$partition0$ & 16777216;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7771.cljs$core$ISequential$
      }
    }()) {
      return true
    }else {
      if(!G__7771.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__7771)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__7771)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__7773 = x;
  if(G__7773) {
    if(function() {
      var or__3943__auto__ = G__7773.cljs$lang$protocol_mask$partition0$ & 524288;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7773.cljs$core$IReduce$
      }
    }()) {
      return true
    }else {
      if(!G__7773.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__7773)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__7773)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__7775 = x;
    if(G__7775) {
      if(function() {
        var or__3943__auto__ = G__7775.cljs$lang$protocol_mask$partition0$ & 1024;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__7775.cljs$core$IMap$
        }
      }()) {
        return true
      }else {
        if(!G__7775.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__7775)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__7775)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__7777 = x;
  if(G__7777) {
    if(function() {
      var or__3943__auto__ = G__7777.cljs$lang$protocol_mask$partition0$ & 16384;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7777.cljs$core$IVector$
      }
    }()) {
      return true
    }else {
      if(!G__7777.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__7777)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__7777)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__7779 = x;
  if(G__7779) {
    if(function() {
      var or__3943__auto__ = G__7779.cljs$lang$protocol_mask$partition1$ & 512;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7779.cljs$core$IChunkedSeq$
      }
    }()) {
      return true
    }else {
      return false
    }
  }else {
    return false
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    return{}
  };
  var js_obj__1 = function() {
    var G__7780__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__7780 = function(var_args) {
      var keyvals = null;
      if(arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__7780__delegate.call(this, keyvals)
    };
    G__7780.cljs$lang$maxFixedArity = 0;
    G__7780.cljs$lang$applyTo = function(arglist__7781) {
      var keyvals = cljs.core.seq(arglist__7781);
      return G__7780__delegate(keyvals)
    };
    G__7780.cljs$core$IFn$_invoke$arity$variadic = G__7780__delegate;
    return G__7780
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__7782 = i__$1 + 1;
      var G__7783 = j__$1 + 1;
      var G__7784 = len__$1 - 1;
      i__$1 = G__7782;
      j__$1 = G__7783;
      len__$1 = G__7784;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__7785 = i__$1 - 1;
      var G__7786 = j__$1 - 1;
      var G__7787 = len__$1 - 1;
      i__$1 = G__7785;
      j__$1 = G__7786;
      len__$1 = G__7787;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__7789 = s;
    if(G__7789) {
      if(function() {
        var or__3943__auto__ = G__7789.cljs$lang$protocol_mask$partition0$ & 64;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__7789.cljs$core$ISeq$
        }
      }()) {
        return true
      }else {
        if(!G__7789.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__7789)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__7789)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__7791 = s;
  if(G__7791) {
    if(function() {
      var or__3943__auto__ = G__7791.cljs$lang$protocol_mask$partition0$ & 8388608;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7791.cljs$core$ISeqable$
      }
    }()) {
      return true
    }else {
      if(!G__7791.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__7791)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__7791)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3943__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var G__7793 = f;
    if(G__7793) {
      if(function() {
        var or__3943__auto____$1 = G__7793.cljs$lang$protocol_mask$partition0$ & 1;
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return G__7793.cljs$core$IFn$
        }
      }()) {
        return true
      }else {
        if(!G__7793.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__7793)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__7793)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  var and__3941__auto__ = typeof n === "number";
  if(and__3941__auto__) {
    var and__3941__auto____$1 = !isNaN(n);
    if(and__3941__auto____$1) {
      var and__3941__auto____$2 = !(n === Infinity);
      if(and__3941__auto____$2) {
        return parseFloat(n) === parseInt(n, 10)
      }else {
        return and__3941__auto____$2
      }
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(function() {
    var and__3941__auto__ = !(coll == null);
    if(and__3941__auto__) {
      var and__3941__auto____$1 = cljs.core.associative_QMARK_.call(null, coll);
      if(and__3941__auto____$1) {
        return cljs.core.contains_QMARK_.call(null, coll, k)
      }else {
        return and__3941__auto____$1
      }
    }else {
      return and__3941__auto__
    }
  }()) {
    return cljs.core.PersistentVector.fromArray([k, cljs.core.get.call(null, coll, k)], true)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__7794__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, null, x, null], true);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__7795 = cljs.core.conj.call(null, s, x__$1);
              var G__7796 = etc;
              s = G__7795;
              xs = G__7796;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__7794 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7794__delegate.call(this, x, y, more)
    };
    G__7794.cljs$lang$maxFixedArity = 2;
    G__7794.cljs$lang$applyTo = function(arglist__7797) {
      var x = cljs.core.first(arglist__7797);
      arglist__7797 = cljs.core.next(arglist__7797);
      var y = cljs.core.first(arglist__7797);
      var more = cljs.core.rest(arglist__7797);
      return G__7794__delegate(x, y, more)
    };
    G__7794.cljs$core$IFn$_invoke$arity$variadic = G__7794__delegate;
    return G__7794
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(function() {
            var G__7799 = x;
            if(G__7799) {
              if(function() {
                var or__3943__auto__ = G__7799.cljs$lang$protocol_mask$partition1$ & 2048;
                if(or__3943__auto__) {
                  return or__3943__auto__
                }else {
                  return G__7799.cljs$core$IComparable$
                }
              }()) {
                return true
              }else {
                return false
              }
            }else {
              return false
            }
          }()) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(function() {
        var and__3941__auto__ = d === 0;
        if(and__3941__auto__) {
          return n + 1 < len
        }else {
          return and__3941__auto__
        }
      }()) {
        var G__7800 = xs;
        var G__7801 = ys;
        var G__7802 = len;
        var G__7803 = n + 1;
        xs = G__7800;
        ys = G__7801;
        len = G__7802;
        n = G__7803;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(typeof r === "number") {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__7804 = nval;
          var G__7805 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__7804;
          coll__$1 = G__7805;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(function() {
      var G__7808 = coll;
      if(G__7808) {
        if(function() {
          var or__3943__auto__ = G__7808.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7808.cljs$core$IReduce$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f)
        }else {
          if(cljs.core.type_satisfies_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(function() {
      var G__7809 = coll;
      if(G__7809) {
        if(function() {
          var or__3943__auto__ = G__7809.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__7809.cljs$core$IReduce$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val)
        }else {
          if(cljs.core.type_satisfies_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__7810__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__7810 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7810__delegate.call(this, x, y, more)
    };
    G__7810.cljs$lang$maxFixedArity = 2;
    G__7810.cljs$lang$applyTo = function(arglist__7811) {
      var x = cljs.core.first(arglist__7811);
      arglist__7811 = cljs.core.next(arglist__7811);
      var y = cljs.core.first(arglist__7811);
      var more = cljs.core.rest(arglist__7811);
      return G__7810__delegate(x, y, more)
    };
    G__7810.cljs$core$IFn$_invoke$arity$variadic = G__7810__delegate;
    return G__7810
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__7812__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__7812 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7812__delegate.call(this, x, y, more)
    };
    G__7812.cljs$lang$maxFixedArity = 2;
    G__7812.cljs$lang$applyTo = function(arglist__7813) {
      var x = cljs.core.first(arglist__7813);
      arglist__7813 = cljs.core.next(arglist__7813);
      var y = cljs.core.first(arglist__7813);
      var more = cljs.core.rest(arglist__7813);
      return G__7812__delegate(x, y, more)
    };
    G__7812.cljs$core$IFn$_invoke$arity$variadic = G__7812__delegate;
    return G__7812
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__7814__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__7814 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7814__delegate.call(this, x, y, more)
    };
    G__7814.cljs$lang$maxFixedArity = 2;
    G__7814.cljs$lang$applyTo = function(arglist__7815) {
      var x = cljs.core.first(arglist__7815);
      arglist__7815 = cljs.core.next(arglist__7815);
      var y = cljs.core.first(arglist__7815);
      var more = cljs.core.rest(arglist__7815);
      return G__7814__delegate(x, y, more)
    };
    G__7814.cljs$core$IFn$_invoke$arity$variadic = G__7814__delegate;
    return G__7814
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__7816__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__7816 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7816__delegate.call(this, x, y, more)
    };
    G__7816.cljs$lang$maxFixedArity = 2;
    G__7816.cljs$lang$applyTo = function(arglist__7817) {
      var x = cljs.core.first(arglist__7817);
      arglist__7817 = cljs.core.next(arglist__7817);
      var y = cljs.core.first(arglist__7817);
      var more = cljs.core.rest(arglist__7817);
      return G__7816__delegate(x, y, more)
    };
    G__7816.cljs$core$IFn$_invoke$arity$variadic = G__7816__delegate;
    return G__7816
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__7818__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__7819 = y;
            var G__7820 = cljs.core.first.call(null, more);
            var G__7821 = cljs.core.next.call(null, more);
            x = G__7819;
            y = G__7820;
            more = G__7821;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__7818 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7818__delegate.call(this, x, y, more)
    };
    G__7818.cljs$lang$maxFixedArity = 2;
    G__7818.cljs$lang$applyTo = function(arglist__7822) {
      var x = cljs.core.first(arglist__7822);
      arglist__7822 = cljs.core.next(arglist__7822);
      var y = cljs.core.first(arglist__7822);
      var more = cljs.core.rest(arglist__7822);
      return G__7818__delegate(x, y, more)
    };
    G__7818.cljs$core$IFn$_invoke$arity$variadic = G__7818__delegate;
    return G__7818
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__7823__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__7824 = y;
            var G__7825 = cljs.core.first.call(null, more);
            var G__7826 = cljs.core.next.call(null, more);
            x = G__7824;
            y = G__7825;
            more = G__7826;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__7823 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7823__delegate.call(this, x, y, more)
    };
    G__7823.cljs$lang$maxFixedArity = 2;
    G__7823.cljs$lang$applyTo = function(arglist__7827) {
      var x = cljs.core.first(arglist__7827);
      arglist__7827 = cljs.core.next(arglist__7827);
      var y = cljs.core.first(arglist__7827);
      var more = cljs.core.rest(arglist__7827);
      return G__7823__delegate(x, y, more)
    };
    G__7823.cljs$core$IFn$_invoke$arity$variadic = G__7823__delegate;
    return G__7823
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__7828__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__7829 = y;
            var G__7830 = cljs.core.first.call(null, more);
            var G__7831 = cljs.core.next.call(null, more);
            x = G__7829;
            y = G__7830;
            more = G__7831;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__7828 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7828__delegate.call(this, x, y, more)
    };
    G__7828.cljs$lang$maxFixedArity = 2;
    G__7828.cljs$lang$applyTo = function(arglist__7832) {
      var x = cljs.core.first(arglist__7832);
      arglist__7832 = cljs.core.next(arglist__7832);
      var y = cljs.core.first(arglist__7832);
      var more = cljs.core.rest(arglist__7832);
      return G__7828__delegate(x, y, more)
    };
    G__7828.cljs$core$IFn$_invoke$arity$variadic = G__7828__delegate;
    return G__7828
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__7833__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__7834 = y;
            var G__7835 = cljs.core.first.call(null, more);
            var G__7836 = cljs.core.next.call(null, more);
            x = G__7834;
            y = G__7835;
            more = G__7836;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__7833 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7833__delegate.call(this, x, y, more)
    };
    G__7833.cljs$lang$maxFixedArity = 2;
    G__7833.cljs$lang$applyTo = function(arglist__7837) {
      var x = cljs.core.first(arglist__7837);
      arglist__7837 = cljs.core.next(arglist__7837);
      var y = cljs.core.first(arglist__7837);
      var more = cljs.core.rest(arglist__7837);
      return G__7833__delegate(x, y, more)
    };
    G__7833.cljs$core$IFn$_invoke$arity$variadic = G__7833__delegate;
    return G__7833
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    var x__3191__auto__ = x;
    var y__3192__auto__ = y;
    return x__3191__auto__ > y__3192__auto__ ? x__3191__auto__ : y__3192__auto__
  };
  var max__3 = function() {
    var G__7838__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3191__auto__ = x;
        var y__3192__auto__ = y;
        return x__3191__auto__ > y__3192__auto__ ? x__3191__auto__ : y__3192__auto__
      }(), more)
    };
    var G__7838 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7838__delegate.call(this, x, y, more)
    };
    G__7838.cljs$lang$maxFixedArity = 2;
    G__7838.cljs$lang$applyTo = function(arglist__7839) {
      var x = cljs.core.first(arglist__7839);
      arglist__7839 = cljs.core.next(arglist__7839);
      var y = cljs.core.first(arglist__7839);
      var more = cljs.core.rest(arglist__7839);
      return G__7838__delegate(x, y, more)
    };
    G__7838.cljs$core$IFn$_invoke$arity$variadic = G__7838__delegate;
    return G__7838
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    var x__3198__auto__ = x;
    var y__3199__auto__ = y;
    return x__3198__auto__ < y__3199__auto__ ? x__3198__auto__ : y__3199__auto__
  };
  var min__3 = function() {
    var G__7840__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3198__auto__ = x;
        var y__3199__auto__ = y;
        return x__3198__auto__ < y__3199__auto__ ? x__3198__auto__ : y__3199__auto__
      }(), more)
    };
    var G__7840 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7840__delegate.call(this, x, y, more)
    };
    G__7840.cljs$lang$maxFixedArity = 2;
    G__7840.cljs$lang$applyTo = function(arglist__7841) {
      var x = cljs.core.first(arglist__7841);
      arglist__7841 = cljs.core.next(arglist__7841);
      var y = cljs.core.first(arglist__7841);
      var more = cljs.core.rest(arglist__7841);
      return G__7840__delegate(x, y, more)
    };
    G__7840.cljs$core$IFn$_invoke$arity$variadic = G__7840__delegate;
    return G__7840
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min
}();
cljs.core.byte$ = function byte$(x) {
  return x
};
cljs.core.char$ = function char$(x) {
  if(typeof x === "number") {
    return String.fromCharCode(x)
  }else {
    if(function() {
      var and__3941__auto__ = typeof x === "string";
      if(and__3941__auto__) {
        return x.length === 1
      }else {
        return and__3941__auto__
      }
    }()) {
      return x
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      }else {
        return null
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x
};
cljs.core.float$ = function float$(x) {
  return x
};
cljs.core.double$ = function double$(x) {
  return x
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0
  };
  var unchecked_add__1 = function(x) {
    return x
  };
  var unchecked_add__2 = function(x, y) {
    return x + y
  };
  var unchecked_add__3 = function() {
    var G__7842__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more)
    };
    var G__7842 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7842__delegate.call(this, x, y, more)
    };
    G__7842.cljs$lang$maxFixedArity = 2;
    G__7842.cljs$lang$applyTo = function(arglist__7843) {
      var x = cljs.core.first(arglist__7843);
      arglist__7843 = cljs.core.next(arglist__7843);
      var y = cljs.core.first(arglist__7843);
      var more = cljs.core.rest(arglist__7843);
      return G__7842__delegate(x, y, more)
    };
    G__7842.cljs$core$IFn$_invoke$arity$variadic = G__7842__delegate;
    return G__7842
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0
  };
  var unchecked_add_int__1 = function(x) {
    return x
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y
  };
  var unchecked_add_int__3 = function() {
    var G__7844__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more)
    };
    var G__7844 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7844__delegate.call(this, x, y, more)
    };
    G__7844.cljs$lang$maxFixedArity = 2;
    G__7844.cljs$lang$applyTo = function(arglist__7845) {
      var x = cljs.core.first(arglist__7845);
      arglist__7845 = cljs.core.next(arglist__7845);
      var y = cljs.core.first(arglist__7845);
      var more = cljs.core.rest(arglist__7845);
      return G__7844__delegate(x, y, more)
    };
    G__7844.cljs$core$IFn$_invoke$arity$variadic = G__7844__delegate;
    return G__7844
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x)
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y
  };
  var unchecked_divide_int__3 = function() {
    var G__7846__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more)
    };
    var G__7846 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7846__delegate.call(this, x, y, more)
    };
    G__7846.cljs$lang$maxFixedArity = 2;
    G__7846.cljs$lang$applyTo = function(arglist__7847) {
      var x = cljs.core.first(arglist__7847);
      arglist__7847 = cljs.core.next(arglist__7847);
      var y = cljs.core.first(arglist__7847);
      var more = cljs.core.rest(arglist__7847);
      return G__7846__delegate(x, y, more)
    };
    G__7846.cljs$core$IFn$_invoke$arity$variadic = G__7846__delegate;
    return G__7846
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1
  };
  var unchecked_multiply__1 = function(x) {
    return x
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply__3 = function() {
    var G__7848__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more)
    };
    var G__7848 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7848__delegate.call(this, x, y, more)
    };
    G__7848.cljs$lang$maxFixedArity = 2;
    G__7848.cljs$lang$applyTo = function(arglist__7849) {
      var x = cljs.core.first(arglist__7849);
      arglist__7849 = cljs.core.next(arglist__7849);
      var y = cljs.core.first(arglist__7849);
      var more = cljs.core.rest(arglist__7849);
      return G__7848__delegate(x, y, more)
    };
    G__7848.cljs$core$IFn$_invoke$arity$variadic = G__7848__delegate;
    return G__7848
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1
  };
  var unchecked_multiply_int__1 = function(x) {
    return x
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply_int__3 = function() {
    var G__7850__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more)
    };
    var G__7850 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7850__delegate.call(this, x, y, more)
    };
    G__7850.cljs$lang$maxFixedArity = 2;
    G__7850.cljs$lang$applyTo = function(arglist__7851) {
      var x = cljs.core.first(arglist__7851);
      arglist__7851 = cljs.core.next(arglist__7851);
      var y = cljs.core.first(arglist__7851);
      var more = cljs.core.rest(arglist__7851);
      return G__7850__delegate(x, y, more)
    };
    G__7850.cljs$core$IFn$_invoke$arity$variadic = G__7850__delegate;
    return G__7850
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n)
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract__3 = function() {
    var G__7852__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more)
    };
    var G__7852 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7852__delegate.call(this, x, y, more)
    };
    G__7852.cljs$lang$maxFixedArity = 2;
    G__7852.cljs$lang$applyTo = function(arglist__7853) {
      var x = cljs.core.first(arglist__7853);
      arglist__7853 = cljs.core.next(arglist__7853);
      var y = cljs.core.first(arglist__7853);
      var more = cljs.core.rest(arglist__7853);
      return G__7852__delegate(x, y, more)
    };
    G__7852.cljs$core$IFn$_invoke$arity$variadic = G__7852__delegate;
    return G__7852
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract_int__3 = function() {
    var G__7854__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more)
    };
    var G__7854 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7854__delegate.call(this, x, y, more)
    };
    G__7854.cljs$lang$maxFixedArity = 2;
    G__7854.cljs$lang$applyTo = function(arglist__7855) {
      var x = cljs.core.first(arglist__7855);
      arglist__7855 = cljs.core.next(arglist__7855);
      var y = cljs.core.first(arglist__7855);
      var more = cljs.core.rest(arglist__7855);
      return G__7854__delegate(x, y, more)
    };
    G__7854.cljs$core$IFn$_invoke$arity$variadic = G__7854__delegate;
    return G__7854
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.booleans = function booleans(x) {
  return x
};
cljs.core.bytes = function bytes(x) {
  return x
};
cljs.core.chars = function chars(x) {
  return x
};
cljs.core.shorts = function shorts(x) {
  return x
};
cljs.core.ints = function ints(x) {
  return x
};
cljs.core.floats = function floats(x) {
  return x
};
cljs.core.doubles = function doubles(x) {
  return x
};
cljs.core.longs = function longs(x) {
  return x
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__7856__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ__EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__7857 = y;
            var G__7858 = cljs.core.first.call(null, more);
            var G__7859 = cljs.core.next.call(null, more);
            x = G__7857;
            y = G__7858;
            more = G__7859;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__7856 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7856__delegate.call(this, x, y, more)
    };
    G__7856.cljs$lang$maxFixedArity = 2;
    G__7856.cljs$lang$applyTo = function(arglist__7860) {
      var x = cljs.core.first(arglist__7860);
      arglist__7860 = cljs.core.next(arglist__7860);
      var y = cljs.core.first(arglist__7860);
      var more = cljs.core.rest(arglist__7860);
      return G__7856__delegate(x, y, more)
    };
    G__7856.cljs$core$IFn$_invoke$arity$variadic = G__7856__delegate;
    return G__7856
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = xs;
      if(and__3941__auto__) {
        return n__$1 > 0
      }else {
        return and__3941__auto__
      }
    }())) {
      var G__7861 = n__$1 - 1;
      var G__7862 = cljs.core.next.call(null, xs);
      n__$1 = G__7861;
      xs = G__7862;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(x == null) {
      return""
    }else {
      return x.toString()
    }
  };
  var str__2 = function() {
    var G__7863__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__7864 = sb.append(str.call(null, cljs.core.first.call(null, more)));
            var G__7865 = cljs.core.next.call(null, more);
            sb = G__7864;
            more = G__7865;
            continue
          }else {
            return sb.toString()
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str.call(null, x)), ys)
    };
    var G__7863 = function(x, var_args) {
      var ys = null;
      if(arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__7863__delegate.call(this, x, ys)
    };
    G__7863.cljs$lang$maxFixedArity = 1;
    G__7863.cljs$lang$applyTo = function(arglist__7866) {
      var x = cljs.core.first(arglist__7866);
      var ys = cljs.core.rest(arglist__7866);
      return G__7863__delegate(x, ys)
    };
    G__7863.cljs$core$IFn$_invoke$arity$variadic = G__7863__delegate;
    return G__7863
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__7867 = cljs.core.next.call(null, xs);
            var G__7868 = cljs.core.next.call(null, ys);
            xs = G__7867;
            ys = G__7868;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  return cljs.core.reduce.call(null, function(p1__7869_SHARP_, p2__7870_SHARP_) {
    return cljs.core.hash_combine.call(null, p1__7869_SHARP_, cljs.core.hash.call(null, p2__7870_SHARP_, false))
  }, cljs.core.hash.call(null, cljs.core.first.call(null, coll), false), cljs.core.next.call(null, coll))
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__7871 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__7872 = cljs.core.next.call(null, s);
      h = G__7871;
      s = G__7872;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__7873 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__7874 = cljs.core.next.call(null, s__$1);
      h = G__7873;
      s__$1 = G__7874;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__7881_7887 = cljs.core.seq.call(null, fn_map);
  var chunk__7882_7888 = null;
  var count__7883_7889 = 0;
  var i__7884_7890 = 0;
  while(true) {
    if(i__7884_7890 < count__7883_7889) {
      var vec__7885_7891 = cljs.core._nth.call(null, chunk__7882_7888, i__7884_7890);
      var key_name_7892 = cljs.core.nth.call(null, vec__7885_7891, 0, null);
      var f_7893 = cljs.core.nth.call(null, vec__7885_7891, 1, null);
      var str_name_7894 = cljs.core.name.call(null, key_name_7892);
      obj[str_name_7894] = f_7893;
      var G__7895 = seq__7881_7887;
      var G__7896 = chunk__7882_7888;
      var G__7897 = count__7883_7889;
      var G__7898 = i__7884_7890 + 1;
      seq__7881_7887 = G__7895;
      chunk__7882_7888 = G__7896;
      count__7883_7889 = G__7897;
      i__7884_7890 = G__7898;
      continue
    }else {
      var temp__4092__auto___7899 = cljs.core.seq.call(null, seq__7881_7887);
      if(temp__4092__auto___7899) {
        var seq__7881_7900__$1 = temp__4092__auto___7899;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__7881_7900__$1)) {
          var c__3600__auto___7901 = cljs.core.chunk_first.call(null, seq__7881_7900__$1);
          var G__7902 = cljs.core.chunk_rest.call(null, seq__7881_7900__$1);
          var G__7903 = c__3600__auto___7901;
          var G__7904 = cljs.core.count.call(null, c__3600__auto___7901);
          var G__7905 = 0;
          seq__7881_7887 = G__7902;
          chunk__7882_7888 = G__7903;
          count__7883_7889 = G__7904;
          i__7884_7890 = G__7905;
          continue
        }else {
          var vec__7886_7906 = cljs.core.first.call(null, seq__7881_7900__$1);
          var key_name_7907 = cljs.core.nth.call(null, vec__7886_7906, 0, null);
          var f_7908 = cljs.core.nth.call(null, vec__7886_7906, 1, null);
          var str_name_7909 = cljs.core.name.call(null, key_name_7907);
          obj[str_name_7909] = f_7908;
          var G__7910 = cljs.core.next.call(null, seq__7881_7900__$1);
          var G__7911 = null;
          var G__7912 = 0;
          var G__7913 = 0;
          seq__7881_7887 = G__7910;
          chunk__7882_7888 = G__7911;
          count__7883_7889 = G__7912;
          i__7884_7890 = G__7913;
          continue
        }
      }else {
      }
    }
    break
  }
  return obj
};
goog.provide("cljs.core.List");
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, coll, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$ISeq$_rest$arity$1(coll)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash)
};
goog.provide("cljs.core.EmptyList");
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta)
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__7915 = coll;
  if(G__7915) {
    if(function() {
      var or__3943__auto__ = G__7915.cljs$lang$protocol_mask$partition0$ & 134217728;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7915.cljs$core$IReversible$
      }
    }()) {
      return true
    }else {
      if(!G__7915.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__7915)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__7915)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while(true) {
        if(!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__7916 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__7916;
          continue
        }else {
          return arr
        }
        break
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while(true) {
      if(i > 0) {
        var G__7917 = i - 1;
        var G__7918 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__7917;
        r = G__7918;
        continue
      }else {
        return r
      }
      break
    }
  };
  var list = function(var_args) {
    var xs = null;
    if(arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return list__delegate.call(this, xs)
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__7919) {
    var xs = cljs.core.seq(arglist__7919);
    return list__delegate(xs)
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list
}();
goog.provide("cljs.core.Cons");
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core._seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.Cons(null, o, coll, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash)
};
cljs.core.cons = function cons(x, coll) {
  if(function() {
    var or__3943__auto__ = coll == null;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      var G__7921 = coll;
      if(G__7921) {
        if(function() {
          var or__3943__auto____$1 = G__7921.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            return G__7921.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__7923 = x;
  if(G__7923) {
    if(function() {
      var or__3943__auto__ = G__7923.cljs$lang$protocol_mask$partition0$ & 33554432;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return G__7923.cljs$core$IList$
      }
    }()) {
      return true
    }else {
      if(!G__7923.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__7923)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__7923)
  }
};
cljs.core.IHash["string"] = true;
cljs.core._hash["string"] = function(o) {
  return goog.string.hashCode(o)
};
goog.provide("cljs.core.Keyword");
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""))
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  return self__.name
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  return self__.ns
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  if(self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash
  }else {
    return self__._hash
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7927 = null;
  var G__7927__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__7925 = coll;
        if(G__7925) {
          if(function() {
            var or__3943__auto__ = G__7925.cljs$lang$protocol_mask$partition0$ & 256;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7925.cljs$core$ILookup$
            }
          }()) {
            return true
          }else {
            if(!G__7925.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__7925)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__7925)
        }
      }()) {
        return cljs.core._lookup.call(null, coll, kw, null)
      }else {
        return null
      }
    }
  };
  var G__7927__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    if(coll == null) {
      return not_found
    }else {
      if(function() {
        var G__7926 = coll;
        if(G__7926) {
          if(function() {
            var or__3943__auto__ = G__7926.cljs$lang$protocol_mask$partition0$ & 256;
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return G__7926.cljs$core$ILookup$
            }
          }()) {
            return true
          }else {
            if(!G__7926.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__7926)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__7926)
        }
      }()) {
        return cljs.core._lookup.call(null, coll, kw, not_found)
      }else {
        return not_found
      }
    }
  };
  G__7927 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7927__2.call(this, self__, coll);
      case 3:
        return G__7927__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7927
}();
cljs.core.Keyword.prototype.apply = function(self__, args7924) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args7924.slice()))
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  if(other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn
  }else {
    return false
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("")
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash)
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if(x === y) {
    return true
  }else {
    if(function() {
      var and__3941__auto__ = x instanceof cljs.core.Keyword;
      if(and__3941__auto__) {
        return y instanceof cljs.core.Keyword
      }else {
        return and__3941__auto__
      }
    }()) {
      return x.fqn === y.fqn
    }else {
      return false
    }
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(name instanceof cljs.core.Keyword) {
      return name
    }else {
      if(name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(null, cljs.core.name.call(null, name), cljs.core.name.call(null, name), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.Keyword(null, name, name, null)
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null)
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword
}();
goog.provide("cljs.core.LazySeq");
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  coll.cljs$core$ISeqable$_seq$arity$1(coll);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core._next.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if(self__.fn == null) {
    return self__.s
  }else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  coll.sval();
  if(self__.s == null) {
    return null
  }else {
    var ls = self__.s;
    while(true) {
      if(ls instanceof cljs.core.LazySeq) {
        var G__7928 = ls.sval();
        ls = G__7928;
        continue
      }else {
        self__.s = ls;
        if(self__.s == null) {
          return null
        }else {
          return cljs.core._seq.call(null, self__.s)
        }
      }
      break
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  coll.cljs$core$ISeqable$_seq$arity$1(coll);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core._first.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  coll.cljs$core$ISeqable$_seq$arity$1(coll);
  if(!(self__.s == null)) {
    return cljs.core._rest.call(null, self__.s)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash)
};
goog.provide("cljs.core.ChunkBuffer");
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end)
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0)
};
goog.provide("cljs.core.ArrayChunk");
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = i >= 0;
    if(and__3941__auto__) {
      return i < self__.end - self__.off
    }else {
      return and__3941__auto__
    }
  }()) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end - self__.off
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end)
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk
}();
goog.provide("cljs.core.ChunkedCons");
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if(more__$1 == null) {
      return null
    }else {
      return more__$1
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, this$)
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash)
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(function() {
    var G__7930 = s;
    if(G__7930) {
      if(function() {
        var or__3943__auto__ = G__7930.cljs$lang$protocol_mask$partition1$ & 1024;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__7930.cljs$core$IChunkedNext$
        }
      }()) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__7931 = cljs.core.next.call(null, s__$1);
      s__$1 = G__7931;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_7932 = 0;
  var xs_7933 = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs_7933) {
      ret[i_7932] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_7933));
      var G__7934 = i_7932 + 1;
      var G__7935 = cljs.core.next.call(null, xs_7933);
      i_7932 = G__7934;
      xs_7933 = G__7935;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7936 = i + 1;
          var G__7937 = cljs.core.next.call(null, s__$1);
          i = G__7936;
          s__$1 = G__7937;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__3647__auto___7938 = size;
      var i_7939 = 0;
      while(true) {
        if(i_7939 < n__3647__auto___7938) {
          a[i_7939] = init_val_or_seq;
          var G__7940 = i_7939 + 1;
          i_7939 = G__7940;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7941 = i + 1;
          var G__7942 = cljs.core.next.call(null, s__$1);
          i = G__7941;
          s__$1 = G__7942;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__3647__auto___7943 = size;
      var i_7944 = 0;
      while(true) {
        if(i_7944 < n__3647__auto___7943) {
          a[i_7944] = init_val_or_seq;
          var G__7945 = i_7944 + 1;
          i_7944 = G__7945;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7946 = i + 1;
          var G__7947 = cljs.core.next.call(null, s__$1);
          i = G__7946;
          s__$1 = G__7947;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__3647__auto___7948 = size;
      var i_7949 = 0;
      while(true) {
        if(i_7949 < n__3647__auto___7948) {
          a[i_7949] = init_val_or_seq;
          var G__7950 = i_7949 + 1;
          i_7949 = G__7950;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = s__$1;
          if(and__3941__auto__) {
            return i < size
          }else {
            return and__3941__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7951 = i + 1;
          var G__7952 = cljs.core.next.call(null, s__$1);
          i = G__7951;
          s__$1 = G__7952;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__3647__auto___7953 = size;
      var i_7954 = 0;
      while(true) {
        if(i_7954 < n__3647__auto___7953) {
          a[i_7954] = init_val_or_seq;
          var G__7955 = i_7954 + 1;
          i_7954 = G__7955;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = i > 0;
        if(and__3941__auto__) {
          return cljs.core.seq.call(null, s__$1)
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__7956 = cljs.core.next.call(null, s__$1);
        var G__7957 = i - 1;
        var G__7958 = sum + 1;
        s__$1 = G__7956;
        i = G__7957;
        sum = G__7958;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null
    }, null, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x
    }, null, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null, null)
  };
  var concat__3 = function() {
    var G__7959__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__7959 = function(x, y, var_args) {
      var zs = null;
      if(arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7959__delegate.call(this, x, y, zs)
    };
    G__7959.cljs$lang$maxFixedArity = 2;
    G__7959.cljs$lang$applyTo = function(arglist__7960) {
      var x = cljs.core.first(arglist__7960);
      arglist__7960 = cljs.core.next(arglist__7960);
      var y = cljs.core.first(arglist__7960);
      var zs = cljs.core.rest(arglist__7960);
      return G__7959__delegate(x, y, zs)
    };
    G__7959.cljs$core$IFn$_invoke$arity$variadic = G__7959__delegate;
    return G__7959
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__7961__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__7961 = function(a, b, c, d, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__7961__delegate.call(this, a, b, c, d, more)
    };
    G__7961.cljs$lang$maxFixedArity = 4;
    G__7961.cljs$lang$applyTo = function(arglist__7962) {
      var a = cljs.core.first(arglist__7962);
      arglist__7962 = cljs.core.next(arglist__7962);
      var b = cljs.core.first(arglist__7962);
      arglist__7962 = cljs.core.next(arglist__7962);
      var c = cljs.core.first(arglist__7962);
      arglist__7962 = cljs.core.next(arglist__7962);
      var d = cljs.core.first(arglist__7962);
      var more = cljs.core.rest(arglist__7962);
      return G__7961__delegate(a, b, c, d, more)
    };
    G__7961.cljs$core$IFn$_invoke$arity$variadic = G__7961__delegate;
    return G__7961
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__7963__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__7963 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__7963__delegate.call(this, f, a, b, c, d, args)
    };
    G__7963.cljs$lang$maxFixedArity = 5;
    G__7963.cljs$lang$applyTo = function(arglist__7964) {
      var f = cljs.core.first(arglist__7964);
      arglist__7964 = cljs.core.next(arglist__7964);
      var a = cljs.core.first(arglist__7964);
      arglist__7964 = cljs.core.next(arglist__7964);
      var b = cljs.core.first(arglist__7964);
      arglist__7964 = cljs.core.next(arglist__7964);
      var c = cljs.core.first(arglist__7964);
      arglist__7964 = cljs.core.next(arglist__7964);
      var d = cljs.core.first(arglist__7964);
      var args = cljs.core.rest(arglist__7964);
      return G__7963__delegate(f, a, b, c, d, args)
    };
    G__7963.cljs$core$IFn$_invoke$arity$variadic = G__7963__delegate;
    return G__7963
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__7965) {
    var obj = cljs.core.first(arglist__7965);
    arglist__7965 = cljs.core.next(arglist__7965);
    var f = cljs.core.first(arglist__7965);
    var args = cljs.core.rest(arglist__7965);
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__7966__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__7966 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__7966__delegate.call(this, x, y, more)
    };
    G__7966.cljs$lang$maxFixedArity = 2;
    G__7966.cljs$lang$applyTo = function(arglist__7967) {
      var x = cljs.core.first(arglist__7967);
      arglist__7967 = cljs.core.next(arglist__7967);
      var y = cljs.core.first(arglist__7967);
      var more = cljs.core.rest(arglist__7967);
      return G__7966__delegate(x, y, more)
    };
    G__7966.cljs$core$IFn$_invoke$arity$variadic = G__7966__delegate;
    return G__7966
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__7968 = pred;
        var G__7969 = cljs.core.next.call(null, coll);
        pred = G__7968;
        coll = G__7969;
        continue
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3943__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        var G__7970 = pred;
        var G__7971 = cljs.core.next.call(null, coll);
        pred = G__7970;
        coll = G__7971;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__7972 = null;
    var G__7972__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__7972__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__7972__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__7972__3 = function() {
      var G__7973__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__7973 = function(x, y, var_args) {
        var zs = null;
        if(arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__7973__delegate.call(this, x, y, zs)
      };
      G__7973.cljs$lang$maxFixedArity = 2;
      G__7973.cljs$lang$applyTo = function(arglist__7974) {
        var x = cljs.core.first(arglist__7974);
        arglist__7974 = cljs.core.next(arglist__7974);
        var y = cljs.core.first(arglist__7974);
        var zs = cljs.core.rest(arglist__7974);
        return G__7973__delegate(x, y, zs)
      };
      G__7973.cljs$core$IFn$_invoke$arity$variadic = G__7973__delegate;
      return G__7973
    }();
    G__7972 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7972__0.call(this);
        case 1:
          return G__7972__1.call(this, x);
        case 2:
          return G__7972__2.call(this, x, y);
        default:
          return G__7972__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7972.cljs$lang$maxFixedArity = 2;
    G__7972.cljs$lang$applyTo = G__7972__3.cljs$lang$applyTo;
    return G__7972
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__7975__delegate = function(args) {
      return x
    };
    var G__7975 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__7975__delegate.call(this, args)
    };
    G__7975.cljs$lang$maxFixedArity = 0;
    G__7975.cljs$lang$applyTo = function(arglist__7976) {
      var args = cljs.core.seq(arglist__7976);
      return G__7975__delegate(args)
    };
    G__7975.cljs$core$IFn$_invoke$arity$variadic = G__7975__delegate;
    return G__7975
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__7977 = null;
      var G__7977__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__7977__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__7977__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__7977__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__7977__4 = function() {
        var G__7978__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__7978 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__7978__delegate.call(this, x, y, z, args)
        };
        G__7978.cljs$lang$maxFixedArity = 3;
        G__7978.cljs$lang$applyTo = function(arglist__7979) {
          var x = cljs.core.first(arglist__7979);
          arglist__7979 = cljs.core.next(arglist__7979);
          var y = cljs.core.first(arglist__7979);
          arglist__7979 = cljs.core.next(arglist__7979);
          var z = cljs.core.first(arglist__7979);
          var args = cljs.core.rest(arglist__7979);
          return G__7978__delegate(x, y, z, args)
        };
        G__7978.cljs$core$IFn$_invoke$arity$variadic = G__7978__delegate;
        return G__7978
      }();
      G__7977 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7977__0.call(this);
          case 1:
            return G__7977__1.call(this, x);
          case 2:
            return G__7977__2.call(this, x, y);
          case 3:
            return G__7977__3.call(this, x, y, z);
          default:
            return G__7977__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7977.cljs$lang$maxFixedArity = 3;
      G__7977.cljs$lang$applyTo = G__7977__4.cljs$lang$applyTo;
      return G__7977
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__7980 = null;
      var G__7980__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__7980__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__7980__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__7980__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__7980__4 = function() {
        var G__7981__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__7981 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__7981__delegate.call(this, x, y, z, args)
        };
        G__7981.cljs$lang$maxFixedArity = 3;
        G__7981.cljs$lang$applyTo = function(arglist__7982) {
          var x = cljs.core.first(arglist__7982);
          arglist__7982 = cljs.core.next(arglist__7982);
          var y = cljs.core.first(arglist__7982);
          arglist__7982 = cljs.core.next(arglist__7982);
          var z = cljs.core.first(arglist__7982);
          var args = cljs.core.rest(arglist__7982);
          return G__7981__delegate(x, y, z, args)
        };
        G__7981.cljs$core$IFn$_invoke$arity$variadic = G__7981__delegate;
        return G__7981
      }();
      G__7980 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7980__0.call(this);
          case 1:
            return G__7980__1.call(this, x);
          case 2:
            return G__7980__2.call(this, x, y);
          case 3:
            return G__7980__3.call(this, x, y, z);
          default:
            return G__7980__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7980.cljs$lang$maxFixedArity = 3;
      G__7980.cljs$lang$applyTo = G__7980__4.cljs$lang$applyTo;
      return G__7980
    }()
  };
  var comp__4 = function() {
    var G__7983__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__7984__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__7985 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__7986 = cljs.core.next.call(null, fs__$2);
              ret = G__7985;
              fs__$2 = G__7986;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__7984 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__7984__delegate.call(this, args)
        };
        G__7984.cljs$lang$maxFixedArity = 0;
        G__7984.cljs$lang$applyTo = function(arglist__7987) {
          var args = cljs.core.seq(arglist__7987);
          return G__7984__delegate(args)
        };
        G__7984.cljs$core$IFn$_invoke$arity$variadic = G__7984__delegate;
        return G__7984
      }()
    };
    var G__7983 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__7983__delegate.call(this, f1, f2, f3, fs)
    };
    G__7983.cljs$lang$maxFixedArity = 3;
    G__7983.cljs$lang$applyTo = function(arglist__7988) {
      var f1 = cljs.core.first(arglist__7988);
      arglist__7988 = cljs.core.next(arglist__7988);
      var f2 = cljs.core.first(arglist__7988);
      arglist__7988 = cljs.core.next(arglist__7988);
      var f3 = cljs.core.first(arglist__7988);
      var fs = cljs.core.rest(arglist__7988);
      return G__7983__delegate(f1, f2, f3, fs)
    };
    G__7983.cljs$core$IFn$_invoke$arity$variadic = G__7983__delegate;
    return G__7983
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__2 = function(f, arg1) {
    return function() {
      var G__7989__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__7989 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__7989__delegate.call(this, args)
      };
      G__7989.cljs$lang$maxFixedArity = 0;
      G__7989.cljs$lang$applyTo = function(arglist__7990) {
        var args = cljs.core.seq(arglist__7990);
        return G__7989__delegate(args)
      };
      G__7989.cljs$core$IFn$_invoke$arity$variadic = G__7989__delegate;
      return G__7989
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__7991__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__7991 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__7991__delegate.call(this, args)
      };
      G__7991.cljs$lang$maxFixedArity = 0;
      G__7991.cljs$lang$applyTo = function(arglist__7992) {
        var args = cljs.core.seq(arglist__7992);
        return G__7991__delegate(args)
      };
      G__7991.cljs$core$IFn$_invoke$arity$variadic = G__7991__delegate;
      return G__7991
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__7993__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__7993 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__7993__delegate.call(this, args)
      };
      G__7993.cljs$lang$maxFixedArity = 0;
      G__7993.cljs$lang$applyTo = function(arglist__7994) {
        var args = cljs.core.seq(arglist__7994);
        return G__7993__delegate(args)
      };
      G__7993.cljs$core$IFn$_invoke$arity$variadic = G__7993__delegate;
      return G__7993
    }()
  };
  var partial__5 = function() {
    var G__7995__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__7996__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__7996 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__7996__delegate.call(this, args)
        };
        G__7996.cljs$lang$maxFixedArity = 0;
        G__7996.cljs$lang$applyTo = function(arglist__7997) {
          var args = cljs.core.seq(arglist__7997);
          return G__7996__delegate(args)
        };
        G__7996.cljs$core$IFn$_invoke$arity$variadic = G__7996__delegate;
        return G__7996
      }()
    };
    var G__7995 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__7995__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__7995.cljs$lang$maxFixedArity = 4;
    G__7995.cljs$lang$applyTo = function(arglist__7998) {
      var f = cljs.core.first(arglist__7998);
      arglist__7998 = cljs.core.next(arglist__7998);
      var arg1 = cljs.core.first(arglist__7998);
      arglist__7998 = cljs.core.next(arglist__7998);
      var arg2 = cljs.core.first(arglist__7998);
      arglist__7998 = cljs.core.next(arglist__7998);
      var arg3 = cljs.core.first(arglist__7998);
      var more = cljs.core.rest(arglist__7998);
      return G__7995__delegate(f, arg1, arg2, arg3, more)
    };
    G__7995.cljs$core$IFn$_invoke$arity$variadic = G__7995__delegate;
    return G__7995
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__7999 = null;
      var G__7999__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__7999__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__7999__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__7999__4 = function() {
        var G__8000__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__8000 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8000__delegate.call(this, a, b, c, ds)
        };
        G__8000.cljs$lang$maxFixedArity = 3;
        G__8000.cljs$lang$applyTo = function(arglist__8001) {
          var a = cljs.core.first(arglist__8001);
          arglist__8001 = cljs.core.next(arglist__8001);
          var b = cljs.core.first(arglist__8001);
          arglist__8001 = cljs.core.next(arglist__8001);
          var c = cljs.core.first(arglist__8001);
          var ds = cljs.core.rest(arglist__8001);
          return G__8000__delegate(a, b, c, ds)
        };
        G__8000.cljs$core$IFn$_invoke$arity$variadic = G__8000__delegate;
        return G__8000
      }();
      G__7999 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__7999__1.call(this, a);
          case 2:
            return G__7999__2.call(this, a, b);
          case 3:
            return G__7999__3.call(this, a, b, c);
          default:
            return G__7999__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7999.cljs$lang$maxFixedArity = 3;
      G__7999.cljs$lang$applyTo = G__7999__4.cljs$lang$applyTo;
      return G__7999
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__8002 = null;
      var G__8002__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__8002__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__8002__4 = function() {
        var G__8003__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__8003 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8003__delegate.call(this, a, b, c, ds)
        };
        G__8003.cljs$lang$maxFixedArity = 3;
        G__8003.cljs$lang$applyTo = function(arglist__8004) {
          var a = cljs.core.first(arglist__8004);
          arglist__8004 = cljs.core.next(arglist__8004);
          var b = cljs.core.first(arglist__8004);
          arglist__8004 = cljs.core.next(arglist__8004);
          var c = cljs.core.first(arglist__8004);
          var ds = cljs.core.rest(arglist__8004);
          return G__8003__delegate(a, b, c, ds)
        };
        G__8003.cljs$core$IFn$_invoke$arity$variadic = G__8003__delegate;
        return G__8003
      }();
      G__8002 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8002__2.call(this, a, b);
          case 3:
            return G__8002__3.call(this, a, b, c);
          default:
            return G__8002__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8002.cljs$lang$maxFixedArity = 3;
      G__8002.cljs$lang$applyTo = G__8002__4.cljs$lang$applyTo;
      return G__8002
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__8005 = null;
      var G__8005__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__8005__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__8005__4 = function() {
        var G__8006__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__8006 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8006__delegate.call(this, a, b, c, ds)
        };
        G__8006.cljs$lang$maxFixedArity = 3;
        G__8006.cljs$lang$applyTo = function(arglist__8007) {
          var a = cljs.core.first(arglist__8007);
          arglist__8007 = cljs.core.next(arglist__8007);
          var b = cljs.core.first(arglist__8007);
          arglist__8007 = cljs.core.next(arglist__8007);
          var c = cljs.core.first(arglist__8007);
          var ds = cljs.core.rest(arglist__8007);
          return G__8006__delegate(a, b, c, ds)
        };
        G__8006.cljs$core$IFn$_invoke$arity$variadic = G__8006__delegate;
        return G__8006
      }();
      G__8005 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8005__2.call(this, a, b);
          case 3:
            return G__8005__3.call(this, a, b, c);
          default:
            return G__8005__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8005.cljs$lang$maxFixedArity = 3;
      G__8005.cljs$lang$applyTo = G__8005__4.cljs$lang$applyTo;
      return G__8005
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3647__auto___8008 = size;
          var i_8009 = 0;
          while(true) {
            if(i_8009 < n__3647__auto___8008) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_8009, cljs.core._nth.call(null, c, i_8009)));
              var G__8010 = i_8009 + 1;
              i_8009 = G__8010;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3647__auto___8011 = size;
        var i_8012 = 0;
        while(true) {
          if(i_8012 < n__3647__auto___8011) {
            var x_8013 = f.call(null, cljs.core._nth.call(null, c, i_8012));
            if(x_8013 == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x_8013)
            }
            var G__8014 = i_8012 + 1;
            i_8012 = G__8014;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3647__auto___8015 = size;
          var i_8016 = 0;
          while(true) {
            if(i_8016 < n__3647__auto___8015) {
              var x_8017 = f.call(null, idx + i_8016, cljs.core._nth.call(null, c, i_8016));
              if(x_8017 == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x_8017)
              }
              var G__8018 = i_8016 + 1;
              i_8016 = G__8018;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            return p.call(null, y)
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__8025__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3941__auto__ = ep1.call(null, x, y, z);
            if(cljs.core.truth_(and__3941__auto__)) {
              return cljs.core.every_QMARK_.call(null, p, args)
            }else {
              return and__3941__auto__
            }
          }())
        };
        var G__8025 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8025__delegate.call(this, x, y, z, args)
        };
        G__8025.cljs$lang$maxFixedArity = 3;
        G__8025.cljs$lang$applyTo = function(arglist__8026) {
          var x = cljs.core.first(arglist__8026);
          arglist__8026 = cljs.core.next(arglist__8026);
          var y = cljs.core.first(arglist__8026);
          arglist__8026 = cljs.core.next(arglist__8026);
          var z = cljs.core.first(arglist__8026);
          var args = cljs.core.rest(arglist__8026);
          return G__8025__delegate(x, y, z, args)
        };
        G__8025.cljs$core$IFn$_invoke$arity$variadic = G__8025__delegate;
        return G__8025
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                var and__3941__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3941__auto____$3)) {
                  var and__3941__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3941__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3941__auto____$4
                  }
                }else {
                  return and__3941__auto____$3
                }
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__8027__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3941__auto__ = ep2.call(null, x, y, z);
            if(cljs.core.truth_(and__3941__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__8019_SHARP_) {
                var and__3941__auto____$1 = p1.call(null, p1__8019_SHARP_);
                if(cljs.core.truth_(and__3941__auto____$1)) {
                  return p2.call(null, p1__8019_SHARP_)
                }else {
                  return and__3941__auto____$1
                }
              }, args)
            }else {
              return and__3941__auto__
            }
          }())
        };
        var G__8027 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8027__delegate.call(this, x, y, z, args)
        };
        G__8027.cljs$lang$maxFixedArity = 3;
        G__8027.cljs$lang$applyTo = function(arglist__8028) {
          var x = cljs.core.first(arglist__8028);
          arglist__8028 = cljs.core.next(arglist__8028);
          var y = cljs.core.first(arglist__8028);
          arglist__8028 = cljs.core.next(arglist__8028);
          var z = cljs.core.first(arglist__8028);
          var args = cljs.core.rest(arglist__8028);
          return G__8027__delegate(x, y, z, args)
        };
        G__8027.cljs$core$IFn$_invoke$arity$variadic = G__8027__delegate;
        return G__8027
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                var and__3941__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3941__auto____$3)) {
                  var and__3941__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3941__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3941__auto____$4
                  }
                }else {
                  return and__3941__auto____$3
                }
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3941__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3941__auto____$1)) {
              var and__3941__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3941__auto____$2)) {
                var and__3941__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3941__auto____$3)) {
                  var and__3941__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3941__auto____$4)) {
                    var and__3941__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3941__auto____$5)) {
                      var and__3941__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3941__auto____$6)) {
                        var and__3941__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3941__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3941__auto____$7
                        }
                      }else {
                        return and__3941__auto____$6
                      }
                    }else {
                      return and__3941__auto____$5
                    }
                  }else {
                    return and__3941__auto____$4
                  }
                }else {
                  return and__3941__auto____$3
                }
              }else {
                return and__3941__auto____$2
              }
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__8029__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3941__auto__ = ep3.call(null, x, y, z);
            if(cljs.core.truth_(and__3941__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__8020_SHARP_) {
                var and__3941__auto____$1 = p1.call(null, p1__8020_SHARP_);
                if(cljs.core.truth_(and__3941__auto____$1)) {
                  var and__3941__auto____$2 = p2.call(null, p1__8020_SHARP_);
                  if(cljs.core.truth_(and__3941__auto____$2)) {
                    return p3.call(null, p1__8020_SHARP_)
                  }else {
                    return and__3941__auto____$2
                  }
                }else {
                  return and__3941__auto____$1
                }
              }, args)
            }else {
              return and__3941__auto__
            }
          }())
        };
        var G__8029 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8029__delegate.call(this, x, y, z, args)
        };
        G__8029.cljs$lang$maxFixedArity = 3;
        G__8029.cljs$lang$applyTo = function(arglist__8030) {
          var x = cljs.core.first(arglist__8030);
          arglist__8030 = cljs.core.next(arglist__8030);
          var y = cljs.core.first(arglist__8030);
          arglist__8030 = cljs.core.next(arglist__8030);
          var z = cljs.core.first(arglist__8030);
          var args = cljs.core.rest(arglist__8030);
          return G__8029__delegate(x, y, z, args)
        };
        G__8029.cljs$core$IFn$_invoke$arity$variadic = G__8029__delegate;
        return G__8029
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__8031__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__8021_SHARP_) {
            return p1__8021_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__8022_SHARP_) {
            var and__3941__auto__ = p1__8022_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3941__auto__)) {
              return p1__8022_SHARP_.call(null, y)
            }else {
              return and__3941__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__8023_SHARP_) {
            var and__3941__auto__ = p1__8023_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3941__auto__)) {
              var and__3941__auto____$1 = p1__8023_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3941__auto____$1)) {
                return p1__8023_SHARP_.call(null, z)
              }else {
                return and__3941__auto____$1
              }
            }else {
              return and__3941__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__8032__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, function() {
              var and__3941__auto__ = epn.call(null, x, y, z);
              if(cljs.core.truth_(and__3941__auto__)) {
                return cljs.core.every_QMARK_.call(null, function(p1__8024_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__8024_SHARP_, args)
                }, ps__$1)
              }else {
                return and__3941__auto__
              }
            }())
          };
          var G__8032 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__8032__delegate.call(this, x, y, z, args)
          };
          G__8032.cljs$lang$maxFixedArity = 3;
          G__8032.cljs$lang$applyTo = function(arglist__8033) {
            var x = cljs.core.first(arglist__8033);
            arglist__8033 = cljs.core.next(arglist__8033);
            var y = cljs.core.first(arglist__8033);
            arglist__8033 = cljs.core.next(arglist__8033);
            var z = cljs.core.first(arglist__8033);
            var args = cljs.core.rest(arglist__8033);
            return G__8032__delegate(x, y, z, args)
          };
          G__8032.cljs$core$IFn$_invoke$arity$variadic = G__8032__delegate;
          return G__8032
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn
      }()
    };
    var G__8031 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__8031__delegate.call(this, p1, p2, p3, ps)
    };
    G__8031.cljs$lang$maxFixedArity = 3;
    G__8031.cljs$lang$applyTo = function(arglist__8034) {
      var p1 = cljs.core.first(arglist__8034);
      arglist__8034 = cljs.core.next(arglist__8034);
      var p2 = cljs.core.first(arglist__8034);
      arglist__8034 = cljs.core.next(arglist__8034);
      var p3 = cljs.core.first(arglist__8034);
      var ps = cljs.core.rest(arglist__8034);
      return G__8031__delegate(p1, p2, p3, ps)
    };
    G__8031.cljs$core$IFn$_invoke$arity$variadic = G__8031__delegate;
    return G__8031
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3943__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3943__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__8041__delegate = function(x, y, z, args) {
          var or__3943__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__8041 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8041__delegate.call(this, x, y, z, args)
        };
        G__8041.cljs$lang$maxFixedArity = 3;
        G__8041.cljs$lang$applyTo = function(arglist__8042) {
          var x = cljs.core.first(arglist__8042);
          arglist__8042 = cljs.core.next(arglist__8042);
          var y = cljs.core.first(arglist__8042);
          arglist__8042 = cljs.core.next(arglist__8042);
          var z = cljs.core.first(arglist__8042);
          var args = cljs.core.rest(arglist__8042);
          return G__8041__delegate(x, y, z, args)
        };
        G__8041.cljs$core$IFn$_invoke$arity$variadic = G__8041__delegate;
        return G__8041
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              var or__3943__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3943__auto____$3)) {
                return or__3943__auto____$3
              }else {
                var or__3943__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3943__auto____$4)) {
                  return or__3943__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__8043__delegate = function(x, y, z, args) {
          var or__3943__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.some.call(null, function(p1__8035_SHARP_) {
              var or__3943__auto____$1 = p1.call(null, p1__8035_SHARP_);
              if(cljs.core.truth_(or__3943__auto____$1)) {
                return or__3943__auto____$1
              }else {
                return p2.call(null, p1__8035_SHARP_)
              }
            }, args)
          }
        };
        var G__8043 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8043__delegate.call(this, x, y, z, args)
        };
        G__8043.cljs$lang$maxFixedArity = 3;
        G__8043.cljs$lang$applyTo = function(arglist__8044) {
          var x = cljs.core.first(arglist__8044);
          arglist__8044 = cljs.core.next(arglist__8044);
          var y = cljs.core.first(arglist__8044);
          arglist__8044 = cljs.core.next(arglist__8044);
          var z = cljs.core.first(arglist__8044);
          var args = cljs.core.rest(arglist__8044);
          return G__8043__delegate(x, y, z, args)
        };
        G__8043.cljs$core$IFn$_invoke$arity$variadic = G__8043__delegate;
        return G__8043
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              var or__3943__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3943__auto____$3)) {
                return or__3943__auto____$3
              }else {
                var or__3943__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3943__auto____$4)) {
                  return or__3943__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3943__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3943__auto____$1)) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3943__auto____$2)) {
              return or__3943__auto____$2
            }else {
              var or__3943__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3943__auto____$3)) {
                return or__3943__auto____$3
              }else {
                var or__3943__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3943__auto____$4)) {
                  return or__3943__auto____$4
                }else {
                  var or__3943__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3943__auto____$5)) {
                    return or__3943__auto____$5
                  }else {
                    var or__3943__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3943__auto____$6)) {
                      return or__3943__auto____$6
                    }else {
                      var or__3943__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3943__auto____$7)) {
                        return or__3943__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__8045__delegate = function(x, y, z, args) {
          var or__3943__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.some.call(null, function(p1__8036_SHARP_) {
              var or__3943__auto____$1 = p1.call(null, p1__8036_SHARP_);
              if(cljs.core.truth_(or__3943__auto____$1)) {
                return or__3943__auto____$1
              }else {
                var or__3943__auto____$2 = p2.call(null, p1__8036_SHARP_);
                if(cljs.core.truth_(or__3943__auto____$2)) {
                  return or__3943__auto____$2
                }else {
                  return p3.call(null, p1__8036_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__8045 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8045__delegate.call(this, x, y, z, args)
        };
        G__8045.cljs$lang$maxFixedArity = 3;
        G__8045.cljs$lang$applyTo = function(arglist__8046) {
          var x = cljs.core.first(arglist__8046);
          arglist__8046 = cljs.core.next(arglist__8046);
          var y = cljs.core.first(arglist__8046);
          arglist__8046 = cljs.core.next(arglist__8046);
          var z = cljs.core.first(arglist__8046);
          var args = cljs.core.rest(arglist__8046);
          return G__8045__delegate(x, y, z, args)
        };
        G__8045.cljs$core$IFn$_invoke$arity$variadic = G__8045__delegate;
        return G__8045
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__8047__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__8037_SHARP_) {
            return p1__8037_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__8038_SHARP_) {
            var or__3943__auto__ = p1__8038_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return p1__8038_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__8039_SHARP_) {
            var or__3943__auto__ = p1__8039_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              var or__3943__auto____$1 = p1__8039_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3943__auto____$1)) {
                return or__3943__auto____$1
              }else {
                return p1__8039_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__8048__delegate = function(x, y, z, args) {
            var or__3943__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return cljs.core.some.call(null, function(p1__8040_SHARP_) {
                return cljs.core.some.call(null, p1__8040_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__8048 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__8048__delegate.call(this, x, y, z, args)
          };
          G__8048.cljs$lang$maxFixedArity = 3;
          G__8048.cljs$lang$applyTo = function(arglist__8049) {
            var x = cljs.core.first(arglist__8049);
            arglist__8049 = cljs.core.next(arglist__8049);
            var y = cljs.core.first(arglist__8049);
            arglist__8049 = cljs.core.next(arglist__8049);
            var z = cljs.core.first(arglist__8049);
            var args = cljs.core.rest(arglist__8049);
            return G__8048__delegate(x, y, z, args)
          };
          G__8048.cljs$core$IFn$_invoke$arity$variadic = G__8048__delegate;
          return G__8048
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn
      }()
    };
    var G__8047 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__8047__delegate.call(this, p1, p2, p3, ps)
    };
    G__8047.cljs$lang$maxFixedArity = 3;
    G__8047.cljs$lang$applyTo = function(arglist__8050) {
      var p1 = cljs.core.first(arglist__8050);
      arglist__8050 = cljs.core.next(arglist__8050);
      var p2 = cljs.core.first(arglist__8050);
      arglist__8050 = cljs.core.next(arglist__8050);
      var p3 = cljs.core.first(arglist__8050);
      var ps = cljs.core.rest(arglist__8050);
      return G__8047__delegate(p1, p2, p3, ps)
    };
    G__8047.cljs$core$IFn$_invoke$arity$variadic = G__8047__delegate;
    return G__8047
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__3647__auto___8052 = size;
          var i_8053 = 0;
          while(true) {
            if(i_8053 < n__3647__auto___8052) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_8053)));
              var G__8054 = i_8053 + 1;
              i_8053 = G__8054;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(function() {
        var and__3941__auto__ = s1;
        if(and__3941__auto__) {
          return s2
        }else {
          return and__3941__auto__
        }
      }()) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(function() {
        var and__3941__auto__ = s1;
        if(and__3941__auto__) {
          var and__3941__auto____$1 = s2;
          if(and__3941__auto____$1) {
            return s3
          }else {
            return and__3941__auto____$1
          }
        }else {
          return and__3941__auto__
        }
      }()) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__5 = function() {
    var G__8055__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null, null)
      };
      return map.call(null, function(p1__8051_SHARP_) {
        return cljs.core.apply.call(null, f, p1__8051_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__8055 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__8055__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__8055.cljs$lang$maxFixedArity = 4;
    G__8055.cljs$lang$applyTo = function(arglist__8056) {
      var f = cljs.core.first(arglist__8056);
      arglist__8056 = cljs.core.next(arglist__8056);
      var c1 = cljs.core.first(arglist__8056);
      arglist__8056 = cljs.core.next(arglist__8056);
      var c2 = cljs.core.first(arglist__8056);
      arglist__8056 = cljs.core.next(arglist__8056);
      var c3 = cljs.core.first(arglist__8056);
      var colls = cljs.core.rest(arglist__8056);
      return G__8055__delegate(f, c1, c2, c3, colls)
    };
    G__8055.cljs$core$IFn$_invoke$arity$variadic = G__8055__delegate;
    return G__8055
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if(n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = n__$1 > 0;
        if(and__3941__auto__) {
          return s
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__8057 = n__$1 - 1;
        var G__8058 = cljs.core.rest.call(null, s);
        n__$1 = G__8057;
        coll__$1 = G__8058;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll)
  }, null, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__8059 = cljs.core.next.call(null, s);
      var G__8060 = cljs.core.next.call(null, lead);
      s = G__8059;
      lead = G__8060;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = s;
        if(and__3941__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__8061 = pred__$1;
        var G__8062 = cljs.core.rest.call(null, s);
        pred__$1 = G__8061;
        coll__$1 = G__8062;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll)
  }, null, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], true)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(function() {
        var and__3941__auto__ = s1;
        if(and__3941__auto__) {
          return s2
        }else {
          return and__3941__auto__
        }
      }()) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null, null)
  };
  var interleave__3 = function() {
    var G__8063__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null, null)
    };
    var G__8063 = function(c1, c2, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__8063__delegate.call(this, c1, c2, colls)
    };
    G__8063.cljs$lang$maxFixedArity = 2;
    G__8063.cljs$lang$applyTo = function(arglist__8064) {
      var c1 = cljs.core.first(arglist__8064);
      arglist__8064 = cljs.core.next(arglist__8064);
      var c2 = cljs.core.first(arglist__8064);
      var colls = cljs.core.rest(arglist__8064);
      return G__8063__delegate(c1, c2, colls)
    };
    G__8063.cljs$core$IFn$_invoke$arity$variadic = G__8063__delegate;
    return G__8063
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__8065__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__8065 = function(f, coll, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__8065__delegate.call(this, f, coll, colls)
    };
    G__8065.cljs$lang$maxFixedArity = 2;
    G__8065.cljs$lang$applyTo = function(arglist__8066) {
      var f = cljs.core.first(arglist__8066);
      arglist__8066 = cljs.core.next(arglist__8066);
      var coll = cljs.core.first(arglist__8066);
      var colls = cljs.core.rest(arglist__8066);
      return G__8065__delegate(f, coll, colls)
    };
    G__8065.cljs$core$IFn$_invoke$arity$variadic = G__8065__delegate;
    return G__8065
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__3647__auto___8067 = size;
        var i_8068 = 0;
        while(true) {
          if(i_8068 < n__3647__auto___8067) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_8068)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_8068))
            }else {
            }
            var G__8069 = i_8068 + 1;
            i_8068 = G__8069;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__8070_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__8070_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(!(to == null)) {
    if(function() {
      var G__8072 = to;
      if(G__8072) {
        if(function() {
          var or__3943__auto__ = G__8072.cljs$lang$protocol_mask$partition1$ & 4;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__8072.cljs$core$IEditableCollection$
          }
        }()) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
    }else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from)
    }
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__8073__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__8073 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__8073__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__8073.cljs$lang$maxFixedArity = 4;
    G__8073.cljs$lang$applyTo = function(arglist__8074) {
      var f = cljs.core.first(arglist__8074);
      arglist__8074 = cljs.core.next(arglist__8074);
      var c1 = cljs.core.first(arglist__8074);
      arglist__8074 = cljs.core.next(arglist__8074);
      var c2 = cljs.core.first(arglist__8074);
      arglist__8074 = cljs.core.next(arglist__8074);
      var c3 = cljs.core.first(arglist__8074);
      var colls = cljs.core.rest(arglist__8074);
      return G__8073__delegate(f, c1, c2, c3, colls)
    };
    G__8073.cljs$core$IFn$_invoke$arity$variadic = G__8073__delegate;
    return G__8073
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core.list.call(null, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        if(!function() {
          var G__8076 = m__$1;
          if(G__8076) {
            if(function() {
              var or__3943__auto__ = G__8076.cljs$lang$protocol_mask$partition0$ & 256;
              if(or__3943__auto__) {
                return or__3943__auto__
              }else {
                return G__8076.cljs$core$ILookup$
              }
            }()) {
              return true
            }else {
              if(!G__8076.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__8076)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.type_satisfies_.call(null, cljs.core.ILookup, G__8076)
          }
        }()) {
          return not_found
        }else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if(sentinel === m__$2) {
            return not_found
          }else {
            var G__8077 = sentinel;
            var G__8078 = m__$2;
            var G__8079 = cljs.core.next.call(null, ks__$1);
            sentinel = G__8077;
            m__$1 = G__8078;
            ks__$1 = G__8079;
            continue
          }
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__8080, v) {
  var vec__8082 = p__8080;
  var k = cljs.core.nth.call(null, vec__8082, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__8082, 1);
  if(cljs.core.truth_(ks)) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__8083, f) {
    var vec__8093 = p__8083;
    var k = cljs.core.nth.call(null, vec__8093, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__8093, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)))
    }
  };
  var update_in__4 = function(m, p__8084, f, a) {
    var vec__8094 = p__8084;
    var k = cljs.core.nth.call(null, vec__8094, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__8094, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a))
    }
  };
  var update_in__5 = function(m, p__8085, f, a, b) {
    var vec__8095 = p__8085;
    var k = cljs.core.nth.call(null, vec__8095, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__8095, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b))
    }
  };
  var update_in__6 = function(m, p__8086, f, a, b, c) {
    var vec__8096 = p__8086;
    var k = cljs.core.nth.call(null, vec__8096, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__8096, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c))
    }
  };
  var update_in__7 = function() {
    var G__8098__delegate = function(m, p__8087, f, a, b, c, args) {
      var vec__8097 = p__8087;
      var k = cljs.core.nth.call(null, vec__8097, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__8097, 1);
      if(cljs.core.truth_(ks)) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args))
      }else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args))
      }
    };
    var G__8098 = function(m, p__8087, f, a, b, c, var_args) {
      var args = null;
      if(arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0)
      }
      return G__8098__delegate.call(this, m, p__8087, f, a, b, c, args)
    };
    G__8098.cljs$lang$maxFixedArity = 6;
    G__8098.cljs$lang$applyTo = function(arglist__8099) {
      var m = cljs.core.first(arglist__8099);
      arglist__8099 = cljs.core.next(arglist__8099);
      var p__8087 = cljs.core.first(arglist__8099);
      arglist__8099 = cljs.core.next(arglist__8099);
      var f = cljs.core.first(arglist__8099);
      arglist__8099 = cljs.core.next(arglist__8099);
      var a = cljs.core.first(arglist__8099);
      arglist__8099 = cljs.core.next(arglist__8099);
      var b = cljs.core.first(arglist__8099);
      arglist__8099 = cljs.core.next(arglist__8099);
      var c = cljs.core.first(arglist__8099);
      var args = cljs.core.rest(arglist__8099);
      return G__8098__delegate(m, p__8087, f, a, b, c, args)
    };
    G__8098.cljs$core$IFn$_invoke$arity$variadic = G__8098__delegate;
    return G__8098
  }();
  update_in = function(m, p__8087, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__8087, f);
      case 4:
        return update_in__4.call(this, m, p__8087, f, a);
      case 5:
        return update_in__5.call(this, m, p__8087, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__8087, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__8087, f, a, b, c, cljs.core.array_seq(arguments, 6))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in
}();
goog.provide("cljs.core.VectorNode");
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3413__auto__, writer__3414__auto__, opts__3415__auto__) {
  return cljs.core._write.call(null, writer__3414__auto__, "cljs.core/VectorNode")
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr)
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, new Array(32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, node.arr.slice())
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__8100 = ll - 5;
      var G__8101 = r;
      ll = G__8100;
      ret = G__8101;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if(function() {
    var and__3941__auto__ = 0 <= i;
    if(and__3941__auto__) {
      return i < pv.cnt
    }else {
      return and__3941__auto__
    }
  }()) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__8102 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__8103 = level - 5;
          node = G__8102;
          level = G__8103;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt)
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(function() {
      var and__3941__auto__ = new_child == null;
      if(and__3941__auto__) {
        return subidx === 0
      }else {
        return and__3941__auto__
      }
    }()) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
goog.provide("cljs.core.PersistentVector");
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = 0 <= k;
    if(and__3941__auto__) {
      return k < self__.cnt
    }else {
      return and__3941__auto__
    }
  }()) {
    if(cljs.core.tail_off.call(null, coll) <= k) {
      var new_tail = self__.tail.slice();
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return coll.cljs$core$ICollection$_conj$arity$2(coll, v)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__8105 = null;
  var G__8105__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, k)
  };
  var G__8105__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
  };
  G__8105 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8105__2.call(this, self__, k);
      case 3:
        return G__8105__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8105
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args8104) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8104.slice()))
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__8106 = j + 1;
              var G__8107 = init__$2;
              j = G__8106;
              init__$1 = G__8107;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__8108 = i + step_init[0];
        i = G__8108;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll) < 32) {
    var new_tail = self__.tail.slice();
    new_tail.push(o);
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    return null
  }else {
    if(self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll, 0, 0)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(function() {
            var and__3941__auto__ = 5 < self__.shift;
            if(and__3941__auto__) {
              return cljs.core.pv_aget.call(null, new_root, 1) == null
            }else {
              return and__3941__auto__
            }
          }()) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core.array_for.call(null, coll, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = 0 <= n;
    if(and__3941__auto__) {
      return n < self__.cnt
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash)
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, new Array(32));
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : xs.slice();
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__8109 = i + 1;
        var G__8110 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__8109;
        out = G__8110;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    return cljs.core.vec.call(null, args)
  };
  var vector = function(var_args) {
    var args = null;
    if(arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__8111) {
    var args = cljs.core.seq(arglist__8111);
    return vector__delegate(args)
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector
}();
goog.provide("cljs.core.ChunkedSeq");
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash)
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq
}();
goog.provide("cljs.core.Subvec");
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3191__auto__ = self__.end;
    var y__3192__auto__ = v_pos + 1;
    return x__3191__auto__ > y__3192__auto__ ? x__3191__auto__ : y__3192__auto__
  }(), null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__8113 = null;
  var G__8113__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, k)
  };
  var G__8113__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
  };
  G__8113 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8113__2.call(this, self__, k);
      case 3:
        return G__8113__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8113
}();
cljs.core.Subvec.prototype.apply = function(self__, args8112) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8112.slice()))
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1)
      }, null, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(function() {
    var or__3943__auto__ = n < 0;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return self__.end <= self__.start + n
    }
  }()) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start)
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n)
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var or__3943__auto__ = n < 0;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return self__.end <= self__.start + n
    }
  }()) {
    return not_found
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash)
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while(true) {
    if(v instanceof cljs.core.Subvec) {
      var G__8114 = meta;
      var G__8115 = v.v;
      var G__8116 = v.start + start;
      var G__8117 = v.start + end;
      var G__8118 = __hash;
      meta = G__8114;
      v = G__8115;
      start = G__8116;
      end = G__8117;
      __hash = G__8118;
      continue
    }else {
      var c = cljs.core.count.call(null, v);
      if(function() {
        var or__3943__auto__ = start < 0;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = end < 0;
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            var or__3943__auto____$2 = start > c;
            if(or__3943__auto____$2) {
              return or__3943__auto____$2
            }else {
              return end > c
            }
          }
        }
      }()) {
        throw new Error("Index out of bounds");
      }else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash)
    }
    break
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, node.arr.slice())
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode({}, node.arr.slice())
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = new Array(32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(function() {
      var and__3941__auto__ = new_child == null;
      if(and__3941__auto__) {
        return subidx === 0
      }else {
        return and__3941__auto__
      }
    }()) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(function() {
    var and__3941__auto__ = 0 <= i;
    if(and__3941__auto__) {
      return i < tv.cnt
    }else {
      return and__3941__auto__
    }
  }()) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__8119 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__8120 = level - 5;
          node = G__8119;
          level = G__8120;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
goog.provide("cljs.core.TransientVector");
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__8122 = null;
  var G__8122__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8122__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8122 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8122__2.call(this, self__, k);
      case 3:
        return G__8122__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8122
}();
cljs.core.TransientVector.prototype.apply = function(self__, args8121) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8121.slice()))
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = 0 <= n;
    if(and__3941__auto__) {
      return n < self__.cnt
    }else {
      return and__3941__auto__
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  if(self__.root.edit) {
    if(function() {
      var and__3941__auto__ = 0 <= n;
      if(and__3941__auto__) {
        return n < self__.cnt
      }else {
        return and__3941__auto__
      }
    }()) {
      if(cljs.core.tail_off.call(null, tcoll) <= n) {
        self__.tail[n & 31] = val;
        return tcoll
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll
      }
    }else {
      if(n === self__.cnt) {
        return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, new Array(32))
              }
            }();
            if(function() {
              var and__3941__auto__ = 5 < self__.shift;
              if(and__3941__auto__) {
                return cljs.core.pv_aget.call(null, new_root, 1) == null
              }else {
                return and__3941__auto__
              }
            }()) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = new Array(32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = new Array(32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail)
};
goog.provide("cljs.core.PersistentQueueSeq");
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash)
};
goog.provide("cljs.core.PersistentQueue");
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3943__auto__ = self__.rear;
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = self__.front;
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash)
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
goog.provide("cljs.core.NeverEquiv");
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return false
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__8123 = i + incr;
        i = G__8123;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__8124 = i + 1;
      var G__8125 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__8124;
      out = G__8125;
      continue
    }else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm)
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_8126 = 0;
  while(true) {
    if(i_8126 < l) {
      var k_8127 = ks[i_8126];
      new_obj[k_8127] = obj[k_8127];
      var G__8128 = i_8126 + 1;
      i_8126 = G__8128;
      continue
    }else {
    }
    break
  }
  return new_obj
};
goog.provide("cljs.core.ObjMap");
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.hash_map.call(null), coll))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = goog.isString(k);
    if(and__3941__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3941__auto__
    }
  }()) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(goog.isString(k)) {
    if(function() {
      var or__3943__auto__ = self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD
      }
    }()) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = self__.keys.slice();
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = goog.isString(k);
    if(and__3941__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3941__auto__
    }
  }()) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__8131 = null;
  var G__8131__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8131__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8131 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8131__2.call(this, self__, k);
      case 3:
        return G__8131__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8131
}();
cljs.core.ObjMap.prototype.apply = function(self__, args8130) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8130.slice()))
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while(true) {
    if(cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__8132 = cljs.core.rest.call(null, keys__$1);
        var G__8133 = init__$2;
        keys__$1 = G__8132;
        init__$1 = G__8133;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__8129_SHARP_) {
      return cljs.core.vector.call(null, p1__8129_SHARP_, self__.strobj[p1__8129_SHARP_])
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(function() {
    var and__3941__auto__ = goog.isString(k);
    if(and__3941__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3941__auto__
    }
  }()) {
    var new_keys = self__.keys.slice();
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash)
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(arr[i] == null) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__8134 = i + 2;
          i = G__8134;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        var and__3941__auto__ = k_SINGLEQUOTE_ instanceof cljs.core.Keyword;
        if(and__3941__auto__) {
          return kstr === k_SINGLEQUOTE_.fqn
        }else {
          return and__3941__auto__
        }
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__8135 = i + 2;
          i = G__8135;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        var and__3941__auto__ = k_SINGLEQUOTE_ instanceof cljs.core.Symbol;
        if(and__3941__auto__) {
          return kstr === k_SINGLEQUOTE_.str
        }else {
          return and__3941__auto__
        }
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__8136 = i + 2;
          i = G__8136;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(k === arr[i]) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__8137 = i + 2;
          i = G__8137;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, k, arr[i])) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__8138 = i + 2;
          i = G__8138;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if(k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k)
  }else {
    if(function() {
      var or__3943__auto__ = goog.isString(k);
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        return typeof k === "number"
      }
    }()) {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k)
    }else {
      if(k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k)
      }else {
        if(k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k)
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_8139 = 0;
  while(true) {
    if(i_8139 < l) {
      narr[i_8139] = arr[i_8139];
      var G__8140 = i_8139 + 1;
      i_8139 = G__8140;
      continue
    }else {
    }
    break
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr
};
goog.provide("cljs.core.PersistentArrayMapSeq");
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentArrayMapSeq")
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return(self__.arr.length - self__.i) / 2
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.arr[self__.i], self__.arr[self__.i + 1]], true)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__._meta
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if(i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
  }else {
    return null
  }
};
goog.provide("cljs.core.PersistentArrayMap");
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, self__.arr.slice())
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null)
    }else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll), k, v), self__.meta)
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__8142 = self__.arr.slice();
          G__8142[idx + 1] = v;
          return G__8142
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(cljs.core.array_map_index_of.call(null, coll, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__8143 = null;
  var G__8143__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8143__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8143 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8143__2.call(this, self__, k);
      case 3:
        return G__8143__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8143
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args8141) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8141.slice()))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__8144 = i + 2;
        var G__8145 = init__$2;
        i = G__8144;
        init__$1 = G__8145;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__8146 = s + 2;
            var G__8147 = d;
            s = G__8146;
            d = G__8147;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__8148 = s + 2;
              var G__8149 = d + 2;
              s = G__8148;
              d = G__8149;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash)
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : arr.slice();
  var cnt = arr__$1.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null)
};
goog.provide("cljs.core.TransientArrayMap");
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__8150_8152 = self__.arr;
      G__8150_8152.pop();
      G__8150_8152.pop();
      self__.len = self__.len - 2
    }else {
    }
    return tcoll
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll
      }else {
        self__.arr[idx + 1] = val;
        return tcoll
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(function() {
      var G__8151 = o;
      if(G__8151) {
        if(function() {
          var or__3943__auto__ = G__8151.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__8151.cljs$core$IMapEntry$
          }
        }()) {
          return true
        }else {
          if(!G__8151.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__8151)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__8151)
      }
    }()) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__8153 = cljs.core.next.call(null, es);
          var G__8154 = tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll__$1, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__8153;
          tcoll__$1 = G__8154;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr)
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__8155 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__8156 = i + 2;
      out = G__8155;
      i = G__8156;
      continue
    }else {
      return out
    }
    break
  }
};
goog.provide("cljs.core.Box");
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3413__auto__, writer__3414__auto__, opts__3415__auto__) {
  return cljs.core._write.call(null, writer__3414__auto__, "cljs.core/Box")
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val)
};
cljs.core.key_test = function key_test(key, other) {
  if(key === other) {
    return true
  }else {
    if(cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other)
      }else {
        return null
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__8159 = arr.slice();
    G__8159[i] = a;
    return G__8159
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__8160 = arr.slice();
    G__8160[i] = a;
    G__8160[j] = b;
    return G__8160
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__8161 = i + 2;
        var G__8162 = init__$2;
        i = G__8161;
        init__$1 = G__8162;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
goog.provide("cljs.core.BitmapIndexedNode");
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = new Array(32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_8163 = 0;
        var j_8164 = 0;
        while(true) {
          if(i_8163 < 32) {
            if((self__.bitmap >>> i_8163 & 1) === 0) {
              var G__8165 = i_8163 + 1;
              var G__8166 = j_8164;
              i_8163 = G__8165;
              j_8164 = G__8166;
              continue
            }else {
              nodes[i_8163] = !(self__.arr[j_8164] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_8164]), self__.arr[j_8164], self__.arr[j_8164 + 1], added_leaf_QMARK_) : self__.arr[j_8164 + 1];
              var G__8167 = i_8163 + 1;
              var G__8168 = j_8164 + 2;
              i_8163 = G__8167;
              j_8164 = G__8168;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return cljs.core.PersistentVector.fromArray([key_or_nil, val_or_node], true)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = new Array(32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_8169 = 0;
      var j_8170 = 0;
      while(true) {
        if(i_8169 < 32) {
          if((self__.bitmap >>> i_8169 & 1) === 0) {
            var G__8171 = i_8169 + 1;
            var G__8172 = j_8170;
            i_8169 = G__8171;
            j_8170 = G__8172;
            continue
          }else {
            nodes[i_8169] = !(self__.arr[j_8170] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_8170]), self__.arr[j_8170], self__.arr[j_8170 + 1], added_leaf_QMARK_) : self__.arr[j_8170 + 1];
            var G__8173 = i_8169 + 1;
            var G__8174 = j_8170 + 2;
            i_8169 = G__8173;
            j_8170 = G__8174;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr)
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, new Array(0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(function() {
        var and__3941__auto__ = !(i === idx);
        if(and__3941__auto__) {
          return!(arr[i] == null)
        }else {
          return and__3941__auto__
        }
      }()) {
        new_arr[j] = arr[i];
        var G__8175 = i + 1;
        var G__8176 = j + 2;
        var G__8177 = bitmap | 1 << i;
        i = G__8175;
        j = G__8176;
        bitmap = G__8177;
        continue
      }else {
        var G__8178 = i + 1;
        var G__8179 = j;
        var G__8180 = bitmap;
        i = G__8178;
        j = G__8179;
        bitmap = G__8180;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
goog.provide("cljs.core.ArrayNode");
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, self__.arr.slice())
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__8181 = i + 1;
          var G__8182 = init__$2;
          i = G__8181;
          init__$1 = G__8182;
          continue
        }
      }else {
        var G__8183 = i + 1;
        var G__8184 = init__$1;
        i = G__8183;
        init__$1 = G__8184;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr)
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__8185 = i + 2;
        i = G__8185;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
goog.provide("cljs.core.HashCollisionNode");
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return cljs.core.PersistentVector.fromArray([self__.arr[idx], self__.arr[idx + 1]], true)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = self__.arr.length;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr)
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node
}();
goog.provide("cljs.core.NodeSeq");
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.PersistentVector.fromArray([self__.nodes[self__.i], self__.nodes[self__.i + 1]], true)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__4090__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__8186 = j + 2;
                j = G__8186;
                continue
              }
            }else {
              var G__8187 = j + 2;
              j = G__8187;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
goog.provide("cljs.core.ArrayNodeSeq");
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__4090__auto__ = nodes[j];
          if(cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__8188 = j + 1;
              j = G__8188;
              continue
            }
          }else {
            var G__8189 = j + 1;
            j = G__8189;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
goog.provide("cljs.core.PersistentHashMap");
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(k == null) {
    if(function() {
      var and__3941__auto__ = self__.has_nil_QMARK_;
      if(and__3941__auto__) {
        return v === self__.nil_val
      }else {
        return and__3941__auto__
      }
    }()) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__8191 = null;
  var G__8191__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8191__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8191 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8191__2.call(this, self__, k);
      case 3:
        return G__8191__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8191
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args8190) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8190.slice()))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([null, self__.nil_val], true), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll
    }
  }else {
    if(self__.root == null) {
      return coll
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash)
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__8192 = i + 1;
      var G__8193 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__8192;
      out = G__8193;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashMap");
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  return tcoll.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  return tcoll.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return tcoll.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(function() {
      var G__8194 = o;
      if(G__8194) {
        if(function() {
          var or__3943__auto__ = G__8194.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return G__8194.cljs$core$IMapEntry$
          }
        }()) {
          return true
        }else {
          if(!G__8194.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__8194)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__8194)
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__8195 = cljs.core.next.call(null, es);
          var G__8196 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__8195;
          tcoll__$1 = G__8196;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val)
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__8197 = ascending_QMARK_ ? t.left : t.right;
      var G__8198 = cljs.core.conj.call(null, stack__$1, t);
      t = G__8197;
      stack__$1 = G__8198;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
goog.provide("cljs.core.PersistentTreeMapSeq");
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash)
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(function() {
        var and__3941__auto__ = right instanceof cljs.core.RedNode;
        if(and__3941__auto__) {
          return right.left instanceof cljs.core.BlackNode
        }else {
          return and__3941__auto__
        }
      }()) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(function() {
        var and__3941__auto__ = left instanceof cljs.core.RedNode;
        if(and__3941__auto__) {
          return left.right instanceof cljs.core.BlackNode
        }else {
          return and__3941__auto__
        }
      }()) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
goog.provide("cljs.core.BlackNode");
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__8200 = null;
  var G__8200__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__8200__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__8200 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8200__2.call(this, self__, k);
      case 3:
        return G__8200__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8200
}();
cljs.core.BlackNode.prototype.apply = function(self__, args8199) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8199.slice()))
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash)
};
goog.provide("cljs.core.RedNode");
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__8202 = null;
  var G__8202__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__8202__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__8202 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8202__2.call(this, self__, k);
      case 3:
        return G__8202__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8202
}();
cljs.core.RedNode.prototype.apply = function(self__, args8201) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8201.slice()))
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash)
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(left instanceof cljs.core.RedNode) {
        if(right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if(app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(function() {
          var or__3943__auto__ = !(del == null);
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return!(found[0] == null)
          }
        }()) {
          if(tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(function() {
            var or__3943__auto__ = !(del == null);
            if(or__3943__auto__) {
              return or__3943__auto__
            }else {
              return!(found[0] == null)
            }
          }()) {
            if(tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
goog.provide("cljs.core.PersistentTreeMap");
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var n = coll.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(coll.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__8204 = null;
  var G__8204__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8204__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8204 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8204__2.call(this, self__, k);
      case 3:
        return G__8204__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8204
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args8203) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8203.slice()))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__8205 = t.left;
          t = G__8205;
          continue
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__8206 = t.right;
            t = G__8206;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__8207 = cljs.core.conj.call(null, stack, t);
              var G__8208 = t.left;
              stack = G__8207;
              t = G__8208;
              continue
            }else {
              var G__8209 = stack;
              var G__8210 = t.right;
              stack = G__8209;
              t = G__8210;
              continue
            }
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if(c > 0) {
                var G__8211 = cljs.core.conj.call(null, stack, t);
                var G__8212 = t.right;
                stack = G__8211;
                t = G__8212;
                continue
              }else {
                var G__8213 = stack;
                var G__8214 = t.left;
                stack = G__8213;
                t = G__8214;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash)
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__8215 = cljs.core.nnext.call(null, in$);
        var G__8216 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__8215;
        out = G__8216;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__8217) {
    var keyvals = cljs.core.seq(arglist__8217);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__8218) {
    var keyvals = cljs.core.seq(arglist__8218);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = {};
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__8219 = cljs.core.nnext.call(null, kvs);
        kvs = G__8219;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__8220) {
    var keyvals = cljs.core.seq(arglist__8220);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__8221 = cljs.core.nnext.call(null, in$);
        var G__8222 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__8221;
        out = G__8222;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__8223) {
    var keyvals = cljs.core.seq(arglist__8223);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__8224 = cljs.core.nnext.call(null, in$);
        var G__8225 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__8224;
        out = G__8225;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__8226) {
    var comparator = cljs.core.first(arglist__8226);
    var keyvals = cljs.core.rest(arglist__8226);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
goog.provide("cljs.core.KeySeq");
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/KeySeq")
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var nseq = function() {
    var G__8227 = self__.mseq;
    if(G__8227) {
      if(function() {
        var or__3943__auto__ = G__8227.cljs$lang$protocol_mask$partition0$ & 128;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__8227.cljs$core$INext$
        }
      }()) {
        return true
      }else {
        if(!G__8227.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8227)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8227)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me)
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var nseq = function() {
    var G__8228 = self__.mseq;
    if(G__8228) {
      if(function() {
        var or__3943__auto__ = G__8228.cljs$lang$protocol_mask$partition0$ & 128;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__8228.cljs$core$INext$
        }
      }()) {
        return true
      }else {
        if(!G__8228.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8228)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8228)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta)
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__._meta
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta)
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
goog.provide("cljs.core.ValSeq");
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/ValSeq")
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var nseq = function() {
    var G__8229 = self__.mseq;
    if(G__8229) {
      if(function() {
        var or__3943__auto__ = G__8229.cljs$lang$protocol_mask$partition0$ & 128;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__8229.cljs$core$INext$
        }
      }()) {
        return true
      }else {
        if(!G__8229.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8229)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8229)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, coll)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.seq_reduce.call(null, f, start, coll)
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me)
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var nseq = function() {
    var G__8230 = self__.mseq;
    if(G__8230) {
      if(function() {
        var or__3943__auto__ = G__8230.cljs$lang$protocol_mask$partition0$ & 128;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__8230.cljs$core$INext$
        }
      }()) {
        return true
      }else {
        if(!G__8230.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8230)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__8230)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta)
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__._meta
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta)
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__8231_SHARP_, p2__8232_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3943__auto__ = p1__8231_SHARP_;
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return cljs.core.PersistentArrayMap.EMPTY
          }
        }(), p2__8232_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__8233) {
    var maps = cljs.core.seq(arglist__8233);
    return merge__delegate(maps)
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3943__auto__ = m1;
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return cljs.core.PersistentArrayMap.EMPTY
            }
          }(), cljs.core.seq.call(null, m2))
        }
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__8234) {
    var f = cljs.core.first(arglist__8234);
    var maps = cljs.core.rest(arglist__8234);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__8235 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__8236 = cljs.core.next.call(null, keys);
      ret = G__8235;
      keys = G__8236;
      continue
    }else {
      return ret
    }
    break
  }
};
goog.provide("cljs.core.PersistentHashSet");
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v))) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__8239 = null;
  var G__8239__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8239__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8239 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8239__2.call(this, self__, k);
      case 3:
        return G__8239__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8239
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args8238) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8238.slice()))
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._count.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3941__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3941__auto__) {
    var and__3941__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3941__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__8237_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__8237_SHARP_)
      }, other)
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash)
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if(len / 2 <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : items.slice();
    return new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.fromArray.call(null, arr, true), null)
  }else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < len) {
        var G__8240 = i + 2;
        var G__8241 = cljs.core.conj_BANG_.call(null, out, items[i]);
        i = G__8240;
        out = G__8241;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
goog.provide("cljs.core.TransientHashSet");
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__8243 = null;
  var G__8243__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__8243__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__8243 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8243__2.call(this, self__, k);
      case 3:
        return G__8243__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8243
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args8242) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8242.slice()))
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map)
};
goog.provide("cljs.core.PersistentTreeSet");
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__8246 = null;
  var G__8246__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__8246__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__8246 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8246__2.call(this, self__, k);
      case 3:
        return G__8246__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8246
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args8245) {
  var self__ = this;
  return self__.call.apply(self__, [self__].concat(args8245.slice()))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3941__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3941__auto__) {
    var and__3941__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3941__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__8244_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__8244_SHARP_)
      }, other)
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash)
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__3641__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < a__3641__auto__.length) {
        var G__8247 = i + 1;
        var G__8248 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__8247;
        res = G__8248;
        continue
      }else {
        return res
      }
      break
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret)
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if(in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY
  }else {
    if(in$ instanceof cljs.core.IndexedSeq) {
      return cljs.core.set_from_indexed_seq.call(null, in$)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while(true) {
          if(!(in$__$1 == null)) {
            var G__8249 = cljs.core._next.call(null, in$__$1);
            var G__8250 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__8249;
            out = G__8250;
            continue
          }else {
            return cljs.core._persistent_BANG_.call(null, out)
          }
          break
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__8251__delegate = function(keys) {
      return cljs.core.set.call(null, keys)
    };
    var G__8251 = function(var_args) {
      var keys = null;
      if(arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__8251__delegate.call(this, keys)
    };
    G__8251.cljs$lang$maxFixedArity = 0;
    G__8251.cljs$lang$applyTo = function(arglist__8252) {
      var keys = cljs.core.seq(arglist__8252);
      return G__8251__delegate(keys)
    };
    G__8251.cljs$core$IFn$_invoke$arity$variadic = G__8251__delegate;
    return G__8251
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__8253) {
    var keys = cljs.core.seq(arglist__8253);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__8254) {
    var comparator = cljs.core.first(arglist__8254);
    var keys = cljs.core.rest(arglist__8254);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__8255_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__8255_SHARP_);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__8255_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__8262, seen__$1) {
        while(true) {
          var vec__8263 = p__8262;
          var f = cljs.core.nth.call(null, vec__8263, 0, null);
          var xs__$1 = vec__8263;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__4092__auto__) {
            var s = temp__4092__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__8264 = cljs.core.rest.call(null, s);
              var G__8265 = seen__$1;
              p__8262 = G__8264;
              seen__$1 = G__8265;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__8266 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__8267 = cljs.core.next.call(null, s__$1);
      ret = G__8266;
      s__$1 = G__8267;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(function() {
    var G__8269 = x;
    if(G__8269) {
      if(function() {
        var or__3943__auto__ = G__8269.cljs$lang$protocol_mask$partition1$ & 4096;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__8269.cljs$core$INamed$
        }
      }()) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._name.call(null, x)
  }else {
    if(typeof x === "string") {
      return x
    }else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(function() {
    var G__8271 = x;
    if(G__8271) {
      if(function() {
        var or__3943__auto__ = G__8271.cljs$lang$protocol_mask$partition1$ & 4096;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__8271.cljs$core$INamed$
        }
      }()) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._namespace.call(null, x)
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(function() {
      var and__3941__auto__ = ks;
      if(and__3941__auto__) {
        return vs
      }else {
        return and__3941__auto__
      }
    }()) {
      var G__8272 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__8273 = cljs.core.next.call(null, ks);
      var G__8274 = cljs.core.next.call(null, vs);
      map = G__8272;
      ks = G__8273;
      vs = G__8274;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, map)
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__8277__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__8275_SHARP_, p2__8276_SHARP_) {
        return max_key.call(null, k, p1__8275_SHARP_, p2__8276_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__8277 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__8277__delegate.call(this, k, x, y, more)
    };
    G__8277.cljs$lang$maxFixedArity = 3;
    G__8277.cljs$lang$applyTo = function(arglist__8278) {
      var k = cljs.core.first(arglist__8278);
      arglist__8278 = cljs.core.next(arglist__8278);
      var x = cljs.core.first(arglist__8278);
      arglist__8278 = cljs.core.next(arglist__8278);
      var y = cljs.core.first(arglist__8278);
      var more = cljs.core.rest(arglist__8278);
      return G__8277__delegate(k, x, y, more)
    };
    G__8277.cljs$core$IFn$_invoke$arity$variadic = G__8277__delegate;
    return G__8277
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__8281__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__8279_SHARP_, p2__8280_SHARP_) {
        return min_key.call(null, k, p1__8279_SHARP_, p2__8280_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__8281 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__8281__delegate.call(this, k, x, y, more)
    };
    G__8281.cljs$lang$maxFixedArity = 3;
    G__8281.cljs$lang$applyTo = function(arglist__8282) {
      var k = cljs.core.first(arglist__8282);
      arglist__8282 = cljs.core.next(arglist__8282);
      var x = cljs.core.first(arglist__8282);
      arglist__8282 = cljs.core.next(arglist__8282);
      var y = cljs.core.first(arglist__8282);
      var more = cljs.core.rest(arglist__8282);
      return G__8281__delegate(k, x, y, more)
    };
    G__8281.cljs$core$IFn$_invoke$arity$variadic = G__8281__delegate;
    return G__8281
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, null, cljs.core._GT__EQ_, null], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__8285 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__8285, 0, null);
        var s = vec__8285;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__8286 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__8286, 0, null);
      var s = vec__8286;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, null, cljs.core._LT__EQ_, null], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__8289 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__8289, 0, null);
        var s = vec__8289;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__8290 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__8290, 0, null);
      var s = vec__8290;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq
}();
goog.provide("cljs.core.Range");
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var h__3290__auto__ = self__.__hash;
  if(!(h__3290__auto__ == null)) {
    return h__3290__auto__
  }else {
    var h__3290__auto____$1 = cljs.core.hash_coll.call(null, rng);
    self__.__hash = h__3290__auto____$1;
    return h__3290__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, rng)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  if(cljs.core.not.call(null, rng.cljs$core$ISeqable$_seq$arity$1(rng))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  if(!(rng.cljs$core$ISeqable$_seq$arity$1(rng) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, rng, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(function() {
      var and__3941__auto__ = self__.start > self__.end;
      if(and__3941__auto__) {
        return self__.step === 0
      }else {
        return and__3941__auto__
      }
    }()) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(function() {
      var and__3941__auto__ = self__.start > self__.end;
      if(and__3941__auto__) {
        return self__.step === 0
      }else {
        return and__3941__auto__
      }
    }()) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash)
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], true)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__8291_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__8291_SHARP_))
        }
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core.list.call(null, f.call(null))
      }
    }, null, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__8302 = null;
      var G__8302__0 = function() {
        return cljs.core.vector.call(null, f.call(null))
      };
      var G__8302__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x))
      };
      var G__8302__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y))
      };
      var G__8302__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z))
      };
      var G__8302__4 = function() {
        var G__8303__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args))
        };
        var G__8303 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8303__delegate.call(this, x, y, z, args)
        };
        G__8303.cljs$lang$maxFixedArity = 3;
        G__8303.cljs$lang$applyTo = function(arglist__8304) {
          var x = cljs.core.first(arglist__8304);
          arglist__8304 = cljs.core.next(arglist__8304);
          var y = cljs.core.first(arglist__8304);
          arglist__8304 = cljs.core.next(arglist__8304);
          var z = cljs.core.first(arglist__8304);
          var args = cljs.core.rest(arglist__8304);
          return G__8303__delegate(x, y, z, args)
        };
        G__8303.cljs$core$IFn$_invoke$arity$variadic = G__8303__delegate;
        return G__8303
      }();
      G__8302 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8302__0.call(this);
          case 1:
            return G__8302__1.call(this, x);
          case 2:
            return G__8302__2.call(this, x, y);
          case 3:
            return G__8302__3.call(this, x, y, z);
          default:
            return G__8302__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8302.cljs$lang$maxFixedArity = 3;
      G__8302.cljs$lang$applyTo = G__8302__4.cljs$lang$applyTo;
      return G__8302
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__8305 = null;
      var G__8305__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null))
      };
      var G__8305__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x))
      };
      var G__8305__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y))
      };
      var G__8305__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z))
      };
      var G__8305__4 = function() {
        var G__8306__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__8306 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8306__delegate.call(this, x, y, z, args)
        };
        G__8306.cljs$lang$maxFixedArity = 3;
        G__8306.cljs$lang$applyTo = function(arglist__8307) {
          var x = cljs.core.first(arglist__8307);
          arglist__8307 = cljs.core.next(arglist__8307);
          var y = cljs.core.first(arglist__8307);
          arglist__8307 = cljs.core.next(arglist__8307);
          var z = cljs.core.first(arglist__8307);
          var args = cljs.core.rest(arglist__8307);
          return G__8306__delegate(x, y, z, args)
        };
        G__8306.cljs$core$IFn$_invoke$arity$variadic = G__8306__delegate;
        return G__8306
      }();
      G__8305 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8305__0.call(this);
          case 1:
            return G__8305__1.call(this, x);
          case 2:
            return G__8305__2.call(this, x, y);
          case 3:
            return G__8305__3.call(this, x, y, z);
          default:
            return G__8305__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8305.cljs$lang$maxFixedArity = 3;
      G__8305.cljs$lang$applyTo = G__8305__4.cljs$lang$applyTo;
      return G__8305
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__8308 = null;
      var G__8308__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null), h.call(null))
      };
      var G__8308__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x), h.call(null, x))
      };
      var G__8308__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y), h.call(null, x, y))
      };
      var G__8308__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z))
      };
      var G__8308__4 = function() {
        var G__8309__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args))
        };
        var G__8309 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__8309__delegate.call(this, x, y, z, args)
        };
        G__8309.cljs$lang$maxFixedArity = 3;
        G__8309.cljs$lang$applyTo = function(arglist__8310) {
          var x = cljs.core.first(arglist__8310);
          arglist__8310 = cljs.core.next(arglist__8310);
          var y = cljs.core.first(arglist__8310);
          arglist__8310 = cljs.core.next(arglist__8310);
          var z = cljs.core.first(arglist__8310);
          var args = cljs.core.rest(arglist__8310);
          return G__8309__delegate(x, y, z, args)
        };
        G__8309.cljs$core$IFn$_invoke$arity$variadic = G__8309__delegate;
        return G__8309
      }();
      G__8308 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8308__0.call(this);
          case 1:
            return G__8308__1.call(this, x);
          case 2:
            return G__8308__2.call(this, x, y);
          case 3:
            return G__8308__3.call(this, x, y, z);
          default:
            return G__8308__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8308.cljs$lang$maxFixedArity = 3;
      G__8308.cljs$lang$applyTo = G__8308__4.cljs$lang$applyTo;
      return G__8308
    }()
  };
  var juxt__4 = function() {
    var G__8311__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__8312 = null;
        var G__8312__0 = function() {
          return cljs.core.reduce.call(null, function(p1__8292_SHARP_, p2__8293_SHARP_) {
            return cljs.core.conj.call(null, p1__8292_SHARP_, p2__8293_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__8312__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__8294_SHARP_, p2__8295_SHARP_) {
            return cljs.core.conj.call(null, p1__8294_SHARP_, p2__8295_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__8312__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__8296_SHARP_, p2__8297_SHARP_) {
            return cljs.core.conj.call(null, p1__8296_SHARP_, p2__8297_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__8312__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__8298_SHARP_, p2__8299_SHARP_) {
            return cljs.core.conj.call(null, p1__8298_SHARP_, p2__8299_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__8312__4 = function() {
          var G__8313__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__8300_SHARP_, p2__8301_SHARP_) {
              return cljs.core.conj.call(null, p1__8300_SHARP_, cljs.core.apply.call(null, p2__8301_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__8313 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__8313__delegate.call(this, x, y, z, args)
          };
          G__8313.cljs$lang$maxFixedArity = 3;
          G__8313.cljs$lang$applyTo = function(arglist__8314) {
            var x = cljs.core.first(arglist__8314);
            arglist__8314 = cljs.core.next(arglist__8314);
            var y = cljs.core.first(arglist__8314);
            arglist__8314 = cljs.core.next(arglist__8314);
            var z = cljs.core.first(arglist__8314);
            var args = cljs.core.rest(arglist__8314);
            return G__8313__delegate(x, y, z, args)
          };
          G__8313.cljs$core$IFn$_invoke$arity$variadic = G__8313__delegate;
          return G__8313
        }();
        G__8312 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__8312__0.call(this);
            case 1:
              return G__8312__1.call(this, x);
            case 2:
              return G__8312__2.call(this, x, y);
            case 3:
              return G__8312__3.call(this, x, y, z);
            default:
              return G__8312__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8312.cljs$lang$maxFixedArity = 3;
        G__8312.cljs$lang$applyTo = G__8312__4.cljs$lang$applyTo;
        return G__8312
      }()
    };
    var G__8311 = function(f, g, h, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__8311__delegate.call(this, f, g, h, fs)
    };
    G__8311.cljs$lang$maxFixedArity = 3;
    G__8311.cljs$lang$applyTo = function(arglist__8315) {
      var f = cljs.core.first(arglist__8315);
      arglist__8315 = cljs.core.next(arglist__8315);
      var g = cljs.core.first(arglist__8315);
      arglist__8315 = cljs.core.next(arglist__8315);
      var h = cljs.core.first(arglist__8315);
      var fs = cljs.core.rest(arglist__8315);
      return G__8311__delegate(f, g, h, fs)
    };
    G__8311.cljs$core$IFn$_invoke$arity$variadic = G__8311__delegate;
    return G__8311
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__8316 = cljs.core.next.call(null, coll);
        coll = G__8316;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = cljs.core.seq.call(null, coll);
        if(and__3941__auto__) {
          return n > 0
        }else {
          return and__3941__auto__
        }
      }())) {
        var G__8317 = n - 1;
        var G__8318 = cljs.core.next.call(null, coll);
        n = G__8317;
        coll = G__8318;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, re_seq.call(null, re, post_match))
    }, null, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__8320 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__8320, 0, null);
  var flags = cljs.core.nth.call(null, vec__8320, 1, null);
  var pattern = cljs.core.nth.call(null, vec__8320, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var seq__8325_8329 = cljs.core.seq.call(null, cljs.core.next.call(null, coll));
  var chunk__8326_8330 = null;
  var count__8327_8331 = 0;
  var i__8328_8332 = 0;
  while(true) {
    if(i__8328_8332 < count__8327_8331) {
      var o_8333 = cljs.core._nth.call(null, chunk__8326_8330, i__8328_8332);
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, o_8333, writer, opts);
      var G__8334 = seq__8325_8329;
      var G__8335 = chunk__8326_8330;
      var G__8336 = count__8327_8331;
      var G__8337 = i__8328_8332 + 1;
      seq__8325_8329 = G__8334;
      chunk__8326_8330 = G__8335;
      count__8327_8331 = G__8336;
      i__8328_8332 = G__8337;
      continue
    }else {
      var temp__4092__auto___8338 = cljs.core.seq.call(null, seq__8325_8329);
      if(temp__4092__auto___8338) {
        var seq__8325_8339__$1 = temp__4092__auto___8338;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__8325_8339__$1)) {
          var c__3600__auto___8340 = cljs.core.chunk_first.call(null, seq__8325_8339__$1);
          var G__8341 = cljs.core.chunk_rest.call(null, seq__8325_8339__$1);
          var G__8342 = c__3600__auto___8340;
          var G__8343 = cljs.core.count.call(null, c__3600__auto___8340);
          var G__8344 = 0;
          seq__8325_8329 = G__8341;
          chunk__8326_8330 = G__8342;
          count__8327_8331 = G__8343;
          i__8328_8332 = G__8344;
          continue
        }else {
          var o_8345 = cljs.core.first.call(null, seq__8325_8339__$1);
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, o_8345, writer, opts);
          var G__8346 = cljs.core.next.call(null, seq__8325_8339__$1);
          var G__8347 = null;
          var G__8348 = 0;
          var G__8349 = 0;
          seq__8325_8329 = G__8346;
          chunk__8326_8330 = G__8347;
          count__8327_8331 = G__8348;
          i__8328_8332 = G__8349;
          continue
        }
      }else {
      }
    }
    break
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__8354 = cljs.core.seq.call(null, ss);
    var chunk__8355 = null;
    var count__8356 = 0;
    var i__8357 = 0;
    while(true) {
      if(i__8357 < count__8356) {
        var s = cljs.core._nth.call(null, chunk__8355, i__8357);
        cljs.core._write.call(null, writer, s);
        var G__8358 = seq__8354;
        var G__8359 = chunk__8355;
        var G__8360 = count__8356;
        var G__8361 = i__8357 + 1;
        seq__8354 = G__8358;
        chunk__8355 = G__8359;
        count__8356 = G__8360;
        i__8357 = G__8361;
        continue
      }else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__8354);
        if(temp__4092__auto__) {
          var seq__8354__$1 = temp__4092__auto__;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__8354__$1)) {
            var c__3600__auto__ = cljs.core.chunk_first.call(null, seq__8354__$1);
            var G__8362 = cljs.core.chunk_rest.call(null, seq__8354__$1);
            var G__8363 = c__3600__auto__;
            var G__8364 = cljs.core.count.call(null, c__3600__auto__);
            var G__8365 = 0;
            seq__8354 = G__8362;
            chunk__8355 = G__8363;
            count__8356 = G__8364;
            i__8357 = G__8365;
            continue
          }else {
            var s = cljs.core.first.call(null, seq__8354__$1);
            cljs.core._write.call(null, writer, s);
            var G__8366 = cljs.core.next.call(null, seq__8354__$1);
            var G__8367 = null;
            var G__8368 = 0;
            var G__8369 = 0;
            seq__8354 = G__8366;
            chunk__8355 = G__8367;
            count__8356 = G__8368;
            i__8357 = G__8369;
            continue
          }
        }else {
          return null
        }
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__8370) {
    var writer = cljs.core.first(arglist__8370);
    var ss = cljs.core.rest(arglist__8370);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
cljs.core.char_escapes = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match]
  })), cljs.core.str('"')].join("")
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e")
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if(cljs.core.truth_(function() {
          var and__3941__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if(cljs.core.truth_(and__3941__auto__)) {
            var and__3941__auto____$1 = function() {
              var G__8374 = obj;
              if(G__8374) {
                if(function() {
                  var or__3943__auto__ = G__8374.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3943__auto__) {
                    return or__3943__auto__
                  }else {
                    return G__8374.cljs$core$IMeta$
                  }
                }()) {
                  return true
                }else {
                  if(!G__8374.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__8374)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__8374)
              }
            }();
            if(cljs.core.truth_(and__3941__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3941__auto____$1
            }
          }else {
            return and__3941__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(obj == null) {
          return cljs.core._write.call(null, writer, "nil")
        }else {
          if(obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts)
          }else {
            if(function() {
              var G__8375 = obj;
              if(G__8375) {
                if(function() {
                  var or__3943__auto__ = G__8375.cljs$lang$protocol_mask$partition0$ & 2147483648;
                  if(or__3943__auto__) {
                    return or__3943__auto__
                  }else {
                    return G__8375.cljs$core$IPrintWithWriter$
                  }
                }()) {
                  return true
                }else {
                  return false
                }
              }else {
                return false
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts)
            }else {
              if(function() {
                var or__3943__auto__ = cljs.core.type.call(null, obj) === Boolean;
                if(or__3943__auto__) {
                  return or__3943__auto__
                }else {
                  return typeof obj === "number"
                }
              }()) {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""))
              }else {
                if(obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#\x3cArray [", ", ", "]\x3e", opts, obj)
                }else {
                  if(goog.isString(obj)) {
                    if(cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).call(null, opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj))
                    }else {
                      return cljs.core._write.call(null, writer, obj)
                    }
                  }else {
                    if(cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e")
                    }else {
                      if(obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while(true) {
                            if(cljs.core.count.call(null, ns) < len) {
                              var G__8377 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__8377;
                              continue
                            }else {
                              return ns
                            }
                            break
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"')
                      }else {
                        if(cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj))) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
                        }else {
                          if(function() {
                            var G__8376 = obj;
                            if(G__8376) {
                              if(function() {
                                var or__3943__auto__ = G__8376.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if(or__3943__auto__) {
                                  return or__3943__auto__
                                }else {
                                  return G__8376.cljs$core$IPrintWithWriter$
                                }
                              }()) {
                                return true
                              }else {
                                if(!G__8376.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__8376)
                                }else {
                                  return false
                                }
                              }
                            }else {
                              return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__8376)
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts)
                          }else {
                            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e")
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__8382 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__8383 = null;
  var count__8384 = 0;
  var i__8385 = 0;
  while(true) {
    if(i__8385 < count__8384) {
      var obj = cljs.core._nth.call(null, chunk__8383, i__8385);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__8386 = seq__8382;
      var G__8387 = chunk__8383;
      var G__8388 = count__8384;
      var G__8389 = i__8385 + 1;
      seq__8382 = G__8386;
      chunk__8383 = G__8387;
      count__8384 = G__8388;
      i__8385 = G__8389;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__8382);
      if(temp__4092__auto__) {
        var seq__8382__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__8382__$1)) {
          var c__3600__auto__ = cljs.core.chunk_first.call(null, seq__8382__$1);
          var G__8390 = cljs.core.chunk_rest.call(null, seq__8382__$1);
          var G__8391 = c__3600__auto__;
          var G__8392 = cljs.core.count.call(null, c__3600__auto__);
          var G__8393 = 0;
          seq__8382 = G__8390;
          chunk__8383 = G__8391;
          count__8384 = G__8392;
          i__8385 = G__8393;
          continue
        }else {
          var obj = cljs.core.first.call(null, seq__8382__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__8394 = cljs.core.next.call(null, seq__8382__$1);
          var G__8395 = null;
          var G__8396 = 0;
          var G__8397 = 0;
          seq__8382 = G__8394;
          chunk__8383 = G__8395;
          count__8384 = G__8396;
          i__8385 = G__8397;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__8398) {
    var objs = cljs.core.seq(arglist__8398);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__8399) {
    var objs = cljs.core.seq(arglist__8399);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__8400) {
    var objs = cljs.core.seq(arglist__8400);
    return pr__delegate(objs)
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__8401) {
    var objs = cljs.core.seq(arglist__8401);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__8402) {
    var objs = cljs.core.seq(arglist__8402);
    return print_str__delegate(objs)
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var println = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__8403) {
    var objs = cljs.core.seq(arglist__8403);
    return println__delegate(objs)
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__8404) {
    var objs = cljs.core.seq(arglist__8404);
    return println_str__delegate(objs)
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var prn = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__8405) {
    var objs = cljs.core.seq(arglist__8405);
    return prn__delegate(objs)
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  return cljs.core.compare_indexed.call(null, x, y)
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  return cljs.core.compare_indexed.call(null, x, y)
};
goog.provide("cljs.core.Atom");
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var seq__8406 = cljs.core.seq.call(null, self__.watches);
  var chunk__8407 = null;
  var count__8408 = 0;
  var i__8409 = 0;
  while(true) {
    if(i__8409 < count__8408) {
      var vec__8410 = cljs.core._nth.call(null, chunk__8407, i__8409);
      var key = cljs.core.nth.call(null, vec__8410, 0, null);
      var f = cljs.core.nth.call(null, vec__8410, 1, null);
      f.call(null, key, this$, oldval, newval);
      var G__8412 = seq__8406;
      var G__8413 = chunk__8407;
      var G__8414 = count__8408;
      var G__8415 = i__8409 + 1;
      seq__8406 = G__8412;
      chunk__8407 = G__8413;
      count__8408 = G__8414;
      i__8409 = G__8415;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__8406);
      if(temp__4092__auto__) {
        var seq__8406__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__8406__$1)) {
          var c__3600__auto__ = cljs.core.chunk_first.call(null, seq__8406__$1);
          var G__8416 = cljs.core.chunk_rest.call(null, seq__8406__$1);
          var G__8417 = c__3600__auto__;
          var G__8418 = cljs.core.count.call(null, c__3600__auto__);
          var G__8419 = 0;
          seq__8406 = G__8416;
          chunk__8407 = G__8417;
          count__8408 = G__8418;
          i__8409 = G__8419;
          continue
        }else {
          var vec__8411 = cljs.core.first.call(null, seq__8406__$1);
          var key = cljs.core.nth.call(null, vec__8411, 0, null);
          var f = cljs.core.nth.call(null, vec__8411, 1, null);
          f.call(null, key, this$, oldval, newval);
          var G__8420 = cljs.core.next.call(null, seq__8406__$1);
          var G__8421 = null;
          var G__8422 = 0;
          var G__8423 = 0;
          seq__8406 = G__8420;
          chunk__8407 = G__8421;
          count__8408 = G__8422;
          i__8409 = G__8423;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  return this$.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  return this$.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return o === other
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches)
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__8427__delegate = function(x, p__8424) {
      var map__8426 = p__8424;
      var map__8426__$1 = cljs.core.seq_QMARK_.call(null, map__8426) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8426) : map__8426;
      var validator = cljs.core.get.call(null, map__8426__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__8426__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__8427 = function(x, var_args) {
      var p__8424 = null;
      if(arguments.length > 1) {
        p__8424 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__8427__delegate.call(this, x, p__8424)
    };
    G__8427.cljs$lang$maxFixedArity = 1;
    G__8427.cljs$lang$applyTo = function(arglist__8428) {
      var x = cljs.core.first(arglist__8428);
      var p__8424 = cljs.core.rest(arglist__8428);
      return G__8427__delegate(x, p__8424)
    };
    G__8427.cljs$core$IFn$_invoke$arity$variadic = G__8427__delegate;
    return G__8427
  }();
  atom = function(x, var_args) {
    var p__8424 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__4092__auto___8429 = a.validator;
  if(cljs.core.truth_(temp__4092__auto___8429)) {
    var validate_8430 = temp__4092__auto___8429;
    if(cljs.core.truth_(validate_8430.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }else {
  }
  var old_value_8431 = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value_8431, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__8432__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__8432 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__8432__delegate.call(this, a, f, x, y, z, more)
    };
    G__8432.cljs$lang$maxFixedArity = 5;
    G__8432.cljs$lang$applyTo = function(arglist__8433) {
      var a = cljs.core.first(arglist__8433);
      arglist__8433 = cljs.core.next(arglist__8433);
      var f = cljs.core.first(arglist__8433);
      arglist__8433 = cljs.core.next(arglist__8433);
      var x = cljs.core.first(arglist__8433);
      arglist__8433 = cljs.core.next(arglist__8433);
      var y = cljs.core.first(arglist__8433);
      arglist__8433 = cljs.core.next(arglist__8433);
      var z = cljs.core.first(arglist__8433);
      var more = cljs.core.rest(arglist__8433);
      return G__8432__delegate(a, f, x, y, z, more)
    };
    G__8432.cljs$core$IFn$_invoke$arity$variadic = G__8432__delegate;
    return G__8432
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__8434) {
    var iref = cljs.core.first(arglist__8434);
    arglist__8434 = cljs.core.next(arglist__8434);
    var f = cljs.core.first(arglist__8434);
    var args = cljs.core.rest(arglist__8434);
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
goog.provide("cljs.core.Delay");
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).call(null, cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).call(null, cljs.core.swap_BANG_.call(null, self__.state, function(p__8435) {
    var map__8436 = p__8435;
    var map__8436__$1 = cljs.core.seq_QMARK_.call(null, map__8436) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8436) : map__8436;
    var curr_state = map__8436__$1;
    var done = cljs.core.get.call(null, map__8436__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], true)
    }
  }))
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f)
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.IEncodeJS = {};
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x)
  }else {
    var x__3469__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._clj__GT_js["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x)
  }else {
    var x__3469__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._key__GT_js[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._key__GT_js["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if(function() {
    var G__8438 = k;
    if(G__8438) {
      if(cljs.core.truth_(function() {
        var or__3943__auto__ = null;
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return G__8438.cljs$core$IEncodeJS$
        }
      }())) {
        return true
      }else {
        if(!G__8438.cljs$lang$protocol_mask$partition$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IEncodeJS, G__8438)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IEncodeJS, G__8438)
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k)
  }else {
    if(function() {
      var or__3943__auto__ = typeof k === "string";
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = typeof k === "number";
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          var or__3943__auto____$2 = k instanceof cljs.core.Keyword;
          if(or__3943__auto____$2) {
            return or__3943__auto____$2
          }else {
            return k instanceof cljs.core.Symbol
          }
        }
      }
    }()) {
      return cljs.core.clj__GT_js.call(null, k)
    }else {
      return cljs.core.pr_str.call(null, k)
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if(x == null) {
    return null
  }else {
    if(function() {
      var G__8446 = x;
      if(G__8446) {
        if(cljs.core.truth_(function() {
          var or__3943__auto__ = null;
          if(cljs.core.truth_(or__3943__auto__)) {
            return or__3943__auto__
          }else {
            return G__8446.cljs$core$IEncodeJS$
          }
        }())) {
          return true
        }else {
          if(!G__8446.cljs$lang$protocol_mask$partition$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IEncodeJS, G__8446)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IEncodeJS, G__8446)
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x)
    }else {
      if(x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x)
      }else {
        if(x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("")
        }else {
          if(cljs.core.map_QMARK_.call(null, x)) {
            var m = {};
            var seq__8447_8453 = cljs.core.seq.call(null, x);
            var chunk__8448_8454 = null;
            var count__8449_8455 = 0;
            var i__8450_8456 = 0;
            while(true) {
              if(i__8450_8456 < count__8449_8455) {
                var vec__8451_8457 = cljs.core._nth.call(null, chunk__8448_8454, i__8450_8456);
                var k_8458 = cljs.core.nth.call(null, vec__8451_8457, 0, null);
                var v_8459 = cljs.core.nth.call(null, vec__8451_8457, 1, null);
                m[cljs.core.key__GT_js.call(null, k_8458)] = clj__GT_js.call(null, v_8459);
                var G__8460 = seq__8447_8453;
                var G__8461 = chunk__8448_8454;
                var G__8462 = count__8449_8455;
                var G__8463 = i__8450_8456 + 1;
                seq__8447_8453 = G__8460;
                chunk__8448_8454 = G__8461;
                count__8449_8455 = G__8462;
                i__8450_8456 = G__8463;
                continue
              }else {
                var temp__4092__auto___8464 = cljs.core.seq.call(null, seq__8447_8453);
                if(temp__4092__auto___8464) {
                  var seq__8447_8465__$1 = temp__4092__auto___8464;
                  if(cljs.core.chunked_seq_QMARK_.call(null, seq__8447_8465__$1)) {
                    var c__3600__auto___8466 = cljs.core.chunk_first.call(null, seq__8447_8465__$1);
                    var G__8467 = cljs.core.chunk_rest.call(null, seq__8447_8465__$1);
                    var G__8468 = c__3600__auto___8466;
                    var G__8469 = cljs.core.count.call(null, c__3600__auto___8466);
                    var G__8470 = 0;
                    seq__8447_8453 = G__8467;
                    chunk__8448_8454 = G__8468;
                    count__8449_8455 = G__8469;
                    i__8450_8456 = G__8470;
                    continue
                  }else {
                    var vec__8452_8471 = cljs.core.first.call(null, seq__8447_8465__$1);
                    var k_8472 = cljs.core.nth.call(null, vec__8452_8471, 0, null);
                    var v_8473 = cljs.core.nth.call(null, vec__8452_8471, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_8472)] = clj__GT_js.call(null, v_8473);
                    var G__8474 = cljs.core.next.call(null, seq__8447_8465__$1);
                    var G__8475 = null;
                    var G__8476 = 0;
                    var G__8477 = 0;
                    seq__8447_8453 = G__8474;
                    chunk__8448_8454 = G__8475;
                    count__8449_8455 = G__8476;
                    i__8450_8456 = G__8477;
                    continue
                  }
                }else {
                }
              }
              break
            }
            return m
          }else {
            if(cljs.core.coll_QMARK_.call(null, x)) {
              return cljs.core.apply.call(null, cljs.core.array, cljs.core.map.call(null, clj__GT_js, x))
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x
              }else {
                return null
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = {};
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if(function() {
    var and__3941__auto__ = x;
    if(and__3941__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options)
  }else {
    var x__3469__auto__ = x == null ? null : x;
    return function() {
      var or__3943__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._js__GT_clj["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options)
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], true))
  };
  var js__GT_clj__2 = function() {
    var G__8498__delegate = function(x, opts) {
      if(function() {
        var G__8488 = x;
        if(G__8488) {
          if(cljs.core.truth_(function() {
            var or__3943__auto__ = null;
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return G__8488.cljs$core$IEncodeClojure$
            }
          }())) {
            return true
          }else {
            if(!G__8488.cljs$lang$protocol_mask$partition$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IEncodeClojure, G__8488)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IEncodeClojure, G__8488)
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts))
      }else {
        if(cljs.core.seq.call(null, opts)) {
          var map__8489 = opts;
          var map__8489__$1 = cljs.core.seq_QMARK_.call(null, map__8489) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8489) : map__8489;
          var keywordize_keys = cljs.core.get.call(null, map__8489__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__8489, map__8489__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if(cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
              }else {
                if(cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
                }else {
                  if(x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
                  }else {
                    if(cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__3569__auto__ = function(map__8489, map__8489__$1, keywordize_keys, keyfn) {
                          return function iter__8494(s__8495) {
                            return new cljs.core.LazySeq(null, function(map__8489, map__8489__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__8495__$1 = s__8495;
                                while(true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__8495__$1);
                                  if(temp__4092__auto__) {
                                    var s__8495__$2 = temp__4092__auto__;
                                    if(cljs.core.chunked_seq_QMARK_.call(null, s__8495__$2)) {
                                      var c__3567__auto__ = cljs.core.chunk_first.call(null, s__8495__$2);
                                      var size__3568__auto__ = cljs.core.count.call(null, c__3567__auto__);
                                      var b__8497 = cljs.core.chunk_buffer.call(null, size__3568__auto__);
                                      if(function() {
                                        var i__8496 = 0;
                                        while(true) {
                                          if(i__8496 < size__3568__auto__) {
                                            var k = cljs.core._nth.call(null, c__3567__auto__, i__8496);
                                            cljs.core.chunk_append.call(null, b__8497, cljs.core.PersistentVector.fromArray([keyfn.call(null, k), thisfn.call(null, x__$1[k])], true));
                                            var G__8499 = i__8496 + 1;
                                            i__8496 = G__8499;
                                            continue
                                          }else {
                                            return true
                                          }
                                          break
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8497), iter__8494.call(null, cljs.core.chunk_rest.call(null, s__8495__$2)))
                                      }else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8497), null)
                                      }
                                    }else {
                                      var k = cljs.core.first.call(null, s__8495__$2);
                                      return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([keyfn.call(null, k), thisfn.call(null, x__$1[k])], true), iter__8494.call(null, cljs.core.rest.call(null, s__8495__$2)))
                                    }
                                  }else {
                                    return null
                                  }
                                  break
                                }
                              }
                            }(map__8489, map__8489__$1, keywordize_keys, keyfn), null, null)
                          }
                        }(map__8489, map__8489__$1, keywordize_keys, keyfn);
                        return iter__3569__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
                      }())
                    }else {
                      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1
                      }else {
                        return null
                      }
                    }
                  }
                }
              }
            }
          }(map__8489, map__8489__$1, keywordize_keys, keyfn);
          return f.call(null, x)
        }else {
          return null
        }
      }
    };
    var G__8498 = function(x, var_args) {
      var opts = null;
      if(arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__8498__delegate.call(this, x, opts)
    };
    G__8498.cljs$lang$maxFixedArity = 1;
    G__8498.cljs$lang$applyTo = function(arglist__8500) {
      var x = cljs.core.first(arglist__8500);
      var opts = cljs.core.rest(arglist__8500);
      return G__8498__delegate(x, opts)
    };
    G__8498.cljs$core$IFn$_invoke$arity$variadic = G__8498__delegate;
    return G__8498
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__8501__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__8501 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__8501__delegate.call(this, args)
    };
    G__8501.cljs$lang$maxFixedArity = 0;
    G__8501.cljs$lang$applyTo = function(arglist__8502) {
      var args = cljs.core.seq(arglist__8502);
      return G__8501__delegate(args)
    };
    G__8501.cljs$core$IFn$_invoke$arity$variadic = G__8501__delegate;
    return G__8501
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__8503 = ret;
        f = G__8503;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__8504__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__8504 = function(f, var_args) {
      var args = null;
      if(arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__8504__delegate.call(this, f, args)
    };
    G__8504.cljs$lang$maxFixedArity = 1;
    G__8504.cljs$lang$applyTo = function(arglist__8505) {
      var f = cljs.core.first(arglist__8505);
      var args = cljs.core.rest(arglist__8505);
      return G__8504__delegate(f, args)
    };
    G__8504.cljs$core$IFn$_invoke$arity$variadic = G__8504__delegate;
    return G__8504
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.PersistentArrayMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], true)
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if(cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null))
  }else {
  }
  return cljs.core._global_hierarchy
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args)
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args)
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__8506) {
    var f = cljs.core.first(arglist__8506);
    var args = cljs.core.rest(arglist__8506);
    return swap_global_hierarchy_BANG___delegate(f, args)
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3943__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      var or__3943__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).call(null, h).call(null, child), parent);
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        var and__3941__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3941__auto__) {
          var and__3941__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3941__auto____$1) {
            var and__3941__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3941__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(function() {
                  var or__3943__auto____$2 = cljs.core.not.call(null, ret);
                  if(or__3943__auto____$2) {
                    return or__3943__auto____$2
                  }else {
                    return i === cljs.core.count.call(null, parent)
                  }
                }()) {
                  return ret
                }else {
                  var G__8507 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__8508 = i + 1;
                  ret = G__8507;
                  i = G__8508;
                  continue
                }
                break
              }
            }else {
              return and__3941__auto____$2
            }
          }else {
            return and__3941__auto____$1
          }
        }else {
          return and__3941__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).call(null, h), tag))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).call(null, h), tag))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).call(null, h), tag))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).call(null, h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).call(null, h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).call(null, h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
          }
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)))
      }
    }(tp, td, ta);
    var or__3943__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).call(null, h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).call(null, h), tag, td, 
      parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).call(null, h), parent, ta, tag, td)], true)
    }();
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).call(null, h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__8509_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__8509_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__8509_SHARP_), cljs.core.second.call(null, p1__8509_SHARP_)))
      }
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__8510_SHARP_, p2__8511_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__8510_SHARP_, p2__8511_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3943__auto__ = cljs.core.truth_(function() {
    var and__3941__auto__ = xprefs;
    if(cljs.core.truth_(and__3941__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3941__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    var or__3943__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__8512 = cljs.core.rest.call(null, ps);
          ps = G__8512;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3943__auto____$1)) {
      return or__3943__auto____$1
    }else {
      var or__3943__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__8513 = cljs.core.rest.call(null, ps);
            ps = G__8513;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3943__auto____$2)) {
        return or__3943__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3943__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__8516) {
    var vec__8517 = p__8516;
    var k = cljs.core.nth.call(null, vec__8517, 0, null);
    var _ = cljs.core.nth.call(null, vec__8517, 1, null);
    var e = vec__8517;
    if(cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3943__auto__ = be == null;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = {};
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._reset[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._reset["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._add_method[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._add_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._remove_method[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._remove_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._prefer_method[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._get_method[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._get_method["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._methods[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._methods["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._prefers[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._prefers["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3941__auto__ = mf;
    if(and__3941__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__3469__auto__ = mf == null ? null : mf;
    return function() {
      var or__3943__auto__ = cljs.core._dispatch[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core._dispatch["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(cljs.core.name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
goog.provide("cljs.core.MultiFn");
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return null
  });
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn
  }else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  return cljs.core.do_dispatch.call(null, mf, self__.dispatch_fn, args)
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
};
cljs.core.MultiFn.prototype.call = function() {
  var G__8518__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__8518 = function(_, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__8518__delegate.call(this, _, args)
  };
  G__8518.cljs$lang$maxFixedArity = 1;
  G__8518.cljs$lang$applyTo = function(arglist__8519) {
    var _ = cljs.core.first(arglist__8519);
    var args = cljs.core.rest(arglist__8519);
    return G__8518__delegate(_, args)
  };
  G__8518.cljs$core$IFn$_invoke$arity$variadic = G__8518__delegate;
  return G__8518
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
goog.provide("cljs.core.UUID");
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var and__3941__auto__ = other instanceof cljs.core.UUID;
  if(and__3941__auto__) {
    return self__.uuid === other.uuid
  }else {
    return and__3941__auto__
  }
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid)
};
goog.provide("cljs.core.ExceptionInfo");
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3413__auto__, writer__3414__auto__, opts__3415__auto__) {
  return cljs.core._write.call(null, writer__3414__auto__, "cljs.core/ExceptionInfo")
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause)
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null)
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause)
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info
}();
cljs.core.ex_data = function ex_data(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.data
  }else {
    return null
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if(ex instanceof Error) {
    return ex.message
  }else {
    return null
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause
  }else {
    return null
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if(cljs.core.truth_(pred.call(null, x, y))) {
      return-1
    }else {
      if(cljs.core.truth_(pred.call(null, y, x))) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray([new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "try*", "try*", -1636962424, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, 
  new cljs.core.Symbol(null, "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, 
  "js*", "js*", -1640426054, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], true), x)
};
goog.provide("multiplay.utils");
goog.require("cljs.core");
multiplay.utils.log = function log(obj) {
  return null
};
multiplay.utils.host = window["location"]["host"];
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"]
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if(!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && !goog.userAgent.detectedWebkit_ && navigator.product == "Gecko"
  }
};
if(!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_()
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || ""
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0
};
if(!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_()
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if(goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion
  }else {
    if(goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/
    }else {
      if(goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/
      }else {
        if(goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/
        }
      }
    }
    if(re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : ""
    }
  }
  if(goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if(docMode > parseFloat(version)) {
      return String(docMode)
    }
  }
  return version
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2)
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0)
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if(!doc || !goog.userAgent.IE) {
    return undefined
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5)
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || []
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length
};
goog.dom.classes.add_ = function(classes, args) {
  for(var i = 0;i < args.length;i++) {
    if(!goog.array.contains(classes, args[i])) {
      classes.push(args[i])
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item)
  })
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for(var i = 0;i < classes.length;i++) {
    if(classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true
    }
  }
  if(removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "))
  }
  return removed
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if(goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove)
  }else {
    if(goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove)
    }
  }
  if(goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd)
  }else {
    if(goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd)
    }
  }
  goog.dom.classes.set(element, classes.join(" "))
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className)
};
goog.dom.classes.enable = function(element, className, enabled) {
  if(enabled) {
    goog.dom.classes.add(element, className)
  }else {
    goog.dom.classes.remove(element, className)
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a)
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a)
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max)
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a)
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6)
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360)
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees))
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees))
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)))
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if(d > 180) {
    d = d - 360
  }else {
    if(d <= -180) {
      d = 360 + d
    }
  }
  return d
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1]
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for(var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0
  }
  for(var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0
  }
  for(i = 1;i <= length1;i++) {
    for(j = 1;j <= length1;j++) {
      if(compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1
      }else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1])
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while(i > 0 && j > 0) {
    if(compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--
    }else {
      if(arr[i - 1][j] > arr[i][j - 1]) {
        i--
      }else {
        j--
      }
    }
  }
  return result
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value
  }, 0))
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if(sampleSize < 2) {
    return 0
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2)
  })) / (sampleSize - 1);
  return Math.sqrt(variance)
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num)
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15))
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15))
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y)
};
if(goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return"(" + this.x + ", " + this.y + ")"
  }
}
goog.math.Coordinate.equals = function(a, b) {
  if(a == b) {
    return true
  }
  if(!a || !b) {
    return false
  }
  return a.x == b.x && a.y == b.y
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy)
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y)
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y)
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y)
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y)
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if(tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y
  }else {
    this.x += tx;
    if(goog.isNumber(opt_ty)) {
      this.y += opt_ty
    }
  }
  return this
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height
};
goog.math.Size.equals = function(a, b) {
  if(a == b) {
    return true
  }
  if(!a || !b) {
    return false
  }
  return a.width == b.width && a.height == b.height
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height)
};
if(goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return"(" + this.width + " x " + this.height + ")"
  }
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height)
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height)
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area()
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s)
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper)
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el)
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if(goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className)
  }else {
    if(parent.getElementsByClassName) {
      return parent.getElementsByClassName(className)
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if(goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className)
  }else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0]
  }
  return retVal || null
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector)
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if(goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query)
  }
  if(opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if(tagName) {
      var arrayLike = {};
      var len = 0;
      for(var i = 0, el;el = els[i];i++) {
        if(tagName == el.nodeName) {
          arrayLike[len++] = el
        }
      }
      arrayLike.length = len;
      return arrayLike
    }else {
      return els
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if(opt_class) {
    var arrayLike = {};
    var len = 0;
    for(var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if(typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el
      }
    }
    arrayLike.length = len;
    return arrayLike
  }else {
    return els
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if(key == "style") {
      element.style.cssText = val
    }else {
      if(key == "class") {
        element.className = val
      }else {
        if(key == "for") {
          element.htmlFor = val
        }else {
          if(key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val)
          }else {
            if(goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val)
            }else {
              element[key] = val
            }
          }
        }
      }
    }
  })
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window)
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight)
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window)
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if(doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if(goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight
    }else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if(docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight
      }
      if(sh > vh) {
        height = sh > oh ? sh : oh
      }else {
        height = sh < oh ? sh : oh
      }
    }
  }
  return height
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll()
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document)
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop)
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document)
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments)
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if(!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if(attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"')
    }
    if(attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("")
  }
  var element = doc.createElement(tagName);
  if(attributes) {
    if(goog.isString(attributes)) {
      element.className = attributes
    }else {
      if(goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes))
      }else {
        goog.dom.setProperties(element, attributes)
      }
    }
  }
  if(args.length > 2) {
    goog.dom.append_(doc, element, args, 2)
  }
  return element
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if(child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child)
    }
  }
  for(var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if(goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler)
    }else {
      childHandler(arg)
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name)
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content))
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp)
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for(var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e")
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for(i = 0;i < rows;i++) {
    totalHtml.push(rowHtml)
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild))
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString)
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if(goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild)
  }else {
    tempDiv.innerHTML = htmlString
  }
  if(tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild))
  }else {
    var fragment = doc.createDocumentFragment();
    while(tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild)
    }
    return fragment
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat"
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document)
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if(goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE
  }
  return doc.compatMode == "CSS1Compat"
};
goog.dom.canHaveChildren = function(node) {
  if(node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false
  }
  return true
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child)
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1)
};
goog.dom.removeChildren = function(node) {
  var child;
  while(child = node.firstChild) {
    node.removeChild(child)
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if(refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode)
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if(refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling)
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null)
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if(parent) {
    parent.replaceChild(newNode, oldNode)
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if(parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if(element.removeNode) {
      return(element.removeNode(false))
    }else {
      while(child = element.firstChild) {
        parent.insertBefore(child, element)
      }
      return(goog.dom.removeNode(element))
    }
  }
};
goog.dom.getChildren = function(element) {
  if(goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT
  })
};
goog.dom.getFirstElementChild = function(node) {
  if(node.firstElementChild != undefined) {
    return(node).firstElementChild
  }
  return goog.dom.getNextElementNode_(node.firstChild, true)
};
goog.dom.getLastElementChild = function(node) {
  if(node.lastElementChild != undefined) {
    return(node).lastElementChild
  }
  return goog.dom.getNextElementNode_(node.lastChild, false)
};
goog.dom.getNextElementSibling = function(node) {
  if(node.nextElementSibling != undefined) {
    return(node).nextElementSibling
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true)
};
goog.dom.getPreviousElementSibling = function(node) {
  if(node.previousElementSibling != undefined) {
    return(node).previousElementSibling
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false)
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while(node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling
  }
  return(node)
};
goog.dom.getNextNode = function(node) {
  if(!node) {
    return null
  }
  if(node.firstChild) {
    return node.firstChild
  }
  while(node && !node.nextSibling) {
    node = node.parentNode
  }
  return node ? node.nextSibling : null
};
goog.dom.getPreviousNode = function(node) {
  if(!node) {
    return null
  }
  if(!node.previousSibling) {
    return node.parentNode
  }
  node = node.previousSibling;
  while(node && node.lastChild) {
    node = node.lastChild
  }
  return node
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj
};
goog.dom.getParentElement = function(element) {
  if(goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null
};
goog.dom.contains = function(parent, descendant) {
  if(parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant)
  }
  if(typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16)
  }
  while(descendant && parent != descendant) {
    descendant = descendant.parentNode
  }
  return descendant == parent
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if(node1 == node2) {
    return 0
  }
  if(node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1
  }
  if(goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if(node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1
    }
    if(node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1
    }
  }
  if("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if(isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex
    }else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if(parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2)
      }
      if(!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2)
      }
      if(!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1)
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex)
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2)
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if(parent == node) {
    return-1
  }
  var sibling = node;
  while(sibling.parentNode != parent) {
    sibling = sibling.parentNode
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode)
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while(s = s.previousSibling) {
    if(s == node1) {
      return-1
    }
  }
  return 1
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if(!count) {
    return null
  }else {
    if(count == 1) {
      return arguments[0]
    }
  }
  var paths = [];
  var minLength = Infinity;
  for(i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while(node) {
      ancestors.unshift(node);
      node = node.parentNode
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length)
  }
  var output = null;
  for(i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for(var j = 1;j < count;j++) {
      if(first != paths[j][i]) {
        return output
      }
    }
    output = first
  }
  return output
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document)
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame))
};
goog.dom.setTextContent = function(element, text) {
  if("textContent" in element) {
    element.textContent = text
  }else {
    if(element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while(element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild)
      }
      element.firstChild.data = text
    }else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)))
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if("outerHTML" in element) {
    return element.outerHTML
  }else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if(root != null) {
    var child = root.firstChild;
    while(child) {
      if(p(child)) {
        rv.push(child);
        if(findOne) {
          return true
        }
      }
      if(goog.dom.findNodes_(child, p, rv, findOne)) {
        return true
      }
      child = child.nextSibling
    }
  }
  return false
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if(attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && index >= 0 && index < 32768
  }
  return false
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if(enable) {
    element.tabIndex = 0
  }else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex")
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if(goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText)
  }else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("")
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if(!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ")
  }
  if(textContent != " ") {
    textContent = textContent.replace(/^\s*/, "")
  }
  return textContent
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("")
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if(node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  }else {
    if(node.nodeType == goog.dom.NodeType.TEXT) {
      if(normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""))
      }else {
        buf.push(node.nodeValue)
      }
    }else {
      if(node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName])
      }else {
        var child = node.firstChild;
        while(child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while(node && node != root) {
    var cur = node;
    while(cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur))
    }
    node = node.parentNode
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while(stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if(cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    }else {
      if(cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length
      }else {
        if(cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length
        }else {
          for(var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i])
          }
        }
      }
    }
  }
  if(goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur
  }
  return cur
};
goog.dom.isNodeList = function(val) {
  if(val && typeof val.length == "number") {
    if(goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string"
    }else {
      if(goog.isFunction(val)) {
        return typeof val.item == "function"
      }
    }
  }
  return false
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if(!opt_tag && !opt_class) {
    return null
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class))
  }, true))
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className)
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if(!opt_includeNode) {
    element = element.parentNode
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while(element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if(matcher(element)) {
      return element
    }
    element = element.parentNode;
    steps++
  }
  return null
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement
  }catch(e) {
  }
  return null
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if(goog.isString(element)) {
    return this.document_.getElementById(element)
  }else {
    return element
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el)
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc)
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc)
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow())
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow())
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments)
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name)
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content))
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp)
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString)
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat"
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_)
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_)
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_)
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_)
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_)
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("tween");
"use strict";
void 0 === Date.now && (Date.now = function() {
  return(new Date).valueOf()
});
var TWEEN = TWEEN || function() {
  var a = [];
  return{REVISION:"11dev", getAll:function() {
    return a
  }, removeAll:function() {
    a = []
  }, add:function(c) {
    a.push(c)
  }, remove:function(c) {
    c = a.indexOf(c);
    -1 !== c && a.splice(c, 1)
  }, update:function(c) {
    if(0 === a.length) {
      return!1
    }
    for(var b = 0, d = a.length, c = void 0 !== c ? c : "undefined" !== typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? window.performance.now() : Date.now();b < d;) {
      a[b].update(c) ? b++ : (a.splice(b, 1), d--)
    }
    return!0
  }}
}();
TWEEN.Tween = function(a) {
  var c = {}, b = {}, d = {}, e = 1E3, g = 0, h = !1, n = 0, l = null, v = TWEEN.Easing.Linear.None, w = TWEEN.Interpolation.Linear, p = [], q = null, r = !1, s = null, t = null, j;
  for(j in a) {
    c[j] = parseFloat(a[j], 10)
  }
  this.to = function(a, c) {
    void 0 !== c && (e = c);
    b = a;
    return this
  };
  this.start = function(e) {
    TWEEN.add(this);
    r = !1;
    l = void 0 !== e ? e : "undefined" !== typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? window.performance.now() : Date.now();
    l += n;
    for(var f in b) {
      if(b[f] instanceof Array) {
        if(0 === b[f].length) {
          continue
        }
        b[f] = [a[f]].concat(b[f])
      }
      c[f] = a[f];
      !1 === c[f] instanceof Array && (c[f] *= 1);
      d[f] = c[f] || 0
    }
    return this
  };
  this.stop = function() {
    TWEEN.remove(this);
    return this
  };
  this.delay = function(a) {
    n = a;
    return this
  };
  this.repeat = function(a) {
    g = a;
    return this
  };
  this.yoyo = function(a) {
    h = a;
    return this
  };
  this.easing = function(a) {
    v = a;
    return this
  };
  this.interpolation = function(a) {
    w = a;
    return this
  };
  this.chain = function() {
    p = arguments;
    return this
  };
  this.onStart = function(a) {
    q = a;
    return this
  };
  this.onUpdate = function(a) {
    s = a;
    return this
  };
  this.onComplete = function(a) {
    t = a;
    return this
  };
  this.update = function(m) {
    var f;
    if(m < l) {
      return!0
    }
    !1 === r && (null !== q && q.call(a), r = !0);
    var i = (m - l) / e, i = 1 < i ? 1 : i, j = v(i);
    for(f in b) {
      var u = c[f] || 0, k = b[f];
      k instanceof Array ? a[f] = w(k, j) : ("string" === typeof k && (k = u + parseFloat(k, 10)), "number" === typeof k && (a[f] = u + (k - u) * j))
    }
    null !== s && s.call(a, j);
    if(1 == i) {
      if(0 < g) {
        isFinite(g) && g--;
        for(f in d) {
          "string" === typeof b[f] && (d[f] += parseFloat(b[f], 10)), h && (i = d[f], d[f] = b[f], b[f] = i), c[f] = d[f]
        }
        l = m + n
      }else {
        null !== t && t.call(a);
        f = 0;
        for(i = p.length;f < i;f++) {
          p[f].start(m)
        }
        return!1
      }
    }
    return!0
  }
};
TWEEN.Easing = {Linear:{None:function(a) {
  return a
}}, Quadratic:{In:function(a) {
  return a * a
}, Out:function(a) {
  return a * (2 - a)
}, InOut:function(a) {
  return 1 > (a *= 2) ? 0.5 * a * a : -0.5 * (--a * (a - 2) - 1)
}}, Cubic:{In:function(a) {
  return a * a * a
}, Out:function(a) {
  return--a * a * a + 1
}, InOut:function(a) {
  return 1 > (a *= 2) ? 0.5 * a * a * a : 0.5 * ((a -= 2) * a * a + 2)
}}, Quartic:{In:function(a) {
  return a * a * a * a
}, Out:function(a) {
  return 1 - --a * a * a * a
}, InOut:function(a) {
  return 1 > (a *= 2) ? 0.5 * a * a * a * a : -0.5 * ((a -= 2) * a * a * a - 2)
}}, Quintic:{In:function(a) {
  return a * a * a * a * a
}, Out:function(a) {
  return--a * a * a * a * a + 1
}, InOut:function(a) {
  return 1 > (a *= 2) ? 0.5 * a * a * a * a * a : 0.5 * ((a -= 2) * a * a * a * a + 2)
}}, Sinusoidal:{In:function(a) {
  return 1 - Math.cos(a * Math.PI / 2)
}, Out:function(a) {
  return Math.sin(a * Math.PI / 2)
}, InOut:function(a) {
  return 0.5 * (1 - Math.cos(Math.PI * a))
}}, Exponential:{In:function(a) {
  return 0 === a ? 0 : Math.pow(1024, a - 1)
}, Out:function(a) {
  return 1 === a ? 1 : 1 - Math.pow(2, -10 * a)
}, InOut:function(a) {
  return 0 === a ? 0 : 1 === a ? 1 : 1 > (a *= 2) ? 0.5 * Math.pow(1024, a - 1) : 0.5 * (-Math.pow(2, -10 * (a - 1)) + 2)
}}, Circular:{In:function(a) {
  return 1 - Math.sqrt(1 - a * a)
}, Out:function(a) {
  return Math.sqrt(1 - --a * a)
}, InOut:function(a) {
  return 1 > (a *= 2) ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
}}, Elastic:{In:function(a) {
  var c, b = 0.1;
  if(0 === a) {
    return 0
  }
  if(1 === a) {
    return 1
  }
  !b || 1 > b ? (b = 1, c = 0.1) : c = 0.4 * Math.asin(1 / b) / (2 * Math.PI);
  return-(b * Math.pow(2, 10 * (a -= 1)) * Math.sin((a - c) * 2 * Math.PI / 0.4))
}, Out:function(a) {
  var c, b = 0.1;
  if(0 === a) {
    return 0
  }
  if(1 === a) {
    return 1
  }
  !b || 1 > b ? (b = 1, c = 0.1) : c = 0.4 * Math.asin(1 / b) / (2 * Math.PI);
  return b * Math.pow(2, -10 * a) * Math.sin((a - c) * 2 * Math.PI / 0.4) + 1
}, InOut:function(a) {
  var c, b = 0.1;
  if(0 === a) {
    return 0
  }
  if(1 === a) {
    return 1
  }
  !b || 1 > b ? (b = 1, c = 0.1) : c = 0.4 * Math.asin(1 / b) / (2 * Math.PI);
  return 1 > (a *= 2) ? -0.5 * b * Math.pow(2, 10 * (a -= 1)) * Math.sin((a - c) * 2 * Math.PI / 0.4) : 0.5 * b * Math.pow(2, -10 * (a -= 1)) * Math.sin((a - c) * 2 * Math.PI / 0.4) + 1
}}, Back:{In:function(a) {
  return a * a * (2.70158 * a - 1.70158)
}, Out:function(a) {
  return--a * a * (2.70158 * a + 1.70158) + 1
}, InOut:function(a) {
  return 1 > (a *= 2) ? 0.5 * a * a * (3.5949095 * a - 2.5949095) : 0.5 * ((a -= 2) * a * (3.5949095 * a + 2.5949095) + 2)
}}, Bounce:{In:function(a) {
  return 1 - TWEEN.Easing.Bounce.Out(1 - a)
}, Out:function(a) {
  return a < 1 / 2.75 ? 7.5625 * a * a : a < 2 / 2.75 ? 7.5625 * (a -= 1.5 / 2.75) * a + 0.75 : a < 2.5 / 2.75 ? 7.5625 * (a -= 2.25 / 2.75) * a + 0.9375 : 7.5625 * (a -= 2.625 / 2.75) * a + 0.984375
}, InOut:function(a) {
  return 0.5 > a ? 0.5 * TWEEN.Easing.Bounce.In(2 * a) : 0.5 * TWEEN.Easing.Bounce.Out(2 * a - 1) + 0.5
}}};
TWEEN.Interpolation = {Linear:function(a, c) {
  var b = a.length - 1, d = b * c, e = Math.floor(d), g = TWEEN.Interpolation.Utils.Linear;
  return 0 > c ? g(a[0], a[1], d) : 1 < c ? g(a[b], a[b - 1], b - d) : g(a[e], a[e + 1 > b ? b : e + 1], d - e)
}, Bezier:function(a, c) {
  var b = 0, d = a.length - 1, e = Math.pow, g = TWEEN.Interpolation.Utils.Bernstein, h;
  for(h = 0;h <= d;h++) {
    b += e(1 - c, d - h) * e(c, h) * a[h] * g(d, h)
  }
  return b
}, CatmullRom:function(a, c) {
  var b = a.length - 1, d = b * c, e = Math.floor(d), g = TWEEN.Interpolation.Utils.CatmullRom;
  return a[0] === a[b] ? (0 > c && (e = Math.floor(d = b * (1 + c))), g(a[(e - 1 + b) % b], a[e], a[(e + 1) % b], a[(e + 2) % b], d - e)) : 0 > c ? a[0] - (g(a[0], a[0], a[1], a[1], -d) - a[0]) : 1 < c ? a[b] - (g(a[b], a[b], a[b - 1], a[b - 1], d - b) - a[b]) : g(a[e ? e - 1 : 0], a[e], a[b < e + 1 ? b : e + 1], a[b < e + 2 ? b : e + 2], d - e)
}, Utils:{Linear:function(a, c, b) {
  return(c - a) * b + a
}, Bernstein:function(a, c) {
  var b = TWEEN.Interpolation.Utils.Factorial;
  return b(a) / b(c) / b(a - c)
}, Factorial:function() {
  var a = [1];
  return function(c) {
    var b = 1, d;
    if(a[c]) {
      return a[c]
    }
    for(d = c;1 < d;d--) {
      b *= d
    }
    return a[c] = b
  }
}(), CatmullRom:function(a, c, b, d, e) {
  var a = 0.5 * (b - a), d = 0.5 * (d - c), g = e * e;
  return(2 * c - 2 * b + a + d) * e * g + (-3 * c + 3 * b - 2 * a - d) * g + a * e + c
}}};
goog.provide("multiplay.game.params");
goog.require("cljs.core");
multiplay.game.params.game_height = 500;
multiplay.game.params.game_width = 500;
multiplay.game.params.game_dimension = 20;
multiplay.game.params.ticks_per_sec = 2;
multiplay.game.params.tick_ms = 1E3 / multiplay.game.params.ticks_per_sec;
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = {};
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if(function() {
    var and__3941__auto__ = port;
    if(and__3941__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler)
  }else {
    var x__3469__auto__ = port == null ? null : port;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler)
  }
};
cljs.core.async.impl.protocols.WritePort = {};
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if(function() {
    var and__3941__auto__ = port;
    if(and__3941__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler)
  }else {
    var x__3469__auto__ = port == null ? null : port;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler)
  }
};
cljs.core.async.impl.protocols.Channel = {};
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if(function() {
    var and__3941__auto__ = chan;
    if(and__3941__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan)
  }else {
    var x__3469__auto__ = chan == null ? null : chan;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan)
  }
};
cljs.core.async.impl.protocols.Handler = {};
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if(function() {
    var and__3941__auto__ = h;
    if(and__3941__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h)
  }else {
    var x__3469__auto__ = h == null ? null : h;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h)
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if(function() {
    var and__3941__auto__ = h;
    if(and__3941__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h)
  }else {
    var x__3469__auto__ = h == null ? null : h;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h)
  }
};
cljs.core.async.impl.protocols.Buffer = {};
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if(function() {
    var and__3941__auto__ = b;
    if(and__3941__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b)
  }else {
    var x__3469__auto__ = b == null ? null : b;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b)
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if(function() {
    var and__3941__auto__ = b;
    if(and__3941__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b)
  }else {
    var x__3469__auto__ = b == null ? null : b;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b)
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if(function() {
    var and__3941__auto__ = b;
    if(and__3941__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm)
  }else {
    var x__3469__auto__ = b == null ? null : b;
    return function() {
      var or__3943__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm)
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o]
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx]
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724))
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if(typeof cljs.core.async.impl.ioc_helpers.t10504 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.impl.ioc_helpers.t10504");
    cljs.core.async.impl.ioc_helpers.t10504 = function(f, fn_handler, meta10505) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta10505 = meta10505;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.impl.ioc_helpers.t10504.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t10504.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t10504";
    cljs.core.async.impl.ioc_helpers.t10504.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.ioc-helpers/t10504")
    };
    cljs.core.async.impl.ioc_helpers.t10504.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t10504.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      return true
    };
    cljs.core.async.impl.ioc_helpers.t10504.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      return self__.f
    };
    cljs.core.async.impl.ioc_helpers.t10504.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10506) {
      var self__ = this;
      return self__.meta10505
    };
    cljs.core.async.impl.ioc_helpers.t10504.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10506, meta10505__$1) {
      var self__ = this;
      return new cljs.core.async.impl.ioc_helpers.t10504(self__.f, self__.fn_handler, meta10505__$1)
    };
    cljs.core.async.impl.ioc_helpers.__GT_t10504 = function __GT_t10504(f__$1, fn_handler__$1, meta10505) {
      return new cljs.core.async.impl.ioc_helpers.t10504(f__$1, fn_handler__$1, meta10505)
    }
  }
  return new cljs.core.async.impl.ioc_helpers.t10504(f, fn_handler, null)
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state)
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state)
  }catch(e10508) {
    if(e10508 instanceof Object) {
      var ex = e10508;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e10508;
      }else {
        return null
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_10511_10513 = state;
    statearr_10511_10513[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_10511_10513[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
  }));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_10512_10514 = state;
    statearr_10512_10514[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_10512_10514[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
  }else {
    return null
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_10517_10519 = state;
    statearr_10517_10519[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_10517_10519[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
  }));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_10518_10520 = state;
    statearr_10518_10520[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_10518_10520[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
  }else {
    return null
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__10521) {
    var map__10526 = p__10521;
    var map__10526__$1 = cljs.core.seq_QMARK_.call(null, map__10526) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10526) : map__10526;
    var opts = map__10526__$1;
    var statearr_10527_10530 = state;
    statearr_10527_10530[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_10528_10531 = state;
      statearr_10528_10531[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
    }, ports, opts);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_10529_10532 = state;
      statearr_10529_10532[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
    }else {
      return null
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__10521 = null;
    if(arguments.length > 3) {
      p__10521 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__10521)
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__10533) {
    var state = cljs.core.first(arglist__10533);
    arglist__10533 = cljs.core.next(arglist__10533);
    var cont_block = cljs.core.first(arglist__10533);
    arglist__10533 = cljs.core.next(arglist__10533);
    var ports = cljs.core.first(arglist__10533);
    var p__10521 = cljs.core.rest(arglist__10533);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__10521)
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if(value == null) {
  }else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null
    }))
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while(true) {
    if(cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__10498 = cnt + 1;
      cnt = G__10498;
      continue
    }else {
      return null
    }
    break
  }
};
goog.provide("cljs.core.async.impl.buffers.RingBuffer");
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.buffers/RingBuffer")
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if(self__.length === 0) {
    return null
  }else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if(self__.length + 1 === self__.arr.length) {
    this$.resize()
  }else {
  }
  return this$.unshift(x)
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if(self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr
  }else {
    if(self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr
    }else {
      if(self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr
      }else {
        return null
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__3647__auto__ = self__.length;
  var x = 0;
  while(true) {
    if(x < n__3647__auto__) {
      var v_10499 = this$.pop();
      if(keep_QMARK_.call(null, v_10499)) {
        this$.unshift(v_10499)
      }else {
      }
      var G__10500 = x + 1;
      x = G__10500;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr)
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if(n > 0) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n))
};
goog.provide("cljs.core.async.impl.buffers.FixedBuffer");
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.buffers/FixedBuffer")
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.length === self__.n
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  if(cljs.core.not.call(null, this$.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(this$))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm)
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n)
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
goog.provide("cljs.core.async.impl.buffers.DroppingBuffer");
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.buffers/DroppingBuffer")
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  return false
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  if(self__.buf.length === self__.n) {
    return null
  }else {
    return self__.buf.unshift(itm)
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n)
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
goog.provide("cljs.core.async.impl.buffers.SlidingBuffer");
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.buffers/SlidingBuffer")
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  return false
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  if(self__.buf.length === self__.n) {
    this$.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(this$)
  }else {
  }
  return self__.buf.unshift(itm)
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n)
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_10487 = 0;
  while(true) {
    var m_10488 = cljs.core.async.impl.dispatch.tasks.pop();
    if(m_10488 == null) {
    }else {
      m_10488.call(null);
      if(count_10487 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__10489 = count_10487 + 1;
        count_10487 = G__10489;
        continue
      }else {
      }
    }
    break
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if(cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null)
  }else {
    return null
  }
};
if(typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null)
  }
}else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if(cljs.core.truth_(function() {
    var and__3941__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if(cljs.core.truth_(and__3941__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_
    }else {
      return and__3941__auto__
    }
  }())) {
    return null
  }else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if(typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0)
    }else {
      if(typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null)
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay)
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if(typeof cljs.core.async.impl.channels.t10493 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.impl.channels.t10493");
    cljs.core.async.impl.channels.t10493 = function(val, box, meta10494) {
      this.val = val;
      this.box = box;
      this.meta10494 = meta10494;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984
    };
    cljs.core.async.impl.channels.t10493.cljs$lang$type = true;
    cljs.core.async.impl.channels.t10493.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t10493";
    cljs.core.async.impl.channels.t10493.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.channels/t10493")
    };
    cljs.core.async.impl.channels.t10493.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      return self__.val
    };
    cljs.core.async.impl.channels.t10493.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10495) {
      var self__ = this;
      return self__.meta10494
    };
    cljs.core.async.impl.channels.t10493.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10495, meta10494__$1) {
      var self__ = this;
      return new cljs.core.async.impl.channels.t10493(self__.val, self__.box, meta10494__$1)
    };
    cljs.core.async.impl.channels.__GT_t10493 = function __GT_t10493(val__$1, box__$1, meta10494) {
      return new cljs.core.async.impl.channels.t10493(val__$1, box__$1, meta10494)
    }
  }
  return new cljs.core.async.impl.channels.t10493(val, box, null)
};
goog.provide("cljs.core.async.impl.channels.PutBox");
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3413__auto__, writer__3414__auto__, opts__3415__auto__) {
  return cljs.core._write.call(null, writer__3414__auto__, "cljs.core.async.impl.channels/PutBox")
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val)
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler)
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
goog.provide("cljs.core.async.impl.channels.ManyToManyChannel");
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.channels/ManyToManyChannel")
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  if(self__.closed) {
    return null
  }else {
    self__.closed = true;
    while(true) {
      var taker_10496 = self__.takes.pop();
      if(taker_10496 == null) {
      }else {
        if(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_10496)) {
          var take_cb_10497 = cljs.core.async.impl.protocols.commit.call(null, taker_10496);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_10497, taker_10496) {
            return function() {
              return take_cb_10497.call(null, null)
            }
          }(take_cb_10497, taker_10496))
        }else {
        }
        continue
      }
      break
    }
    return null
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  if(!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null
  }else {
    if(function() {
      var and__3941__auto__ = !(self__.buf == null);
      if(and__3941__auto__) {
        return cljs.core.count.call(null, self__.buf) > 0
      }else {
        return and__3941__auto__
      }
    }()) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf))
    }else {
      while(true) {
        var putter = self__.puts.pop();
        if(!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if(cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val)
          }else {
            continue
          }
        }else {
          if(self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null)
          }else {
            if(self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_)
            }else {
              self__.dirty_takes = self__.dirty_takes + 1
            }
            if(self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            }else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null
          }
        }
        break
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  if(!(val == null)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if(function() {
    var or__3943__auto__ = closed__$1;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)
    }
  }()) {
    return cljs.core.async.impl.channels.box.call(null, null)
  }else {
    while(true) {
      var taker = self__.takes.pop();
      if(!(taker == null)) {
        if(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val)
            }
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null)
        }else {
          continue
        }
      }else {
        if(!function() {
          var or__3943__auto__ = self__.buf == null;
          if(or__3943__auto__) {
            return or__3943__auto__
          }else {
            return cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf)
          }
        }()) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null)
        }else {
          if(self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_)
          }else {
            self__.dirty_puts = self__.dirty_puts + 1
          }
          if(self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          }else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null
        }
      }
      break
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed)
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null)
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0)
  };
  var random_level__1 = function(level) {
    while(true) {
      if(function() {
        var and__3941__auto__ = Math.random() < cljs.core.async.impl.timers.P;
        if(and__3941__auto__) {
          return level < cljs.core.async.impl.timers.MAX_LEVEL
        }else {
          return and__3941__auto__
        }
      }()) {
        var G__10463 = level + 1;
        level = G__10463;
        continue
      }else {
        return level
      }
      break
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level
}();
goog.provide("cljs.core.async.impl.timers.SkipListNode");
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.timers/SkipListNode")
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward)
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level)
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_10464 = 0;
    while(true) {
      if(i_10464 < arr.length) {
        arr[i_10464] = null;
        var G__10465 = i_10464 + 1;
        i_10464 = G__10465;
        continue
      }else {
      }
      break
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr)
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null)
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while(true) {
      if(!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while(true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if(x_SINGLEQUOTE_.key < k) {
                var G__10466 = x_SINGLEQUOTE_;
                x__$1 = G__10466;
                continue
              }else {
                return x__$1
              }
            }else {
              return x__$1
            }
            break
          }
        }();
        if(update == null) {
        }else {
          update[level] = x__$1
        }
        var G__10467 = x__$1;
        var G__10468 = k;
        var G__10469 = level - 1;
        var G__10470 = update;
        x = G__10467;
        k = G__10468;
        level = G__10469;
        update = G__10470;
        continue
      }else {
        return x
      }
      break
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node
}();
goog.provide("cljs.core.async.impl.timers.SkipList");
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async.impl.timers/SkipList")
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if(node == null) {
        return null
      }else {
        return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([node.key, node.val], true), iter.call(null, node.forward[0]))
      }
    }, null, null)
  };
  return iter.call(null, self__.header.forward[0])
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if(function() {
    var and__3941__auto__ = !(x__$1 == null);
    if(and__3941__auto__) {
      return x__$1.key === k
    }else {
      return and__3941__auto__
    }
  }()) {
    return x__$1.val = v
  }else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if(new_level > self__.level) {
      var i_10471 = self__.level + 1;
      while(true) {
        if(i_10471 <= new_level + 1) {
          update[i_10471] = self__.header;
          var G__10472 = i_10471 + 1;
          i_10471 = G__10472;
          continue
        }else {
        }
        break
      }
      self__.level = new_level
    }else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while(true) {
      if(i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2
      }else {
        return null
      }
      break
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if(function() {
    var and__3941__auto__ = !(x__$1 == null);
    if(and__3941__auto__) {
      return x__$1.key === k
    }else {
      return and__3941__auto__
    }
  }()) {
    var i_10473 = 0;
    while(true) {
      if(i_10473 <= self__.level) {
        var links_10474 = update[i_10473].forward;
        if(links_10474[i_10473] === x__$1) {
          links_10474[i_10473] = x__$1.forward[i_10473];
          var G__10475 = i_10473 + 1;
          i_10473 = G__10475;
          continue
        }else {
          var G__10476 = i_10473 + 1;
          i_10473 = G__10476;
          continue
        }
      }else {
      }
      break
    }
    while(true) {
      if(function() {
        var and__3941__auto__ = self__.level > 0;
        if(and__3941__auto__) {
          return self__.header.forward[self__.level] == null
        }else {
          return and__3941__auto__
        }
      }()) {
        self__.level = self__.level - 1;
        continue
      }else {
        return null
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while(true) {
    if(!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while(true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if(x_SINGLEQUOTE_ == null) {
            return null
          }else {
            if(x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_
            }else {
              var G__10477 = x_SINGLEQUOTE_;
              x__$1 = G__10477;
              continue
            }
          }
          break
        }
      }();
      if(!(nx == null)) {
        var G__10478 = nx;
        var G__10479 = level__$1 - 1;
        x = G__10478;
        level__$1 = G__10479;
        continue
      }else {
        var G__10480 = x;
        var G__10481 = level__$1 - 1;
        x = G__10480;
        level__$1 = G__10481;
        continue
      }
    }else {
      if(x === self__.header) {
        return null
      }else {
        return x
      }
    }
    break
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while(true) {
    if(!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while(true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if(!(x_SINGLEQUOTE_ == null)) {
            if(x_SINGLEQUOTE_.key > k) {
              return x__$1
            }else {
              var G__10482 = x_SINGLEQUOTE_;
              x__$1 = G__10482;
              continue
            }
          }else {
            if(level__$1 === 0) {
              return x__$1
            }else {
              return null
            }
          }
          break
        }
      }();
      if(cljs.core.truth_(nx)) {
        var G__10483 = nx;
        var G__10484 = level__$1 - 1;
        x = G__10483;
        level__$1 = G__10484;
        continue
      }else {
        var G__10485 = x;
        var G__10486 = level__$1 - 1;
        x = G__10485;
        level__$1 = G__10486;
        continue
      }
    }else {
      if(x === self__.header) {
        return null
      }else {
        return x
      }
    }
    break
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level)
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0)
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3943__auto__ = cljs.core.truth_(function() {
    var and__3941__auto__ = me;
    if(cljs.core.truth_(and__3941__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS
    }else {
      return and__3941__auto__
    }
  }()) ? me.val : null;
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel)
    }, msecs);
    return timeout_channel
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.fn_handler = function fn_handler(f) {
  if(typeof cljs.core.async.t8523 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.t8523");
    cljs.core.async.t8523 = function(f, fn_handler, meta8524) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta8524 = meta8524;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t8523.cljs$lang$type = true;
    cljs.core.async.t8523.cljs$lang$ctorStr = "cljs.core.async/t8523";
    cljs.core.async.t8523.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8523")
    };
    cljs.core.async.t8523.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t8523.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      return true
    };
    cljs.core.async.t8523.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      return self__.f
    };
    cljs.core.async.t8523.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8525) {
      var self__ = this;
      return self__.meta8524
    };
    cljs.core.async.t8523.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8525, meta8524__$1) {
      var self__ = this;
      return new cljs.core.async.t8523(self__.f, self__.fn_handler, meta8524__$1)
    };
    cljs.core.async.__GT_t8523 = function __GT_t8523(f__$1, fn_handler__$1, meta8524) {
      return new cljs.core.async.t8523(f__$1, fn_handler__$1, meta8524)
    }
  }
  return new cljs.core.async.t8523(f, fn_handler, null)
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n)
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n)
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n)
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null)
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1)
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs)
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if(null) {
    return null
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true)
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if(cljs.core.truth_(ret)) {
      var val_8526 = cljs.core.deref.call(null, ret);
      if(cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_8526)
      }else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_8526)
        })
      }
    }else {
    }
    return null
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_
}();
cljs.core.async.nop = function nop() {
  return null
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if(null) {
    return null
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop)
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true)
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if(cljs.core.truth_(function() {
      var and__3941__auto__ = ret;
      if(cljs.core.truth_(and__3941__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop)
      }else {
        return and__3941__auto__
      }
    }())) {
      if(cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null)
      }else {
        cljs.core.async.impl.dispatch.run.call(null, fn0)
      }
    }else {
    }
    return null
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port)
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__3647__auto___8527 = n;
  var x_8528 = 0;
  while(true) {
    if(x_8528 < n__3647__auto___8527) {
      a[x_8528] = 0;
      var G__8529 = x_8528 + 1;
      x_8528 = G__8529;
      continue
    }else {
    }
    break
  }
  var i = 1;
  while(true) {
    if(cljs.core._EQ_.call(null, i, n)) {
      return a
    }else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__8530 = i + 1;
      i = G__8530;
      continue
    }
    break
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if(typeof cljs.core.async.t8534 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.t8534");
    cljs.core.async.t8534 = function(flag, alt_flag, meta8535) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta8535 = meta8535;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t8534.cljs$lang$type = true;
    cljs.core.async.t8534.cljs$lang$ctorStr = "cljs.core.async/t8534";
    cljs.core.async.t8534.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8534")
    };
    cljs.core.async.t8534.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t8534.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      return cljs.core.deref.call(null, self__.flag)
    };
    cljs.core.async.t8534.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true
    };
    cljs.core.async.t8534.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8536) {
      var self__ = this;
      return self__.meta8535
    };
    cljs.core.async.t8534.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8536, meta8535__$1) {
      var self__ = this;
      return new cljs.core.async.t8534(self__.flag, self__.alt_flag, meta8535__$1)
    };
    cljs.core.async.__GT_t8534 = function __GT_t8534(flag__$1, alt_flag__$1, meta8535) {
      return new cljs.core.async.t8534(flag__$1, alt_flag__$1, meta8535)
    }
  }
  return new cljs.core.async.t8534(flag, alt_flag, null)
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if(typeof cljs.core.async.t8540 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.t8540");
    cljs.core.async.t8540 = function(cb, flag, alt_handler, meta8541) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta8541 = meta8541;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t8540.cljs$lang$type = true;
    cljs.core.async.t8540.cljs$lang$ctorStr = "cljs.core.async/t8540";
    cljs.core.async.t8540.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8540")
    };
    cljs.core.async.t8540.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t8540.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag)
    };
    cljs.core.async.t8540.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb
    };
    cljs.core.async.t8540.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8542) {
      var self__ = this;
      return self__.meta8541
    };
    cljs.core.async.t8540.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8542, meta8541__$1) {
      var self__ = this;
      return new cljs.core.async.t8540(self__.cb, self__.flag, self__.alt_handler, meta8541__$1)
    };
    cljs.core.async.__GT_t8540 = function __GT_t8540(cb__$1, flag__$1, alt_handler__$1, meta8541) {
      return new cljs.core.async.t8540(cb__$1, flag__$1, alt_handler__$1, meta8541)
    }
  }
  return new cljs.core.async.t8540(cb, flag, alt_handler, null)
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).call(null, opts);
  var ret = function() {
    var i = 0;
    while(true) {
      if(i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, cljs.core.PersistentVector.fromArray([null, wport], true))
            }
          }(i, val, idx, port, wport, flag, n, idxs, priority)))
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__8543_SHARP_) {
            return fret.call(null, cljs.core.PersistentVector.fromArray([p1__8543_SHARP_, port], true))
          }
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if(cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, cljs.core.PersistentVector.fromArray([cljs.core.deref.call(null, vbox), function() {
            var or__3943__auto__ = wport;
            if(cljs.core.truth_(or__3943__auto__)) {
              return or__3943__auto__
            }else {
              return port
            }
          }()], true))
        }else {
          var G__8544 = i + 1;
          i = G__8544;
          continue
        }
      }else {
        return null
      }
      break
    }
  }();
  var or__3943__auto__ = ret;
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    if(cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3941__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if(cljs.core.truth_(and__3941__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag)
        }else {
          return and__3941__auto__
        }
      }();
      if(cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, cljs.core.PersistentVector.fromArray([(new cljs.core.Keyword(null, "default", "default", 2558708147)).call(null, opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], true))
      }else {
        return null
      }
    }else {
      return null
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__8545) {
    var map__8547 = p__8545;
    var map__8547__$1 = cljs.core.seq_QMARK_.call(null, map__8547) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8547) : map__8547;
    var opts = map__8547__$1;
    if(null) {
      return null
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__8545 = null;
    if(arguments.length > 1) {
      p__8545 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return alts_BANG___delegate.call(this, ports, p__8545)
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__8548) {
    var ports = cljs.core.first(arglist__8548);
    var p__8545 = cljs.core.rest(arglist__8548);
    return alts_BANG___delegate(ports, p__8545)
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if(typeof cljs.core.async.t8556 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.t8556");
    cljs.core.async.t8556 = function(ch, f, map_LT_, meta8557) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta8557 = meta8557;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t8556.cljs$lang$type = true;
    cljs.core.async.t8556.cljs$lang$ctorStr = "cljs.core.async/t8556";
    cljs.core.async.t8556.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8556")
    };
    cljs.core.async.t8556.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t8556.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0)
    };
    cljs.core.async.t8556.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t8556.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if(typeof cljs.core.async.t8559 !== "undefined") {
        }else {
          goog.provide("cljs.core.async.t8559");
          cljs.core.async.t8559 = function(fn1, _, meta8557, ch, f, map_LT_, meta8560) {
            this.fn1 = fn1;
            this._ = _;
            this.meta8557 = meta8557;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta8560 = meta8560;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216
          };
          cljs.core.async.t8559.cljs$lang$type = true;
          cljs.core.async.t8559.cljs$lang$ctorStr = "cljs.core.async/t8559";
          cljs.core.async.t8559.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
            return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8559")
          };
          cljs.core.async.t8559.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t8559.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$2) {
            var self__ = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1)
          };
          cljs.core.async.t8559.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$2) {
            var self__ = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1)
          };
          cljs.core.async.t8559.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$2) {
            var self__ = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1) {
              return function(p1__8549_SHARP_) {
                return f1.call(null, p1__8549_SHARP_ == null ? null : self__.f.call(null, p1__8549_SHARP_))
              }
            }(f1)
          };
          cljs.core.async.t8559.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8561) {
            var self__ = this;
            return self__.meta8560
          };
          cljs.core.async.t8559.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8561, meta8560__$1) {
            var self__ = this;
            return new cljs.core.async.t8559(self__.fn1, self__._, self__.meta8557, self__.ch, self__.f, self__.map_LT_, meta8560__$1)
          };
          cljs.core.async.__GT_t8559 = function __GT_t8559(fn1__$1, ___$1, meta8557__$1, ch__$2, f__$2, map_LT___$2, meta8560) {
            return new cljs.core.async.t8559(fn1__$1, ___$1, meta8557__$1, ch__$2, f__$2, map_LT___$2, meta8560)
          }
        }
        return new cljs.core.async.t8559(fn1, _, self__.meta8557, self__.ch, self__.f, self__.map_LT_, null)
      }());
      if(cljs.core.truth_(function() {
        var and__3941__auto__ = ret;
        if(cljs.core.truth_(and__3941__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null)
        }else {
          return and__3941__auto__
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)))
      }else {
        return ret
      }
    };
    cljs.core.async.t8556.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t8556.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t8556.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8558) {
      var self__ = this;
      return self__.meta8557
    };
    cljs.core.async.t8556.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8558, meta8557__$1) {
      var self__ = this;
      return new cljs.core.async.t8556(self__.ch, self__.f, self__.map_LT_, meta8557__$1)
    };
    cljs.core.async.__GT_t8556 = function __GT_t8556(ch__$1, f__$1, map_LT___$1, meta8557) {
      return new cljs.core.async.t8556(ch__$1, f__$1, map_LT___$1, meta8557)
    }
  }
  return new cljs.core.async.t8556(ch, f, map_LT_, null)
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if(typeof cljs.core.async.t8565 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.t8565");
    cljs.core.async.t8565 = function(ch, f, map_GT_, meta8566) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta8566 = meta8566;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t8565.cljs$lang$type = true;
    cljs.core.async.t8565.cljs$lang$ctorStr = "cljs.core.async/t8565";
    cljs.core.async.t8565.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8565")
    };
    cljs.core.async.t8565.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t8565.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0)
    };
    cljs.core.async.t8565.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t8565.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1)
    };
    cljs.core.async.t8565.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t8565.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t8565.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8567) {
      var self__ = this;
      return self__.meta8566
    };
    cljs.core.async.t8565.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8567, meta8566__$1) {
      var self__ = this;
      return new cljs.core.async.t8565(self__.ch, self__.f, self__.map_GT_, meta8566__$1)
    };
    cljs.core.async.__GT_t8565 = function __GT_t8565(ch__$1, f__$1, map_GT___$1, meta8566) {
      return new cljs.core.async.t8565(ch__$1, f__$1, map_GT___$1, meta8566)
    }
  }
  return new cljs.core.async.t8565(ch, f, map_GT_, null)
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if(typeof cljs.core.async.t8571 !== "undefined") {
  }else {
    goog.provide("cljs.core.async.t8571");
    cljs.core.async.t8571 = function(ch, p, filter_GT_, meta8572) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta8572 = meta8572;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t8571.cljs$lang$type = true;
    cljs.core.async.t8571.cljs$lang$ctorStr = "cljs.core.async/t8571";
    cljs.core.async.t8571.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
      return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t8571")
    };
    cljs.core.async.t8571.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t8571.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      if(cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0)
      }else {
        return cljs.core.async.impl.channels.box.call(null, null)
      }
    };
    cljs.core.async.t8571.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t8571.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1)
    };
    cljs.core.async.t8571.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t8571.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t8571.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8573) {
      var self__ = this;
      return self__.meta8572
    };
    cljs.core.async.t8571.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8573, meta8572__$1) {
      var self__ = this;
      return new cljs.core.async.t8571(self__.ch, self__.p, self__.filter_GT_, meta8572__$1)
    };
    cljs.core.async.__GT_t8571 = function __GT_t8571(ch__$1, p__$1, filter_GT___$1, meta8572) {
      return new cljs.core.async.t8571(ch__$1, p__$1, filter_GT___$1, meta8572)
    }
  }
  return new cljs.core.async.t8571(ch, p, filter_GT_, null)
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch)
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null)
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5125__auto___8648 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_8631) {
          var state_val_8632 = state_8631[1];
          if(state_val_8632 === 1) {
            var state_8631__$1 = state_8631;
            var statearr_8633_8649 = state_8631__$1;
            statearr_8633_8649[2] = null;
            statearr_8633_8649[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_8632 === 2) {
              var state_8631__$1 = state_8631;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8631__$1, 4, ch)
            }else {
              if(state_val_8632 === 3) {
                var inst_8629 = state_8631[2];
                var state_8631__$1 = state_8631;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8631__$1, inst_8629)
              }else {
                if(state_val_8632 === 4) {
                  var inst_8613 = state_8631[5];
                  var inst_8613__$1 = state_8631[2];
                  var inst_8614 = inst_8613__$1 == null;
                  var state_8631__$1 = function() {
                    var statearr_8634 = state_8631;
                    statearr_8634[5] = inst_8613__$1;
                    return statearr_8634
                  }();
                  if(cljs.core.truth_(inst_8614)) {
                    var statearr_8635_8650 = state_8631__$1;
                    statearr_8635_8650[1] = 5
                  }else {
                    var statearr_8636_8651 = state_8631__$1;
                    statearr_8636_8651[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_8632 === 5) {
                    var inst_8616 = cljs.core.async.close_BANG_.call(null, out);
                    var state_8631__$1 = state_8631;
                    var statearr_8637_8652 = state_8631__$1;
                    statearr_8637_8652[2] = inst_8616;
                    statearr_8637_8652[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_8632 === 6) {
                      var inst_8613 = state_8631[5];
                      var inst_8618 = p.call(null, inst_8613);
                      var state_8631__$1 = state_8631;
                      if(cljs.core.truth_(inst_8618)) {
                        var statearr_8638_8653 = state_8631__$1;
                        statearr_8638_8653[1] = 8
                      }else {
                        var statearr_8639_8654 = state_8631__$1;
                        statearr_8639_8654[1] = 9
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_8632 === 7) {
                        var inst_8627 = state_8631[2];
                        var state_8631__$1 = state_8631;
                        var statearr_8640_8655 = state_8631__$1;
                        statearr_8640_8655[2] = inst_8627;
                        statearr_8640_8655[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_8632 === 8) {
                          var inst_8613 = state_8631[5];
                          var state_8631__$1 = state_8631;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8631__$1, 11, out, inst_8613)
                        }else {
                          if(state_val_8632 === 9) {
                            var state_8631__$1 = state_8631;
                            var statearr_8641_8656 = state_8631__$1;
                            statearr_8641_8656[2] = null;
                            statearr_8641_8656[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_8632 === 10) {
                              var inst_8624 = state_8631[2];
                              var state_8631__$1 = function() {
                                var statearr_8642 = state_8631;
                                statearr_8642[6] = inst_8624;
                                return statearr_8642
                              }();
                              var statearr_8643_8657 = state_8631__$1;
                              statearr_8643_8657[2] = null;
                              statearr_8643_8657[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_8632 === 11) {
                                var inst_8621 = state_8631[2];
                                var state_8631__$1 = state_8631;
                                var statearr_8644_8658 = state_8631__$1;
                                statearr_8644_8658[2] = inst_8621;
                                statearr_8644_8658[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_8646 = new Array(7);
              statearr_8646[0] = state_machine__5076__auto__;
              statearr_8646[1] = 1;
              return statearr_8646
            };
            var state_machine__5076__auto____1 = function(state_8631) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_8631);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_8631) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_8631)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_8647 = f__5126__auto__.call(null);
        statearr_8647[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___8648;
        return statearr_8647
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return out
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null)
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n)
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5126__auto__ = function() {
      var switch__5075__auto__ = function(state_8806) {
        var state_val_8807 = state_8806[1];
        if(state_val_8807 === 1) {
          var state_8806__$1 = state_8806;
          var statearr_8808_8841 = state_8806__$1;
          statearr_8808_8841[2] = null;
          statearr_8808_8841[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_8807 === 2) {
            var state_8806__$1 = state_8806;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8806__$1, 4, in$)
          }else {
            if(state_val_8807 === 3) {
              var inst_8804 = state_8806[2];
              var state_8806__$1 = state_8806;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8806__$1, inst_8804)
            }else {
              if(state_val_8807 === 4) {
                var inst_8752 = state_8806[5];
                var inst_8752__$1 = state_8806[2];
                var inst_8753 = inst_8752__$1 == null;
                var state_8806__$1 = function() {
                  var statearr_8809 = state_8806;
                  statearr_8809[5] = inst_8752__$1;
                  return statearr_8809
                }();
                if(cljs.core.truth_(inst_8753)) {
                  var statearr_8810_8842 = state_8806__$1;
                  statearr_8810_8842[1] = 5
                }else {
                  var statearr_8811_8843 = state_8806__$1;
                  statearr_8811_8843[1] = 6
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_8807 === 5) {
                  var inst_8755 = cljs.core.async.close_BANG_.call(null, out);
                  var state_8806__$1 = state_8806;
                  var statearr_8812_8844 = state_8806__$1;
                  statearr_8812_8844[2] = inst_8755;
                  statearr_8812_8844[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_8807 === 6) {
                    var inst_8752 = state_8806[5];
                    var inst_8757 = f.call(null, inst_8752);
                    var inst_8762 = cljs.core.seq.call(null, inst_8757);
                    var inst_8763 = inst_8762;
                    var inst_8764 = null;
                    var inst_8765 = 0;
                    var inst_8766 = 0;
                    var state_8806__$1 = function() {
                      var statearr_8813 = state_8806;
                      statearr_8813[6] = inst_8766;
                      statearr_8813[7] = inst_8764;
                      statearr_8813[8] = inst_8765;
                      statearr_8813[9] = inst_8763;
                      return statearr_8813
                    }();
                    var statearr_8814_8845 = state_8806__$1;
                    statearr_8814_8845[2] = null;
                    statearr_8814_8845[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_8807 === 7) {
                      var inst_8802 = state_8806[2];
                      var state_8806__$1 = state_8806;
                      var statearr_8815_8846 = state_8806__$1;
                      statearr_8815_8846[2] = inst_8802;
                      statearr_8815_8846[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_8807 === 8) {
                        var inst_8766 = state_8806[6];
                        var inst_8765 = state_8806[8];
                        var inst_8768 = inst_8766 < inst_8765;
                        var inst_8769 = inst_8768;
                        var state_8806__$1 = state_8806;
                        if(cljs.core.truth_(inst_8769)) {
                          var statearr_8816_8847 = state_8806__$1;
                          statearr_8816_8847[1] = 10
                        }else {
                          var statearr_8817_8848 = state_8806__$1;
                          statearr_8817_8848[1] = 11
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_8807 === 9) {
                          var inst_8799 = state_8806[2];
                          var state_8806__$1 = function() {
                            var statearr_8818 = state_8806;
                            statearr_8818[10] = inst_8799;
                            return statearr_8818
                          }();
                          var statearr_8819_8849 = state_8806__$1;
                          statearr_8819_8849[2] = null;
                          statearr_8819_8849[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_8807 === 10) {
                            var inst_8766 = state_8806[6];
                            var inst_8764 = state_8806[7];
                            var inst_8771 = cljs.core._nth.call(null, inst_8764, inst_8766);
                            var state_8806__$1 = state_8806;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8806__$1, 13, out, inst_8771)
                          }else {
                            if(state_val_8807 === 11) {
                              var inst_8777 = state_8806[11];
                              var inst_8763 = state_8806[9];
                              var inst_8777__$1 = cljs.core.seq.call(null, inst_8763);
                              var state_8806__$1 = function() {
                                var statearr_8823 = state_8806;
                                statearr_8823[11] = inst_8777__$1;
                                return statearr_8823
                              }();
                              if(inst_8777__$1) {
                                var statearr_8824_8850 = state_8806__$1;
                                statearr_8824_8850[1] = 14
                              }else {
                                var statearr_8825_8851 = state_8806__$1;
                                statearr_8825_8851[1] = 15
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_8807 === 12) {
                                var inst_8797 = state_8806[2];
                                var state_8806__$1 = state_8806;
                                var statearr_8826_8852 = state_8806__$1;
                                statearr_8826_8852[2] = inst_8797;
                                statearr_8826_8852[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_8807 === 13) {
                                  var inst_8766 = state_8806[6];
                                  var inst_8764 = state_8806[7];
                                  var inst_8765 = state_8806[8];
                                  var inst_8763 = state_8806[9];
                                  var inst_8773 = state_8806[2];
                                  var inst_8774 = inst_8766 + 1;
                                  var tmp8820 = inst_8764;
                                  var tmp8821 = inst_8765;
                                  var tmp8822 = inst_8763;
                                  var inst_8763__$1 = tmp8822;
                                  var inst_8764__$1 = tmp8820;
                                  var inst_8765__$1 = tmp8821;
                                  var inst_8766__$1 = inst_8774;
                                  var state_8806__$1 = function() {
                                    var statearr_8827 = state_8806;
                                    statearr_8827[12] = inst_8773;
                                    statearr_8827[6] = inst_8766__$1;
                                    statearr_8827[7] = inst_8764__$1;
                                    statearr_8827[8] = inst_8765__$1;
                                    statearr_8827[9] = inst_8763__$1;
                                    return statearr_8827
                                  }();
                                  var statearr_8828_8853 = state_8806__$1;
                                  statearr_8828_8853[2] = null;
                                  statearr_8828_8853[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_8807 === 14) {
                                    var inst_8777 = state_8806[11];
                                    var inst_8779 = cljs.core.chunked_seq_QMARK_.call(null, inst_8777);
                                    var state_8806__$1 = state_8806;
                                    if(inst_8779) {
                                      var statearr_8829_8854 = state_8806__$1;
                                      statearr_8829_8854[1] = 17
                                    }else {
                                      var statearr_8830_8855 = state_8806__$1;
                                      statearr_8830_8855[1] = 18
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_8807 === 15) {
                                      var state_8806__$1 = state_8806;
                                      var statearr_8831_8856 = state_8806__$1;
                                      statearr_8831_8856[2] = null;
                                      statearr_8831_8856[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_8807 === 16) {
                                        var inst_8795 = state_8806[2];
                                        var state_8806__$1 = state_8806;
                                        var statearr_8832_8857 = state_8806__$1;
                                        statearr_8832_8857[2] = inst_8795;
                                        statearr_8832_8857[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_8807 === 17) {
                                          var inst_8777 = state_8806[11];
                                          var inst_8781 = cljs.core.chunk_first.call(null, inst_8777);
                                          var inst_8782 = cljs.core.chunk_rest.call(null, inst_8777);
                                          var inst_8783 = cljs.core.count.call(null, inst_8781);
                                          var inst_8763 = inst_8782;
                                          var inst_8764 = inst_8781;
                                          var inst_8765 = inst_8783;
                                          var inst_8766 = 0;
                                          var state_8806__$1 = function() {
                                            var statearr_8833 = state_8806;
                                            statearr_8833[6] = inst_8766;
                                            statearr_8833[7] = inst_8764;
                                            statearr_8833[8] = inst_8765;
                                            statearr_8833[9] = inst_8763;
                                            return statearr_8833
                                          }();
                                          var statearr_8834_8858 = state_8806__$1;
                                          statearr_8834_8858[2] = null;
                                          statearr_8834_8858[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_8807 === 18) {
                                            var inst_8777 = state_8806[11];
                                            var inst_8786 = cljs.core.first.call(null, inst_8777);
                                            var state_8806__$1 = state_8806;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8806__$1, 20, out, inst_8786)
                                          }else {
                                            if(state_val_8807 === 19) {
                                              var inst_8792 = state_8806[2];
                                              var state_8806__$1 = state_8806;
                                              var statearr_8835_8859 = state_8806__$1;
                                              statearr_8835_8859[2] = inst_8792;
                                              statearr_8835_8859[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_8807 === 20) {
                                                var inst_8777 = state_8806[11];
                                                var inst_8788 = state_8806[2];
                                                var inst_8789 = cljs.core.next.call(null, inst_8777);
                                                var inst_8763 = inst_8789;
                                                var inst_8764 = null;
                                                var inst_8765 = 0;
                                                var inst_8766 = 0;
                                                var state_8806__$1 = function() {
                                                  var statearr_8836 = state_8806;
                                                  statearr_8836[13] = inst_8788;
                                                  statearr_8836[6] = inst_8766;
                                                  statearr_8836[7] = inst_8764;
                                                  statearr_8836[8] = inst_8765;
                                                  statearr_8836[9] = inst_8763;
                                                  return statearr_8836
                                                }();
                                                var statearr_8837_8860 = state_8806__$1;
                                                statearr_8837_8860[2] = null;
                                                statearr_8837_8860[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                return null
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5075__auto__) {
        return function() {
          var state_machine__5076__auto__ = null;
          var state_machine__5076__auto____0 = function() {
            var statearr_8839 = new Array(14);
            statearr_8839[0] = state_machine__5076__auto__;
            statearr_8839[1] = 1;
            return statearr_8839
          };
          var state_machine__5076__auto____1 = function(state_8806) {
            while(true) {
              var result__5077__auto__ = switch__5075__auto__.call(null, state_8806);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5077__auto__
              }
              break
            }
          };
          state_machine__5076__auto__ = function(state_8806) {
            switch(arguments.length) {
              case 0:
                return state_machine__5076__auto____0.call(this);
              case 1:
                return state_machine__5076__auto____1.call(this, state_8806)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
          return state_machine__5076__auto__
        }()
      }(switch__5075__auto__)
    }();
    var state__5127__auto__ = function() {
      var statearr_8840 = f__5126__auto__.call(null);
      statearr_8840[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto__;
      return statearr_8840
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
  });
  return c__5125__auto__
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null)
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null)
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true)
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5125__auto___8933 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_8916) {
          var state_val_8917 = state_8916[1];
          if(state_val_8917 === 1) {
            var state_8916__$1 = state_8916;
            var statearr_8918_8934 = state_8916__$1;
            statearr_8918_8934[2] = null;
            statearr_8918_8934[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_8917 === 2) {
              var state_8916__$1 = state_8916;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8916__$1, 4, from)
            }else {
              if(state_val_8917 === 3) {
                var inst_8914 = state_8916[2];
                var state_8916__$1 = state_8916;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8916__$1, inst_8914)
              }else {
                if(state_val_8917 === 4) {
                  var inst_8899 = state_8916[5];
                  var inst_8899__$1 = state_8916[2];
                  var inst_8900 = inst_8899__$1 == null;
                  var state_8916__$1 = function() {
                    var statearr_8919 = state_8916;
                    statearr_8919[5] = inst_8899__$1;
                    return statearr_8919
                  }();
                  if(cljs.core.truth_(inst_8900)) {
                    var statearr_8920_8935 = state_8916__$1;
                    statearr_8920_8935[1] = 5
                  }else {
                    var statearr_8921_8936 = state_8916__$1;
                    statearr_8921_8936[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_8917 === 5) {
                    var state_8916__$1 = state_8916;
                    if(cljs.core.truth_(close_QMARK_)) {
                      var statearr_8922_8937 = state_8916__$1;
                      statearr_8922_8937[1] = 8
                    }else {
                      var statearr_8923_8938 = state_8916__$1;
                      statearr_8923_8938[1] = 9
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_8917 === 6) {
                      var inst_8899 = state_8916[5];
                      var state_8916__$1 = state_8916;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8916__$1, 11, to, inst_8899)
                    }else {
                      if(state_val_8917 === 7) {
                        var inst_8912 = state_8916[2];
                        var state_8916__$1 = state_8916;
                        var statearr_8924_8939 = state_8916__$1;
                        statearr_8924_8939[2] = inst_8912;
                        statearr_8924_8939[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_8917 === 8) {
                          var inst_8903 = cljs.core.async.close_BANG_.call(null, to);
                          var state_8916__$1 = state_8916;
                          var statearr_8925_8940 = state_8916__$1;
                          statearr_8925_8940[2] = inst_8903;
                          statearr_8925_8940[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_8917 === 9) {
                            var state_8916__$1 = state_8916;
                            var statearr_8926_8941 = state_8916__$1;
                            statearr_8926_8941[2] = null;
                            statearr_8926_8941[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_8917 === 10) {
                              var inst_8906 = state_8916[2];
                              var state_8916__$1 = state_8916;
                              var statearr_8927_8942 = state_8916__$1;
                              statearr_8927_8942[2] = inst_8906;
                              statearr_8927_8942[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_8917 === 11) {
                                var inst_8909 = state_8916[2];
                                var state_8916__$1 = function() {
                                  var statearr_8928 = state_8916;
                                  statearr_8928[6] = inst_8909;
                                  return statearr_8928
                                }();
                                var statearr_8929_8943 = state_8916__$1;
                                statearr_8929_8943[2] = null;
                                statearr_8929_8943[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_8931 = new Array(7);
              statearr_8931[0] = state_machine__5076__auto__;
              statearr_8931[1] = 1;
              return statearr_8931
            };
            var state_machine__5076__auto____1 = function(state_8916) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_8916);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_8916) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_8916)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_8932 = f__5126__auto__.call(null);
        statearr_8932[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___8933;
        return statearr_8932
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return to
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null)
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5125__auto___9022 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_9004) {
          var state_val_9005 = state_9004[1];
          if(state_val_9005 === 1) {
            var state_9004__$1 = state_9004;
            var statearr_9006_9023 = state_9004__$1;
            statearr_9006_9023[2] = null;
            statearr_9006_9023[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_9005 === 2) {
              var state_9004__$1 = state_9004;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9004__$1, 4, ch)
            }else {
              if(state_val_9005 === 3) {
                var inst_9002 = state_9004[2];
                var state_9004__$1 = state_9004;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9004__$1, inst_9002)
              }else {
                if(state_val_9005 === 4) {
                  var inst_8985 = state_9004[5];
                  var inst_8985__$1 = state_9004[2];
                  var inst_8986 = inst_8985__$1 == null;
                  var state_9004__$1 = function() {
                    var statearr_9007 = state_9004;
                    statearr_9007[5] = inst_8985__$1;
                    return statearr_9007
                  }();
                  if(cljs.core.truth_(inst_8986)) {
                    var statearr_9008_9024 = state_9004__$1;
                    statearr_9008_9024[1] = 5
                  }else {
                    var statearr_9009_9025 = state_9004__$1;
                    statearr_9009_9025[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_9005 === 5) {
                    var inst_8988 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_8989 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_9004__$1 = function() {
                      var statearr_9010 = state_9004;
                      statearr_9010[6] = inst_8988;
                      return statearr_9010
                    }();
                    var statearr_9011_9026 = state_9004__$1;
                    statearr_9011_9026[2] = inst_8989;
                    statearr_9011_9026[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_9005 === 6) {
                      var inst_8985 = state_9004[5];
                      var inst_8991 = p.call(null, inst_8985);
                      var state_9004__$1 = state_9004;
                      if(cljs.core.truth_(inst_8991)) {
                        var statearr_9012_9027 = state_9004__$1;
                        statearr_9012_9027[1] = 9
                      }else {
                        var statearr_9013_9028 = state_9004__$1;
                        statearr_9013_9028[1] = 10
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_9005 === 7) {
                        var inst_9000 = state_9004[2];
                        var state_9004__$1 = state_9004;
                        var statearr_9014_9029 = state_9004__$1;
                        statearr_9014_9029[2] = inst_9000;
                        statearr_9014_9029[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_9005 === 8) {
                          var inst_8997 = state_9004[2];
                          var state_9004__$1 = function() {
                            var statearr_9015 = state_9004;
                            statearr_9015[7] = inst_8997;
                            return statearr_9015
                          }();
                          var statearr_9016_9030 = state_9004__$1;
                          statearr_9016_9030[2] = null;
                          statearr_9016_9030[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_9005 === 9) {
                            var state_9004__$1 = state_9004;
                            var statearr_9017_9031 = state_9004__$1;
                            statearr_9017_9031[2] = tc;
                            statearr_9017_9031[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_9005 === 10) {
                              var state_9004__$1 = state_9004;
                              var statearr_9018_9032 = state_9004__$1;
                              statearr_9018_9032[2] = fc;
                              statearr_9018_9032[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_9005 === 11) {
                                var inst_8985 = state_9004[5];
                                var inst_8995 = state_9004[2];
                                var state_9004__$1 = state_9004;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9004__$1, 8, inst_8995, inst_8985)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_9020 = new Array(8);
              statearr_9020[0] = state_machine__5076__auto__;
              statearr_9020[1] = 1;
              return statearr_9020
            };
            var state_machine__5076__auto____1 = function(state_9004) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_9004);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_9004) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_9004)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_9021 = f__5126__auto__.call(null);
        statearr_9021[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___9022;
        return statearr_9021
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return cljs.core.PersistentVector.fromArray([tc, fc], true)
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5125__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5126__auto__ = function() {
      var switch__5075__auto__ = function(state_9075) {
        var state_val_9076 = state_9075[1];
        if(state_val_9076 === 7) {
          var inst_9071 = state_9075[2];
          var state_9075__$1 = state_9075;
          var statearr_9077_9089 = state_9075__$1;
          statearr_9077_9089[2] = inst_9071;
          statearr_9077_9089[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_9076 === 6) {
            var inst_9061 = state_9075[5];
            var inst_9064 = state_9075[6];
            var inst_9068 = f.call(null, inst_9061, inst_9064);
            var inst_9061__$1 = inst_9068;
            var state_9075__$1 = function() {
              var statearr_9078 = state_9075;
              statearr_9078[5] = inst_9061__$1;
              return statearr_9078
            }();
            var statearr_9079_9090 = state_9075__$1;
            statearr_9079_9090[2] = null;
            statearr_9079_9090[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_9076 === 5) {
              var inst_9061 = state_9075[5];
              var state_9075__$1 = state_9075;
              var statearr_9080_9091 = state_9075__$1;
              statearr_9080_9091[2] = inst_9061;
              statearr_9080_9091[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_9076 === 4) {
                var inst_9064 = state_9075[6];
                var inst_9064__$1 = state_9075[2];
                var inst_9065 = inst_9064__$1 == null;
                var state_9075__$1 = function() {
                  var statearr_9081 = state_9075;
                  statearr_9081[6] = inst_9064__$1;
                  return statearr_9081
                }();
                if(cljs.core.truth_(inst_9065)) {
                  var statearr_9082_9092 = state_9075__$1;
                  statearr_9082_9092[1] = 5
                }else {
                  var statearr_9083_9093 = state_9075__$1;
                  statearr_9083_9093[1] = 6
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_9076 === 3) {
                  var inst_9073 = state_9075[2];
                  var state_9075__$1 = state_9075;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9075__$1, inst_9073)
                }else {
                  if(state_val_9076 === 2) {
                    var state_9075__$1 = state_9075;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9075__$1, 4, ch)
                  }else {
                    if(state_val_9076 === 1) {
                      var inst_9061 = init;
                      var state_9075__$1 = function() {
                        var statearr_9084 = state_9075;
                        statearr_9084[5] = inst_9061;
                        return statearr_9084
                      }();
                      var statearr_9085_9094 = state_9075__$1;
                      statearr_9085_9094[2] = null;
                      statearr_9085_9094[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      return null
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5075__auto__) {
        return function() {
          var state_machine__5076__auto__ = null;
          var state_machine__5076__auto____0 = function() {
            var statearr_9087 = new Array(7);
            statearr_9087[0] = state_machine__5076__auto__;
            statearr_9087[1] = 1;
            return statearr_9087
          };
          var state_machine__5076__auto____1 = function(state_9075) {
            while(true) {
              var result__5077__auto__ = switch__5075__auto__.call(null, state_9075);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5077__auto__
              }
              break
            }
          };
          state_machine__5076__auto__ = function(state_9075) {
            switch(arguments.length) {
              case 0:
                return state_machine__5076__auto____0.call(this);
              case 1:
                return state_machine__5076__auto____1.call(this, state_9075)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
          return state_machine__5076__auto__
        }()
      }(switch__5075__auto__)
    }();
    var state__5127__auto__ = function() {
      var statearr_9088 = f__5126__auto__.call(null);
      statearr_9088[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto__;
      return statearr_9088
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
  });
  return c__5125__auto__
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true)
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5125__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_9152) {
          var state_val_9153 = state_9152[1];
          if(state_val_9153 === 1) {
            var inst_9132 = cljs.core.seq.call(null, coll);
            var inst_9133 = inst_9132;
            var state_9152__$1 = function() {
              var statearr_9154 = state_9152;
              statearr_9154[5] = inst_9133;
              return statearr_9154
            }();
            var statearr_9155_9169 = state_9152__$1;
            statearr_9155_9169[2] = null;
            statearr_9155_9169[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_9153 === 2) {
              var inst_9133 = state_9152[5];
              var state_9152__$1 = state_9152;
              if(cljs.core.truth_(inst_9133)) {
                var statearr_9156_9170 = state_9152__$1;
                statearr_9156_9170[1] = 4
              }else {
                var statearr_9157_9171 = state_9152__$1;
                statearr_9157_9171[1] = 5
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_9153 === 3) {
                var inst_9150 = state_9152[2];
                var state_9152__$1 = state_9152;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9152__$1, inst_9150)
              }else {
                if(state_val_9153 === 4) {
                  var inst_9133 = state_9152[5];
                  var inst_9136 = cljs.core.first.call(null, inst_9133);
                  var state_9152__$1 = state_9152;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9152__$1, 7, ch, inst_9136)
                }else {
                  if(state_val_9153 === 5) {
                    var state_9152__$1 = state_9152;
                    if(cljs.core.truth_(close_QMARK_)) {
                      var statearr_9158_9172 = state_9152__$1;
                      statearr_9158_9172[1] = 8
                    }else {
                      var statearr_9159_9173 = state_9152__$1;
                      statearr_9159_9173[1] = 9
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_9153 === 6) {
                      var inst_9148 = state_9152[2];
                      var state_9152__$1 = state_9152;
                      var statearr_9160_9174 = state_9152__$1;
                      statearr_9160_9174[2] = inst_9148;
                      statearr_9160_9174[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_9153 === 7) {
                        var inst_9133 = state_9152[5];
                        var inst_9138 = state_9152[2];
                        var inst_9139 = cljs.core.next.call(null, inst_9133);
                        var inst_9133__$1 = inst_9139;
                        var state_9152__$1 = function() {
                          var statearr_9161 = state_9152;
                          statearr_9161[6] = inst_9138;
                          statearr_9161[5] = inst_9133__$1;
                          return statearr_9161
                        }();
                        var statearr_9162_9175 = state_9152__$1;
                        statearr_9162_9175[2] = null;
                        statearr_9162_9175[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_9153 === 8) {
                          var inst_9143 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_9152__$1 = state_9152;
                          var statearr_9163_9176 = state_9152__$1;
                          statearr_9163_9176[2] = inst_9143;
                          statearr_9163_9176[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_9153 === 9) {
                            var state_9152__$1 = state_9152;
                            var statearr_9164_9177 = state_9152__$1;
                            statearr_9164_9177[2] = null;
                            statearr_9164_9177[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_9153 === 10) {
                              var inst_9146 = state_9152[2];
                              var state_9152__$1 = state_9152;
                              var statearr_9165_9178 = state_9152__$1;
                              statearr_9165_9178[2] = inst_9146;
                              statearr_9165_9178[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_9167 = new Array(7);
              statearr_9167[0] = state_machine__5076__auto__;
              statearr_9167[1] = 1;
              return statearr_9167
            };
            var state_machine__5076__auto____1 = function(state_9152) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_9152);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_9152) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_9152)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_9168 = f__5126__auto__.call(null);
        statearr_9168[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto__;
        return statearr_9168
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return c__5125__auto__
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch
};
cljs.core.async.Mux = {};
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if(function() {
    var and__3941__auto__ = _;
    if(and__3941__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_)
  }else {
    var x__3469__auto__ = _ == null ? null : _;
    return function() {
      var or__3943__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _)
  }
};
cljs.core.async.Mult = {};
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_)
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m)
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if(typeof cljs.core.async.t9391 !== "undefined") {
    }else {
      goog.provide("cljs.core.async.t9391");
      cljs.core.async.t9391 = function(cs, ch, mult, meta9392) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta9392 = meta9392;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216
      };
      cljs.core.async.t9391.cljs$lang$type = true;
      cljs.core.async.t9391.cljs$lang$ctorStr = "cljs.core.async/t9391";
      cljs.core.async.t9391.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
          return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t9391")
        }
      }(cs);
      cljs.core.async.t9391.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t9391.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null
        }
      }(cs);
      cljs.core.async.t9391.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null
        }
      }(cs);
      cljs.core.async.t9391.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null
        }
      }(cs);
      cljs.core.async.t9391.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t9391.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          return self__.ch
        }
      }(cs);
      cljs.core.async.t9391.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_9393) {
          var self__ = this;
          return self__.meta9392
        }
      }(cs);
      cljs.core.async.t9391.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_9393, meta9392__$1) {
          var self__ = this;
          return new cljs.core.async.t9391(self__.cs, self__.ch, self__.mult, meta9392__$1)
        }
      }(cs);
      cljs.core.async.__GT_t9391 = function(cs) {
        return function __GT_t9391(cs__$1, ch__$1, mult__$1, meta9392) {
          return new cljs.core.async.t9391(cs__$1, ch__$1, mult__$1, meta9392)
        }
      }(cs)
    }
    return new cljs.core.async.t9391(cs, ch, mult, null)
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if(cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true)
      }else {
        return null
      }
    }
  }(cs, m, dchan, dctr);
  var c__5125__auto___9603 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5126__auto__ = function() {
      var switch__5075__auto__ = function(state_9521) {
        var state_val_9522 = state_9521[1];
        if(state_val_9522 === 32) {
          try {
            var inst_9396 = state_9521[5];
            var inst_9472 = state_9521[6];
            var inst_9478 = cljs.core.async.put_BANG_.call(null, inst_9472, inst_9396, done);
            var state_9521__$1 = state_9521;
            var statearr_9525_9604 = state_9521__$1;
            statearr_9525_9604[2] = inst_9478;
            statearr_9525_9604[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }catch(e9523) {
            if(e9523 instanceof Object) {
              var ex__5069__auto__ = e9523;
              var statearr_9524_9605 = state_9521;
              statearr_9524_9605[1] = 31;
              statearr_9524_9605[2] = ex__5069__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e9523;
              }else {
                return null
              }
            }
          }
        }else {
          if(state_val_9522 === 1) {
            var state_9521__$1 = state_9521;
            var statearr_9526_9606 = state_9521__$1;
            statearr_9526_9606[2] = null;
            statearr_9526_9606[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_9522 === 33) {
              var inst_9484 = state_9521[7];
              var inst_9486 = cljs.core.chunked_seq_QMARK_.call(null, inst_9484);
              var state_9521__$1 = state_9521;
              if(inst_9486) {
                var statearr_9527_9607 = state_9521__$1;
                statearr_9527_9607[1] = 36
              }else {
                var statearr_9528_9608 = state_9521__$1;
                statearr_9528_9608[1] = 37
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_9522 === 2) {
                var state_9521__$1 = state_9521;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9521__$1, 4, ch)
              }else {
                if(state_val_9522 === 34) {
                  var state_9521__$1 = state_9521;
                  var statearr_9529_9609 = state_9521__$1;
                  statearr_9529_9609[2] = null;
                  statearr_9529_9609[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_9522 === 3) {
                    var inst_9519 = state_9521[2];
                    var state_9521__$1 = state_9521;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9521__$1, inst_9519)
                  }else {
                    if(state_val_9522 === 35) {
                      var inst_9508 = state_9521[2];
                      var state_9521__$1 = state_9521;
                      var statearr_9530_9610 = state_9521__$1;
                      statearr_9530_9610[2] = inst_9508;
                      statearr_9530_9610[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_9522 === 4) {
                        var inst_9396 = state_9521[5];
                        var inst_9396__$1 = state_9521[2];
                        var inst_9397 = inst_9396__$1 == null;
                        var state_9521__$1 = function() {
                          var statearr_9531 = state_9521;
                          statearr_9531[5] = inst_9396__$1;
                          return statearr_9531
                        }();
                        if(cljs.core.truth_(inst_9397)) {
                          var statearr_9532_9611 = state_9521__$1;
                          statearr_9532_9611[1] = 5
                        }else {
                          var statearr_9533_9612 = state_9521__$1;
                          statearr_9533_9612[1] = 6
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_9522 === 36) {
                          var inst_9484 = state_9521[7];
                          var inst_9488 = cljs.core.chunk_first.call(null, inst_9484);
                          var inst_9489 = cljs.core.chunk_rest.call(null, inst_9484);
                          var inst_9490 = cljs.core.count.call(null, inst_9488);
                          var inst_9464 = inst_9489;
                          var inst_9465 = inst_9488;
                          var inst_9466 = inst_9490;
                          var inst_9467 = 0;
                          var state_9521__$1 = function() {
                            var statearr_9534 = state_9521;
                            statearr_9534[8] = inst_9466;
                            statearr_9534[9] = inst_9467;
                            statearr_9534[10] = inst_9465;
                            statearr_9534[11] = inst_9464;
                            return statearr_9534
                          }();
                          var statearr_9535_9613 = state_9521__$1;
                          statearr_9535_9613[2] = null;
                          statearr_9535_9613[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_9522 === 5) {
                            var inst_9403 = cljs.core.deref.call(null, cs);
                            var inst_9404 = cljs.core.seq.call(null, inst_9403);
                            var inst_9405 = inst_9404;
                            var inst_9406 = null;
                            var inst_9407 = 0;
                            var inst_9408 = 0;
                            var state_9521__$1 = function() {
                              var statearr_9536 = state_9521;
                              statearr_9536[12] = inst_9408;
                              statearr_9536[13] = inst_9407;
                              statearr_9536[14] = inst_9406;
                              statearr_9536[15] = inst_9405;
                              return statearr_9536
                            }();
                            var statearr_9537_9614 = state_9521__$1;
                            statearr_9537_9614[2] = null;
                            statearr_9537_9614[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_9522 === 37) {
                              var inst_9484 = state_9521[7];
                              var inst_9493 = cljs.core.first.call(null, inst_9484);
                              var state_9521__$1 = function() {
                                var statearr_9538 = state_9521;
                                statearr_9538[16] = inst_9493;
                                return statearr_9538
                              }();
                              var statearr_9539_9615 = state_9521__$1;
                              statearr_9539_9615[2] = null;
                              statearr_9539_9615[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_9522 === 6) {
                                var inst_9455 = cljs.core.deref.call(null, cs);
                                var inst_9456 = cljs.core.keys.call(null, inst_9455);
                                var inst_9457 = cljs.core.count.call(null, inst_9456);
                                var inst_9458 = cljs.core.reset_BANG_.call(null, dctr, inst_9457);
                                var inst_9463 = cljs.core.seq.call(null, inst_9456);
                                var inst_9464 = inst_9463;
                                var inst_9465 = null;
                                var inst_9466 = 0;
                                var inst_9467 = 0;
                                var state_9521__$1 = function() {
                                  var statearr_9540 = state_9521;
                                  statearr_9540[8] = inst_9466;
                                  statearr_9540[9] = inst_9467;
                                  statearr_9540[10] = inst_9465;
                                  statearr_9540[11] = inst_9464;
                                  statearr_9540[17] = inst_9458;
                                  return statearr_9540
                                }();
                                var statearr_9541_9616 = state_9521__$1;
                                statearr_9541_9616[2] = null;
                                statearr_9541_9616[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_9522 === 38) {
                                  var inst_9505 = state_9521[2];
                                  var state_9521__$1 = state_9521;
                                  var statearr_9542_9617 = state_9521__$1;
                                  statearr_9542_9617[2] = inst_9505;
                                  statearr_9542_9617[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_9522 === 7) {
                                    var inst_9517 = state_9521[2];
                                    var state_9521__$1 = state_9521;
                                    var statearr_9543_9618 = state_9521__$1;
                                    statearr_9543_9618[2] = inst_9517;
                                    statearr_9543_9618[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_9522 === 39) {
                                      var inst_9484 = state_9521[7];
                                      var inst_9501 = state_9521[2];
                                      var inst_9502 = cljs.core.next.call(null, inst_9484);
                                      var inst_9464 = inst_9502;
                                      var inst_9465 = null;
                                      var inst_9466 = 0;
                                      var inst_9467 = 0;
                                      var state_9521__$1 = function() {
                                        var statearr_9544 = state_9521;
                                        statearr_9544[18] = inst_9501;
                                        statearr_9544[8] = inst_9466;
                                        statearr_9544[9] = inst_9467;
                                        statearr_9544[10] = inst_9465;
                                        statearr_9544[11] = inst_9464;
                                        return statearr_9544
                                      }();
                                      var statearr_9545_9619 = state_9521__$1;
                                      statearr_9545_9619[2] = null;
                                      statearr_9545_9619[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_9522 === 8) {
                                        var inst_9408 = state_9521[12];
                                        var inst_9407 = state_9521[13];
                                        var inst_9410 = inst_9408 < inst_9407;
                                        var inst_9411 = inst_9410;
                                        var state_9521__$1 = state_9521;
                                        if(cljs.core.truth_(inst_9411)) {
                                          var statearr_9546_9620 = state_9521__$1;
                                          statearr_9546_9620[1] = 10
                                        }else {
                                          var statearr_9547_9621 = state_9521__$1;
                                          statearr_9547_9621[1] = 11
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_9522 === 40) {
                                          var inst_9493 = state_9521[16];
                                          var inst_9494 = state_9521[2];
                                          var inst_9495 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_9496 = cljs.core.async.untap_STAR_.call(null, m, inst_9493);
                                          var state_9521__$1 = function() {
                                            var statearr_9548 = state_9521;
                                            statearr_9548[19] = inst_9494;
                                            statearr_9548[20] = inst_9495;
                                            return statearr_9548
                                          }();
                                          var statearr_9549_9622 = state_9521__$1;
                                          statearr_9549_9622[2] = inst_9496;
                                          statearr_9549_9622[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_9522 === 9) {
                                            var inst_9453 = state_9521[2];
                                            var state_9521__$1 = state_9521;
                                            var statearr_9550_9623 = state_9521__$1;
                                            statearr_9550_9623[2] = inst_9453;
                                            statearr_9550_9623[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_9522 === 41) {
                                              try {
                                                var inst_9493 = state_9521[16];
                                                var inst_9396 = state_9521[5];
                                                var inst_9499 = cljs.core.async.put_BANG_.call(null, inst_9493, inst_9396, done);
                                                var state_9521__$1 = state_9521;
                                                var statearr_9553_9624 = state_9521__$1;
                                                statearr_9553_9624[2] = inst_9499;
                                                statearr_9553_9624[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }catch(e9551) {
                                                if(e9551 instanceof Object) {
                                                  var ex__5069__auto__ = e9551;
                                                  var statearr_9552_9625 = state_9521;
                                                  statearr_9552_9625[1] = 40;
                                                  statearr_9552_9625[2] = ex__5069__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e9551;
                                                  }else {
                                                    return null
                                                  }
                                                }
                                              }
                                            }else {
                                              if(state_val_9522 === 10) {
                                                var inst_9408 = state_9521[12];
                                                var inst_9406 = state_9521[14];
                                                var inst_9414 = cljs.core._nth.call(null, inst_9406, inst_9408);
                                                var inst_9415 = cljs.core.nth.call(null, inst_9414, 0, null);
                                                var inst_9416 = cljs.core.nth.call(null, inst_9414, 1, null);
                                                var state_9521__$1 = function() {
                                                  var statearr_9554 = state_9521;
                                                  statearr_9554[21] = inst_9415;
                                                  return statearr_9554
                                                }();
                                                if(cljs.core.truth_(inst_9416)) {
                                                  var statearr_9555_9626 = state_9521__$1;
                                                  statearr_9555_9626[1] = 13
                                                }else {
                                                  var statearr_9556_9627 = state_9521__$1;
                                                  statearr_9556_9627[1] = 14
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_9522 === 42) {
                                                  var inst_9514 = state_9521[2];
                                                  var state_9521__$1 = function() {
                                                    var statearr_9557 = state_9521;
                                                    statearr_9557[22] = inst_9514;
                                                    return statearr_9557
                                                  }();
                                                  var statearr_9558_9628 = state_9521__$1;
                                                  statearr_9558_9628[2] = null;
                                                  statearr_9558_9628[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_9522 === 11) {
                                                    var inst_9425 = state_9521[23];
                                                    var inst_9405 = state_9521[15];
                                                    var inst_9425__$1 = cljs.core.seq.call(null, inst_9405);
                                                    var state_9521__$1 = function() {
                                                      var statearr_9559 = state_9521;
                                                      statearr_9559[23] = inst_9425__$1;
                                                      return statearr_9559
                                                    }();
                                                    if(inst_9425__$1) {
                                                      var statearr_9560_9629 = state_9521__$1;
                                                      statearr_9560_9629[1] = 16
                                                    }else {
                                                      var statearr_9561_9630 = state_9521__$1;
                                                      statearr_9561_9630[1] = 17
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_9522 === 12) {
                                                      var inst_9451 = state_9521[2];
                                                      var state_9521__$1 = state_9521;
                                                      var statearr_9562_9631 = state_9521__$1;
                                                      statearr_9562_9631[2] = inst_9451;
                                                      statearr_9562_9631[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_9522 === 13) {
                                                        var inst_9415 = state_9521[21];
                                                        var inst_9418 = cljs.core.async.close_BANG_.call(null, inst_9415);
                                                        var state_9521__$1 = state_9521;
                                                        var statearr_9566_9632 = state_9521__$1;
                                                        statearr_9566_9632[2] = inst_9418;
                                                        statearr_9566_9632[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_9522 === 14) {
                                                          var state_9521__$1 = state_9521;
                                                          var statearr_9567_9633 = state_9521__$1;
                                                          statearr_9567_9633[2] = null;
                                                          statearr_9567_9633[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                        }else {
                                                          if(state_val_9522 === 15) {
                                                            var inst_9408 = state_9521[12];
                                                            var inst_9407 = state_9521[13];
                                                            var inst_9406 = state_9521[14];
                                                            var inst_9405 = state_9521[15];
                                                            var inst_9421 = state_9521[2];
                                                            var inst_9422 = inst_9408 + 1;
                                                            var tmp9563 = inst_9407;
                                                            var tmp9564 = inst_9406;
                                                            var tmp9565 = inst_9405;
                                                            var inst_9405__$1 = tmp9565;
                                                            var inst_9406__$1 = tmp9564;
                                                            var inst_9407__$1 = tmp9563;
                                                            var inst_9408__$1 = inst_9422;
                                                            var state_9521__$1 = function() {
                                                              var statearr_9568 = state_9521;
                                                              statearr_9568[24] = inst_9421;
                                                              statearr_9568[12] = inst_9408__$1;
                                                              statearr_9568[13] = inst_9407__$1;
                                                              statearr_9568[14] = inst_9406__$1;
                                                              statearr_9568[15] = inst_9405__$1;
                                                              return statearr_9568
                                                            }();
                                                            var statearr_9569_9634 = state_9521__$1;
                                                            statearr_9569_9634[2] = null;
                                                            statearr_9569_9634[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                          }else {
                                                            if(state_val_9522 === 16) {
                                                              var inst_9425 = state_9521[23];
                                                              var inst_9427 = cljs.core.chunked_seq_QMARK_.call(null, inst_9425);
                                                              var state_9521__$1 = state_9521;
                                                              if(inst_9427) {
                                                                var statearr_9570_9635 = state_9521__$1;
                                                                statearr_9570_9635[1] = 19
                                                              }else {
                                                                var statearr_9571_9636 = state_9521__$1;
                                                                statearr_9571_9636[1] = 20
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(state_val_9522 === 17) {
                                                                var state_9521__$1 = state_9521;
                                                                var statearr_9572_9637 = state_9521__$1;
                                                                statearr_9572_9637[2] = null;
                                                                statearr_9572_9637[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(state_val_9522 === 18) {
                                                                  var inst_9449 = state_9521[2];
                                                                  var state_9521__$1 = state_9521;
                                                                  var statearr_9573_9638 = state_9521__$1;
                                                                  statearr_9573_9638[2] = inst_9449;
                                                                  statearr_9573_9638[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                }else {
                                                                  if(state_val_9522 === 19) {
                                                                    var inst_9425 = state_9521[23];
                                                                    var inst_9429 = cljs.core.chunk_first.call(null, inst_9425);
                                                                    var inst_9430 = cljs.core.chunk_rest.call(null, inst_9425);
                                                                    var inst_9431 = cljs.core.count.call(null, inst_9429);
                                                                    var inst_9405 = inst_9430;
                                                                    var inst_9406 = inst_9429;
                                                                    var inst_9407 = inst_9431;
                                                                    var inst_9408 = 0;
                                                                    var state_9521__$1 = function() {
                                                                      var statearr_9574 = state_9521;
                                                                      statearr_9574[12] = inst_9408;
                                                                      statearr_9574[13] = inst_9407;
                                                                      statearr_9574[14] = inst_9406;
                                                                      statearr_9574[15] = inst_9405;
                                                                      return statearr_9574
                                                                    }();
                                                                    var statearr_9575_9639 = state_9521__$1;
                                                                    statearr_9575_9639[2] = null;
                                                                    statearr_9575_9639[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                  }else {
                                                                    if(state_val_9522 === 20) {
                                                                      var inst_9425 = state_9521[23];
                                                                      var inst_9435 = cljs.core.first.call(null, inst_9425);
                                                                      var inst_9436 = cljs.core.nth.call(null, inst_9435, 0, null);
                                                                      var inst_9437 = cljs.core.nth.call(null, inst_9435, 1, null);
                                                                      var state_9521__$1 = function() {
                                                                        var statearr_9576 = state_9521;
                                                                        statearr_9576[25] = inst_9436;
                                                                        return statearr_9576
                                                                      }();
                                                                      if(cljs.core.truth_(inst_9437)) {
                                                                        var statearr_9577_9640 = state_9521__$1;
                                                                        statearr_9577_9640[1] = 22
                                                                      }else {
                                                                        var statearr_9578_9641 = state_9521__$1;
                                                                        statearr_9578_9641[1] = 23
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                    }else {
                                                                      if(state_val_9522 === 21) {
                                                                        var inst_9446 = state_9521[2];
                                                                        var state_9521__$1 = state_9521;
                                                                        var statearr_9579_9642 = state_9521__$1;
                                                                        statearr_9579_9642[2] = inst_9446;
                                                                        statearr_9579_9642[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                      }else {
                                                                        if(state_val_9522 === 22) {
                                                                          var inst_9436 = state_9521[25];
                                                                          var inst_9439 = cljs.core.async.close_BANG_.call(null, inst_9436);
                                                                          var state_9521__$1 = state_9521;
                                                                          var statearr_9580_9643 = state_9521__$1;
                                                                          statearr_9580_9643[2] = inst_9439;
                                                                          statearr_9580_9643[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                        }else {
                                                                          if(state_val_9522 === 23) {
                                                                            var state_9521__$1 = state_9521;
                                                                            var statearr_9581_9644 = state_9521__$1;
                                                                            statearr_9581_9644[2] = null;
                                                                            statearr_9581_9644[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                          }else {
                                                                            if(state_val_9522 === 24) {
                                                                              var inst_9425 = state_9521[23];
                                                                              var inst_9442 = state_9521[2];
                                                                              var inst_9443 = cljs.core.next.call(null, inst_9425);
                                                                              var inst_9405 = inst_9443;
                                                                              var inst_9406 = null;
                                                                              var inst_9407 = 0;
                                                                              var inst_9408 = 0;
                                                                              var state_9521__$1 = function() {
                                                                                var statearr_9582 = state_9521;
                                                                                statearr_9582[12] = inst_9408;
                                                                                statearr_9582[26] = inst_9442;
                                                                                statearr_9582[13] = inst_9407;
                                                                                statearr_9582[14] = inst_9406;
                                                                                statearr_9582[15] = inst_9405;
                                                                                return statearr_9582
                                                                              }();
                                                                              var statearr_9583_9645 = state_9521__$1;
                                                                              statearr_9583_9645[2] = null;
                                                                              statearr_9583_9645[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                            }else {
                                                                              if(state_val_9522 === 25) {
                                                                                var inst_9466 = state_9521[8];
                                                                                var inst_9467 = state_9521[9];
                                                                                var inst_9469 = inst_9467 < inst_9466;
                                                                                var inst_9470 = inst_9469;
                                                                                var state_9521__$1 = state_9521;
                                                                                if(cljs.core.truth_(inst_9470)) {
                                                                                  var statearr_9584_9646 = state_9521__$1;
                                                                                  statearr_9584_9646[1] = 27
                                                                                }else {
                                                                                  var statearr_9585_9647 = state_9521__$1;
                                                                                  statearr_9585_9647[1] = 28
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                              }else {
                                                                                if(state_val_9522 === 26) {
                                                                                  var inst_9512 = state_9521[2];
                                                                                  var state_9521__$1 = function() {
                                                                                    var statearr_9586 = state_9521;
                                                                                    statearr_9586[27] = inst_9512;
                                                                                    return statearr_9586
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9521__$1, 42, dchan)
                                                                                }else {
                                                                                  if(state_val_9522 === 27) {
                                                                                    var inst_9467 = state_9521[9];
                                                                                    var inst_9465 = state_9521[10];
                                                                                    var inst_9472 = cljs.core._nth.call(null, inst_9465, inst_9467);
                                                                                    var state_9521__$1 = function() {
                                                                                      var statearr_9587 = state_9521;
                                                                                      statearr_9587[6] = inst_9472;
                                                                                      return statearr_9587
                                                                                    }();
                                                                                    var statearr_9588_9648 = state_9521__$1;
                                                                                    statearr_9588_9648[2] = null;
                                                                                    statearr_9588_9648[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                  }else {
                                                                                    if(state_val_9522 === 28) {
                                                                                      var inst_9464 = state_9521[11];
                                                                                      var inst_9484 = state_9521[7];
                                                                                      var inst_9484__$1 = cljs.core.seq.call(null, inst_9464);
                                                                                      var state_9521__$1 = function() {
                                                                                        var statearr_9592 = state_9521;
                                                                                        statearr_9592[7] = inst_9484__$1;
                                                                                        return statearr_9592
                                                                                      }();
                                                                                      if(inst_9484__$1) {
                                                                                        var statearr_9593_9649 = state_9521__$1;
                                                                                        statearr_9593_9649[1] = 33
                                                                                      }else {
                                                                                        var statearr_9594_9650 = state_9521__$1;
                                                                                        statearr_9594_9650[1] = 34
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                    }else {
                                                                                      if(state_val_9522 === 29) {
                                                                                        var inst_9510 = state_9521[2];
                                                                                        var state_9521__$1 = state_9521;
                                                                                        var statearr_9595_9651 = state_9521__$1;
                                                                                        statearr_9595_9651[2] = inst_9510;
                                                                                        statearr_9595_9651[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                      }else {
                                                                                        if(state_val_9522 === 30) {
                                                                                          var inst_9466 = state_9521[8];
                                                                                          var inst_9467 = state_9521[9];
                                                                                          var inst_9465 = state_9521[10];
                                                                                          var inst_9464 = state_9521[11];
                                                                                          var inst_9480 = state_9521[2];
                                                                                          var inst_9481 = inst_9467 + 1;
                                                                                          var tmp9589 = inst_9466;
                                                                                          var tmp9590 = inst_9465;
                                                                                          var tmp9591 = inst_9464;
                                                                                          var inst_9464__$1 = tmp9591;
                                                                                          var inst_9465__$1 = tmp9590;
                                                                                          var inst_9466__$1 = tmp9589;
                                                                                          var inst_9467__$1 = inst_9481;
                                                                                          var state_9521__$1 = function() {
                                                                                            var statearr_9596 = state_9521;
                                                                                            statearr_9596[8] = inst_9466__$1;
                                                                                            statearr_9596[9] = inst_9467__$1;
                                                                                            statearr_9596[10] = inst_9465__$1;
                                                                                            statearr_9596[11] = inst_9464__$1;
                                                                                            statearr_9596[28] = inst_9480;
                                                                                            return statearr_9596
                                                                                          }();
                                                                                          var statearr_9597_9652 = state_9521__$1;
                                                                                          statearr_9597_9652[2] = null;
                                                                                          statearr_9597_9652[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                        }else {
                                                                                          if(state_val_9522 === 31) {
                                                                                            var inst_9472 = state_9521[6];
                                                                                            var inst_9473 = state_9521[2];
                                                                                            var inst_9474 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_9475 = cljs.core.async.untap_STAR_.call(null, m, inst_9472);
                                                                                            var state_9521__$1 = function() {
                                                                                              var statearr_9598 = state_9521;
                                                                                              statearr_9598[29] = inst_9474;
                                                                                              statearr_9598[30] = inst_9473;
                                                                                              return statearr_9598
                                                                                            }();
                                                                                            var statearr_9599_9653 = state_9521__$1;
                                                                                            statearr_9599_9653[2] = inst_9475;
                                                                                            statearr_9599_9653[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                          }else {
                                                                                            return null
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5075__auto__) {
        return function() {
          var state_machine__5076__auto__ = null;
          var state_machine__5076__auto____0 = function() {
            var statearr_9601 = new Array(31);
            statearr_9601[0] = state_machine__5076__auto__;
            statearr_9601[1] = 1;
            return statearr_9601
          };
          var state_machine__5076__auto____1 = function(state_9521) {
            while(true) {
              var result__5077__auto__ = switch__5075__auto__.call(null, state_9521);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5077__auto__
              }
              break
            }
          };
          state_machine__5076__auto__ = function(state_9521) {
            switch(arguments.length) {
              case 0:
                return state_machine__5076__auto____0.call(this);
              case 1:
                return state_machine__5076__auto____1.call(this, state_9521)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
          return state_machine__5076__auto__
        }()
      }(switch__5075__auto__)
    }();
    var state__5127__auto__ = function() {
      var statearr_9602 = f__5126__auto__.call(null);
      statearr_9602[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___9603;
      return statearr_9602
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
  });
  return m
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true)
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch)
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult)
};
cljs.core.async.Mix = {};
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m)
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map)
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if(function() {
    var and__3941__auto__ = m;
    if(and__3941__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode)
  }else {
    var x__3469__auto__ = m == null ? null : m;
    return function() {
      var or__3943__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode)
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = cljs.core.PersistentHashSet.fromArray([new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], true);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true)
    }
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if(cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c)
          }else {
            return ret
          }
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs)
    }
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, function() {
        var and__3941__auto__ = cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424));
        if(and__3941__auto__) {
          return!cljs.core.empty_QMARK_.call(null, solos)
        }else {
          return and__3941__auto__
        }
      }() ? cljs.core.vec.call(null, solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], true)
    }
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if(typeof cljs.core.async.t9774 !== "undefined") {
    }else {
      goog.provide("cljs.core.async.t9774");
      cljs.core.async.t9774 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta9775) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta9775 = meta9775;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216
      };
      cljs.core.async.t9774.cljs$lang$type = true;
      cljs.core.async.t9774.cljs$lang$ctorStr = "cljs.core.async/t9774";
      cljs.core.async.t9774.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
          return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t9774")
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t9774.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          if(cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          }else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t9774.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          return self__.out
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_9776) {
          var self__ = this;
          return self__.meta9775
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t9774.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_9776, meta9775__$1) {
          var self__ = this;
          return new cljs.core.async.t9774(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta9775__$1)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t9774 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t9774(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta9775) {
          return new cljs.core.async.t9774(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta9775)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state)
    }
    return new cljs.core.async.t9774(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null)
  }();
  var c__5125__auto___9894 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5126__auto__ = function() {
      var switch__5075__auto__ = function(state_9847) {
        var state_val_9848 = state_9847[1];
        if(state_val_9848 === 1) {
          var inst_9780 = state_9847[5];
          var inst_9780__$1 = calc_state.call(null);
          var inst_9781 = cljs.core.seq_QMARK_.call(null, inst_9780__$1);
          var state_9847__$1 = function() {
            var statearr_9849 = state_9847;
            statearr_9849[5] = inst_9780__$1;
            return statearr_9849
          }();
          if(inst_9781) {
            var statearr_9850_9895 = state_9847__$1;
            statearr_9850_9895[1] = 2
          }else {
            var statearr_9851_9896 = state_9847__$1;
            statearr_9851_9896[1] = 3
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_9848 === 2) {
            var inst_9780 = state_9847[5];
            var inst_9783 = cljs.core.apply.call(null, cljs.core.hash_map, inst_9780);
            var state_9847__$1 = state_9847;
            var statearr_9852_9897 = state_9847__$1;
            statearr_9852_9897[2] = inst_9783;
            statearr_9852_9897[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_9848 === 3) {
              var inst_9780 = state_9847[5];
              var state_9847__$1 = state_9847;
              var statearr_9853_9898 = state_9847__$1;
              statearr_9853_9898[2] = inst_9780;
              statearr_9853_9898[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_9848 === 4) {
                var inst_9780 = state_9847[5];
                var inst_9786 = state_9847[2];
                var inst_9787 = cljs.core.get.call(null, inst_9786, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_9788 = cljs.core.get.call(null, inst_9786, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_9789 = cljs.core.get.call(null, inst_9786, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_9790 = inst_9780;
                var state_9847__$1 = function() {
                  var statearr_9854 = state_9847;
                  statearr_9854[6] = inst_9787;
                  statearr_9854[7] = inst_9788;
                  statearr_9854[8] = inst_9789;
                  statearr_9854[9] = inst_9790;
                  return statearr_9854
                }();
                var statearr_9855_9899 = state_9847__$1;
                statearr_9855_9899[2] = null;
                statearr_9855_9899[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_9848 === 5) {
                  var inst_9790 = state_9847[9];
                  var inst_9793 = cljs.core.seq_QMARK_.call(null, inst_9790);
                  var state_9847__$1 = state_9847;
                  if(inst_9793) {
                    var statearr_9856_9900 = state_9847__$1;
                    statearr_9856_9900[1] = 7
                  }else {
                    var statearr_9857_9901 = state_9847__$1;
                    statearr_9857_9901[1] = 8
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_9848 === 6) {
                    var inst_9845 = state_9847[2];
                    var state_9847__$1 = state_9847;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9847__$1, inst_9845)
                  }else {
                    if(state_val_9848 === 7) {
                      var inst_9790 = state_9847[9];
                      var inst_9795 = cljs.core.apply.call(null, cljs.core.hash_map, inst_9790);
                      var state_9847__$1 = state_9847;
                      var statearr_9858_9902 = state_9847__$1;
                      statearr_9858_9902[2] = inst_9795;
                      statearr_9858_9902[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_9848 === 8) {
                        var inst_9790 = state_9847[9];
                        var state_9847__$1 = state_9847;
                        var statearr_9859_9903 = state_9847__$1;
                        statearr_9859_9903[2] = inst_9790;
                        statearr_9859_9903[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_9848 === 9) {
                          var inst_9798 = state_9847[10];
                          var inst_9798__$1 = state_9847[2];
                          var inst_9799 = cljs.core.get.call(null, inst_9798__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_9800 = cljs.core.get.call(null, inst_9798__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_9801 = cljs.core.get.call(null, inst_9798__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_9847__$1 = function() {
                            var statearr_9860 = state_9847;
                            statearr_9860[10] = inst_9798__$1;
                            statearr_9860[11] = inst_9801;
                            statearr_9860[12] = inst_9800;
                            return statearr_9860
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_9847__$1, 10, inst_9799)
                        }else {
                          if(state_val_9848 === 10) {
                            var inst_9805 = state_9847[13];
                            var inst_9807 = state_9847[14];
                            var inst_9804 = state_9847[2];
                            var inst_9805__$1 = cljs.core.nth.call(null, inst_9804, 0, null);
                            var inst_9806 = cljs.core.nth.call(null, inst_9804, 1, null);
                            var inst_9807__$1 = inst_9805__$1 == null;
                            var state_9847__$1 = function() {
                              var statearr_9861 = state_9847;
                              statearr_9861[13] = inst_9805__$1;
                              statearr_9861[15] = inst_9806;
                              statearr_9861[14] = inst_9807__$1;
                              return statearr_9861
                            }();
                            if(cljs.core.truth_(inst_9807__$1)) {
                              var statearr_9862_9904 = state_9847__$1;
                              statearr_9862_9904[1] = 11
                            }else {
                              var statearr_9863_9905 = state_9847__$1;
                              statearr_9863_9905[1] = 12
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_9848 === 11) {
                              var inst_9807 = state_9847[14];
                              var state_9847__$1 = state_9847;
                              var statearr_9864_9906 = state_9847__$1;
                              statearr_9864_9906[2] = inst_9807;
                              statearr_9864_9906[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_9848 === 12) {
                                var inst_9806 = state_9847[15];
                                var inst_9810 = cljs.core._EQ_.call(null, inst_9806, change);
                                var state_9847__$1 = state_9847;
                                var statearr_9865_9907 = state_9847__$1;
                                statearr_9865_9907[2] = inst_9810;
                                statearr_9865_9907[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_9848 === 13) {
                                  var inst_9812 = state_9847[2];
                                  var state_9847__$1 = state_9847;
                                  if(cljs.core.truth_(inst_9812)) {
                                    var statearr_9866_9908 = state_9847__$1;
                                    statearr_9866_9908[1] = 14
                                  }else {
                                    var statearr_9867_9909 = state_9847__$1;
                                    statearr_9867_9909[1] = 15
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_9848 === 14) {
                                    var inst_9805 = state_9847[13];
                                    var inst_9814 = inst_9805 == null;
                                    var state_9847__$1 = state_9847;
                                    if(cljs.core.truth_(inst_9814)) {
                                      var statearr_9868_9910 = state_9847__$1;
                                      statearr_9868_9910[1] = 17
                                    }else {
                                      var statearr_9869_9911 = state_9847__$1;
                                      statearr_9869_9911[1] = 18
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_9848 === 15) {
                                      var inst_9823 = state_9847[16];
                                      var inst_9806 = state_9847[15];
                                      var inst_9801 = state_9847[11];
                                      var inst_9823__$1 = inst_9801.call(null, inst_9806);
                                      var state_9847__$1 = function() {
                                        var statearr_9870 = state_9847;
                                        statearr_9870[16] = inst_9823__$1;
                                        return statearr_9870
                                      }();
                                      if(cljs.core.truth_(inst_9823__$1)) {
                                        var statearr_9871_9912 = state_9847__$1;
                                        statearr_9871_9912[1] = 20
                                      }else {
                                        var statearr_9872_9913 = state_9847__$1;
                                        statearr_9872_9913[1] = 21
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_9848 === 16) {
                                        var inst_9843 = state_9847[2];
                                        var state_9847__$1 = state_9847;
                                        var statearr_9873_9914 = state_9847__$1;
                                        statearr_9873_9914[2] = inst_9843;
                                        statearr_9873_9914[1] = 6;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_9848 === 17) {
                                          var inst_9806 = state_9847[15];
                                          var inst_9816 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_9806);
                                          var state_9847__$1 = state_9847;
                                          var statearr_9874_9915 = state_9847__$1;
                                          statearr_9874_9915[2] = inst_9816;
                                          statearr_9874_9915[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_9848 === 18) {
                                            var state_9847__$1 = state_9847;
                                            var statearr_9875_9916 = state_9847__$1;
                                            statearr_9875_9916[2] = null;
                                            statearr_9875_9916[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_9848 === 19) {
                                              var inst_9819 = state_9847[2];
                                              var inst_9820 = calc_state.call(null);
                                              var inst_9790 = inst_9820;
                                              var state_9847__$1 = function() {
                                                var statearr_9876 = state_9847;
                                                statearr_9876[17] = inst_9819;
                                                statearr_9876[9] = inst_9790;
                                                return statearr_9876
                                              }();
                                              var statearr_9877_9917 = state_9847__$1;
                                              statearr_9877_9917[2] = null;
                                              statearr_9877_9917[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_9848 === 20) {
                                                var inst_9823 = state_9847[16];
                                                var state_9847__$1 = state_9847;
                                                var statearr_9878_9918 = state_9847__$1;
                                                statearr_9878_9918[2] = inst_9823;
                                                statearr_9878_9918[1] = 22;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_9848 === 21) {
                                                  var inst_9826 = state_9847[18];
                                                  var inst_9801 = state_9847[11];
                                                  var inst_9826__$1 = cljs.core.empty_QMARK_.call(null, inst_9801);
                                                  var state_9847__$1 = function() {
                                                    var statearr_9879 = state_9847;
                                                    statearr_9879[18] = inst_9826__$1;
                                                    return statearr_9879
                                                  }();
                                                  if(inst_9826__$1) {
                                                    var statearr_9880_9919 = state_9847__$1;
                                                    statearr_9880_9919[1] = 23
                                                  }else {
                                                    var statearr_9881_9920 = state_9847__$1;
                                                    statearr_9881_9920[1] = 24
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_9848 === 22) {
                                                    var inst_9834 = state_9847[2];
                                                    var state_9847__$1 = state_9847;
                                                    if(cljs.core.truth_(inst_9834)) {
                                                      var statearr_9882_9921 = state_9847__$1;
                                                      statearr_9882_9921[1] = 26
                                                    }else {
                                                      var statearr_9883_9922 = state_9847__$1;
                                                      statearr_9883_9922[1] = 27
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_9848 === 23) {
                                                      var inst_9806 = state_9847[15];
                                                      var inst_9800 = state_9847[12];
                                                      var inst_9828 = inst_9800.call(null, inst_9806);
                                                      var inst_9829 = cljs.core.not.call(null, inst_9828);
                                                      var state_9847__$1 = state_9847;
                                                      var statearr_9884_9923 = state_9847__$1;
                                                      statearr_9884_9923[2] = inst_9829;
                                                      statearr_9884_9923[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_9848 === 24) {
                                                        var inst_9826 = state_9847[18];
                                                        var state_9847__$1 = state_9847;
                                                        var statearr_9885_9924 = state_9847__$1;
                                                        statearr_9885_9924[2] = inst_9826;
                                                        statearr_9885_9924[1] = 25;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_9848 === 25) {
                                                          var inst_9832 = state_9847[2];
                                                          var state_9847__$1 = state_9847;
                                                          var statearr_9886_9925 = state_9847__$1;
                                                          statearr_9886_9925[2] = inst_9832;
                                                          statearr_9886_9925[1] = 22;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                        }else {
                                                          if(state_val_9848 === 26) {
                                                            var inst_9805 = state_9847[13];
                                                            var state_9847__$1 = state_9847;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9847__$1, 29, out, inst_9805)
                                                          }else {
                                                            if(state_val_9848 === 27) {
                                                              var state_9847__$1 = state_9847;
                                                              var statearr_9887_9926 = state_9847__$1;
                                                              statearr_9887_9926[2] = null;
                                                              statearr_9887_9926[1] = 28;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(state_val_9848 === 28) {
                                                                var inst_9798 = state_9847[10];
                                                                var inst_9840 = state_9847[2];
                                                                var inst_9790 = inst_9798;
                                                                var state_9847__$1 = function() {
                                                                  var statearr_9888 = state_9847;
                                                                  statearr_9888[9] = inst_9790;
                                                                  statearr_9888[19] = inst_9840;
                                                                  return statearr_9888
                                                                }();
                                                                var statearr_9889_9927 = state_9847__$1;
                                                                statearr_9889_9927[2] = null;
                                                                statearr_9889_9927[1] = 5;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(state_val_9848 === 29) {
                                                                  var inst_9837 = state_9847[2];
                                                                  var state_9847__$1 = state_9847;
                                                                  var statearr_9890_9928 = state_9847__$1;
                                                                  statearr_9890_9928[2] = inst_9837;
                                                                  statearr_9890_9928[1] = 28;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                }else {
                                                                  return null
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5075__auto__) {
        return function() {
          var state_machine__5076__auto__ = null;
          var state_machine__5076__auto____0 = function() {
            var statearr_9892 = new Array(20);
            statearr_9892[0] = state_machine__5076__auto__;
            statearr_9892[1] = 1;
            return statearr_9892
          };
          var state_machine__5076__auto____1 = function(state_9847) {
            while(true) {
              var result__5077__auto__ = switch__5075__auto__.call(null, state_9847);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5077__auto__
              }
              break
            }
          };
          state_machine__5076__auto__ = function(state_9847) {
            switch(arguments.length) {
              case 0:
                return state_machine__5076__auto____0.call(this);
              case 1:
                return state_machine__5076__auto____1.call(this, state_9847)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
          return state_machine__5076__auto__
        }()
      }(switch__5075__auto__)
    }();
    var state__5127__auto__ = function() {
      var statearr_9893 = f__5126__auto__.call(null);
      statearr_9893[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___9894;
      return statearr_9893
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
  });
  return m
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch)
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch)
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix)
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map)
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode)
};
cljs.core.async.Pub = {};
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if(function() {
    var and__3941__auto__ = p;
    if(and__3941__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4
    }else {
      return and__3941__auto__
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_)
  }else {
    var x__3469__auto__ = p == null ? null : p;
    return function() {
      var or__3943__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_)
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if(function() {
    var and__3941__auto__ = p;
    if(and__3941__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3
    }else {
      return and__3941__auto__
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch)
  }else {
    var x__3469__auto__ = p == null ? null : p;
    return function() {
      var or__3943__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch)
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if(function() {
      var and__3941__auto__ = p;
      if(and__3941__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1
      }else {
        return and__3941__auto__
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p)
    }else {
      var x__3469__auto__ = p == null ? null : p;
      return function() {
        var or__3943__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p)
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if(function() {
      var and__3941__auto__ = p;
      if(and__3941__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2
      }else {
        return and__3941__auto__
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v)
    }else {
      var x__3469__auto__ = p == null ? null : p;
      return function() {
        var or__3943__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3469__auto__)];
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          var or__3943__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if(or__3943__auto____$1) {
            return or__3943__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v)
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null))
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3943__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if(cljs.core.truth_(or__3943__auto__)) {
          return or__3943__auto__
        }else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3943__auto__, mults) {
            return function(p1__9929_SHARP_) {
              if(cljs.core.truth_(p1__9929_SHARP_.call(null, topic))) {
                return p1__9929_SHARP_
              }else {
                return cljs.core.assoc.call(null, p1__9929_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))))
              }
            }
          }(or__3943__auto__, mults)), topic)
        }
      }
    }(mults);
    var p = function() {
      if(typeof cljs.core.async.t10053 !== "undefined") {
      }else {
        goog.provide("cljs.core.async.t10053");
        cljs.core.async.t10053 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta10054) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta10054 = meta10054;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216
        };
        cljs.core.async.t10053.cljs$lang$type = true;
        cljs.core.async.t10053.cljs$lang$ctorStr = "cljs.core.async/t10053";
        cljs.core.async.t10053.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
            return cljs.core._write.call(null, writer__3411__auto__, "cljs.core.async/t10053")
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t10053.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_)
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if(cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2)
            }else {
              return null
            }
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY)
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic)
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t10053.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            return self__.ch
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_10055) {
            var self__ = this;
            return self__.meta10054
          }
        }(mults, ensure_mult);
        cljs.core.async.t10053.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_10055, meta10054__$1) {
            var self__ = this;
            return new cljs.core.async.t10053(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta10054__$1)
          }
        }(mults, ensure_mult);
        cljs.core.async.__GT_t10053 = function(mults, ensure_mult) {
          return function __GT_t10053(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta10054) {
            return new cljs.core.async.t10053(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta10054)
          }
        }(mults, ensure_mult)
      }
      return new cljs.core.async.t10053(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null)
    }();
    var c__5125__auto___10176 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_10128) {
          var state_val_10129 = state_10128[1];
          if(state_val_10129 === 1) {
            var state_10128__$1 = state_10128;
            var statearr_10130_10177 = state_10128__$1;
            statearr_10130_10177[2] = null;
            statearr_10130_10177[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_10129 === 2) {
              var state_10128__$1 = state_10128;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10128__$1, 4, ch)
            }else {
              if(state_val_10129 === 3) {
                var inst_10126 = state_10128[2];
                var state_10128__$1 = state_10128;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10128__$1, inst_10126)
              }else {
                if(state_val_10129 === 4) {
                  var inst_10058 = state_10128[5];
                  var inst_10058__$1 = state_10128[2];
                  var inst_10059 = inst_10058__$1 == null;
                  var state_10128__$1 = function() {
                    var statearr_10131 = state_10128;
                    statearr_10131[5] = inst_10058__$1;
                    return statearr_10131
                  }();
                  if(cljs.core.truth_(inst_10059)) {
                    var statearr_10132_10178 = state_10128__$1;
                    statearr_10132_10178[1] = 5
                  }else {
                    var statearr_10133_10179 = state_10128__$1;
                    statearr_10133_10179[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_10129 === 5) {
                    var inst_10065 = cljs.core.deref.call(null, mults);
                    var inst_10066 = cljs.core.vals.call(null, inst_10065);
                    var inst_10067 = cljs.core.seq.call(null, inst_10066);
                    var inst_10068 = inst_10067;
                    var inst_10069 = null;
                    var inst_10070 = 0;
                    var inst_10071 = 0;
                    var state_10128__$1 = function() {
                      var statearr_10134 = state_10128;
                      statearr_10134[6] = inst_10070;
                      statearr_10134[7] = inst_10069;
                      statearr_10134[8] = inst_10068;
                      statearr_10134[9] = inst_10071;
                      return statearr_10134
                    }();
                    var statearr_10135_10180 = state_10128__$1;
                    statearr_10135_10180[2] = null;
                    statearr_10135_10180[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_10129 === 6) {
                      var inst_10058 = state_10128[5];
                      var inst_10108 = state_10128[10];
                      var inst_10106 = state_10128[11];
                      var inst_10106__$1 = topic_fn.call(null, inst_10058);
                      var inst_10107 = cljs.core.deref.call(null, mults);
                      var inst_10108__$1 = cljs.core.get.call(null, inst_10107, inst_10106__$1);
                      var state_10128__$1 = function() {
                        var statearr_10136 = state_10128;
                        statearr_10136[10] = inst_10108__$1;
                        statearr_10136[11] = inst_10106__$1;
                        return statearr_10136
                      }();
                      if(cljs.core.truth_(inst_10108__$1)) {
                        var statearr_10137_10181 = state_10128__$1;
                        statearr_10137_10181[1] = 19
                      }else {
                        var statearr_10138_10182 = state_10128__$1;
                        statearr_10138_10182[1] = 20
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_10129 === 7) {
                        var inst_10124 = state_10128[2];
                        var state_10128__$1 = state_10128;
                        var statearr_10139_10183 = state_10128__$1;
                        statearr_10139_10183[2] = inst_10124;
                        statearr_10139_10183[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_10129 === 8) {
                          var inst_10070 = state_10128[6];
                          var inst_10071 = state_10128[9];
                          var inst_10073 = inst_10071 < inst_10070;
                          var inst_10074 = inst_10073;
                          var state_10128__$1 = state_10128;
                          if(cljs.core.truth_(inst_10074)) {
                            var statearr_10143_10184 = state_10128__$1;
                            statearr_10143_10184[1] = 10
                          }else {
                            var statearr_10144_10185 = state_10128__$1;
                            statearr_10144_10185[1] = 11
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_10129 === 9) {
                            var inst_10104 = state_10128[2];
                            var state_10128__$1 = state_10128;
                            var statearr_10145_10186 = state_10128__$1;
                            statearr_10145_10186[2] = inst_10104;
                            statearr_10145_10186[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_10129 === 10) {
                              var inst_10070 = state_10128[6];
                              var inst_10069 = state_10128[7];
                              var inst_10068 = state_10128[8];
                              var inst_10071 = state_10128[9];
                              var inst_10076 = cljs.core._nth.call(null, inst_10069, inst_10071);
                              var inst_10077 = cljs.core.async.muxch_STAR_.call(null, inst_10076);
                              var inst_10078 = cljs.core.async.close_BANG_.call(null, inst_10077);
                              var inst_10079 = inst_10071 + 1;
                              var tmp10140 = inst_10070;
                              var tmp10141 = inst_10069;
                              var tmp10142 = inst_10068;
                              var inst_10068__$1 = tmp10142;
                              var inst_10069__$1 = tmp10141;
                              var inst_10070__$1 = tmp10140;
                              var inst_10071__$1 = inst_10079;
                              var state_10128__$1 = function() {
                                var statearr_10146 = state_10128;
                                statearr_10146[12] = inst_10078;
                                statearr_10146[6] = inst_10070__$1;
                                statearr_10146[7] = inst_10069__$1;
                                statearr_10146[8] = inst_10068__$1;
                                statearr_10146[9] = inst_10071__$1;
                                return statearr_10146
                              }();
                              var statearr_10147_10187 = state_10128__$1;
                              statearr_10147_10187[2] = null;
                              statearr_10147_10187[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_10129 === 11) {
                                var inst_10082 = state_10128[13];
                                var inst_10068 = state_10128[8];
                                var inst_10082__$1 = cljs.core.seq.call(null, inst_10068);
                                var state_10128__$1 = function() {
                                  var statearr_10148 = state_10128;
                                  statearr_10148[13] = inst_10082__$1;
                                  return statearr_10148
                                }();
                                if(inst_10082__$1) {
                                  var statearr_10149_10188 = state_10128__$1;
                                  statearr_10149_10188[1] = 13
                                }else {
                                  var statearr_10150_10189 = state_10128__$1;
                                  statearr_10150_10189[1] = 14
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_10129 === 12) {
                                  var inst_10102 = state_10128[2];
                                  var state_10128__$1 = state_10128;
                                  var statearr_10151_10190 = state_10128__$1;
                                  statearr_10151_10190[2] = inst_10102;
                                  statearr_10151_10190[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_10129 === 13) {
                                    var inst_10082 = state_10128[13];
                                    var inst_10084 = cljs.core.chunked_seq_QMARK_.call(null, inst_10082);
                                    var state_10128__$1 = state_10128;
                                    if(inst_10084) {
                                      var statearr_10152_10191 = state_10128__$1;
                                      statearr_10152_10191[1] = 16
                                    }else {
                                      var statearr_10153_10192 = state_10128__$1;
                                      statearr_10153_10192[1] = 17
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_10129 === 14) {
                                      var state_10128__$1 = state_10128;
                                      var statearr_10154_10193 = state_10128__$1;
                                      statearr_10154_10193[2] = null;
                                      statearr_10154_10193[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_10129 === 15) {
                                        var inst_10100 = state_10128[2];
                                        var state_10128__$1 = state_10128;
                                        var statearr_10155_10194 = state_10128__$1;
                                        statearr_10155_10194[2] = inst_10100;
                                        statearr_10155_10194[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_10129 === 16) {
                                          var inst_10082 = state_10128[13];
                                          var inst_10086 = cljs.core.chunk_first.call(null, inst_10082);
                                          var inst_10087 = cljs.core.chunk_rest.call(null, inst_10082);
                                          var inst_10088 = cljs.core.count.call(null, inst_10086);
                                          var inst_10068 = inst_10087;
                                          var inst_10069 = inst_10086;
                                          var inst_10070 = inst_10088;
                                          var inst_10071 = 0;
                                          var state_10128__$1 = function() {
                                            var statearr_10156 = state_10128;
                                            statearr_10156[6] = inst_10070;
                                            statearr_10156[7] = inst_10069;
                                            statearr_10156[8] = inst_10068;
                                            statearr_10156[9] = inst_10071;
                                            return statearr_10156
                                          }();
                                          var statearr_10157_10195 = state_10128__$1;
                                          statearr_10157_10195[2] = null;
                                          statearr_10157_10195[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_10129 === 17) {
                                            var inst_10082 = state_10128[13];
                                            var inst_10091 = cljs.core.first.call(null, inst_10082);
                                            var inst_10092 = cljs.core.async.muxch_STAR_.call(null, inst_10091);
                                            var inst_10093 = cljs.core.async.close_BANG_.call(null, inst_10092);
                                            var inst_10094 = cljs.core.next.call(null, inst_10082);
                                            var inst_10068 = inst_10094;
                                            var inst_10069 = null;
                                            var inst_10070 = 0;
                                            var inst_10071 = 0;
                                            var state_10128__$1 = function() {
                                              var statearr_10158 = state_10128;
                                              statearr_10158[14] = inst_10093;
                                              statearr_10158[6] = inst_10070;
                                              statearr_10158[7] = inst_10069;
                                              statearr_10158[8] = inst_10068;
                                              statearr_10158[9] = inst_10071;
                                              return statearr_10158
                                            }();
                                            var statearr_10159_10196 = state_10128__$1;
                                            statearr_10159_10196[2] = null;
                                            statearr_10159_10196[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_10129 === 18) {
                                              var inst_10097 = state_10128[2];
                                              var state_10128__$1 = state_10128;
                                              var statearr_10160_10197 = state_10128__$1;
                                              statearr_10160_10197[2] = inst_10097;
                                              statearr_10160_10197[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_10129 === 19) {
                                                var state_10128__$1 = state_10128;
                                                var statearr_10161_10198 = state_10128__$1;
                                                statearr_10161_10198[2] = null;
                                                statearr_10161_10198[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_10129 === 20) {
                                                  var state_10128__$1 = state_10128;
                                                  var statearr_10162_10199 = state_10128__$1;
                                                  statearr_10162_10199[2] = null;
                                                  statearr_10162_10199[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_10129 === 21) {
                                                    var inst_10121 = state_10128[2];
                                                    var state_10128__$1 = function() {
                                                      var statearr_10163 = state_10128;
                                                      statearr_10163[15] = inst_10121;
                                                      return statearr_10163
                                                    }();
                                                    var statearr_10164_10200 = state_10128__$1;
                                                    statearr_10164_10200[2] = null;
                                                    statearr_10164_10200[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_10129 === 22) {
                                                      var inst_10118 = state_10128[2];
                                                      var state_10128__$1 = state_10128;
                                                      var statearr_10165_10201 = state_10128__$1;
                                                      statearr_10165_10201[2] = inst_10118;
                                                      statearr_10165_10201[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_10129 === 23) {
                                                        var inst_10106 = state_10128[11];
                                                        var inst_10110 = state_10128[2];
                                                        var inst_10111 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_10106);
                                                        var state_10128__$1 = function() {
                                                          var statearr_10166 = state_10128;
                                                          statearr_10166[16] = inst_10110;
                                                          return statearr_10166
                                                        }();
                                                        var statearr_10167_10202 = state_10128__$1;
                                                        statearr_10167_10202[2] = inst_10111;
                                                        statearr_10167_10202[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_10129 === 24) {
                                                          try {
                                                            var inst_10058 = state_10128[5];
                                                            var inst_10108 = state_10128[10];
                                                            var inst_10114 = cljs.core.async.muxch_STAR_.call(null, inst_10108);
                                                            var state_10128__$1 = state_10128;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10128__$1, 25, inst_10114, inst_10058)
                                                          }catch(e10168) {
                                                            if(e10168 instanceof Object) {
                                                              var ex__5069__auto__ = e10168;
                                                              var statearr_10169_10203 = state_10128;
                                                              statearr_10169_10203[1] = 23;
                                                              statearr_10169_10203[2] = ex__5069__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e10168;
                                                              }else {
                                                                return null
                                                              }
                                                            }
                                                          }
                                                        }else {
                                                          if(state_val_10129 === 25) {
                                                            try {
                                                              var inst_10116 = state_10128[2];
                                                              var state_10128__$1 = state_10128;
                                                              var statearr_10172_10204 = state_10128__$1;
                                                              statearr_10172_10204[2] = inst_10116;
                                                              statearr_10172_10204[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }catch(e10170) {
                                                              if(e10170 instanceof Object) {
                                                                var ex__5069__auto__ = e10170;
                                                                var statearr_10171_10205 = state_10128;
                                                                statearr_10171_10205[1] = 23;
                                                                statearr_10171_10205[2] = ex__5069__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e10170;
                                                                }else {
                                                                  return null
                                                                }
                                                              }
                                                            }
                                                          }else {
                                                            return null
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_10174 = new Array(17);
              statearr_10174[0] = state_machine__5076__auto__;
              statearr_10174[1] = 1;
              return statearr_10174
            };
            var state_machine__5076__auto____1 = function(state_10128) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_10128);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_10128) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_10128)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_10175 = f__5126__auto__.call(null);
        statearr_10175[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___10176;
        return statearr_10175
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return p
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true)
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_)
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch)
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p)
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic)
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null)
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if(cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt))
            }else {
              return null
            }
          }
        }(chs__$1, out, cnt, rets, dchan, dctr)
      }
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5125__auto___10336 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_10308) {
          var state_val_10309 = state_10308[1];
          if(state_val_10309 === 1) {
            var state_10308__$1 = state_10308;
            var statearr_10310_10337 = state_10308__$1;
            statearr_10310_10337[2] = null;
            statearr_10310_10337[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_10309 === 2) {
              var inst_10272 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_10273 = 0;
              var state_10308__$1 = function() {
                var statearr_10311 = state_10308;
                statearr_10311[5] = inst_10273;
                statearr_10311[6] = inst_10272;
                return statearr_10311
              }();
              var statearr_10312_10338 = state_10308__$1;
              statearr_10312_10338[2] = null;
              statearr_10312_10338[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_10309 === 3) {
                var inst_10306 = state_10308[2];
                var state_10308__$1 = state_10308;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10308__$1, inst_10306)
              }else {
                if(state_val_10309 === 4) {
                  var inst_10273 = state_10308[5];
                  var inst_10275 = inst_10273 < cnt;
                  var state_10308__$1 = state_10308;
                  if(cljs.core.truth_(inst_10275)) {
                    var statearr_10313_10339 = state_10308__$1;
                    statearr_10313_10339[1] = 6
                  }else {
                    var statearr_10314_10340 = state_10308__$1;
                    statearr_10314_10340[1] = 7
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_10309 === 5) {
                    var inst_10292 = state_10308[2];
                    var state_10308__$1 = function() {
                      var statearr_10315 = state_10308;
                      statearr_10315[7] = inst_10292;
                      return statearr_10315
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10308__$1, 12, dchan)
                  }else {
                    if(state_val_10309 === 6) {
                      var state_10308__$1 = state_10308;
                      var statearr_10316_10341 = state_10308__$1;
                      statearr_10316_10341[2] = null;
                      statearr_10316_10341[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_10309 === 7) {
                        var state_10308__$1 = state_10308;
                        var statearr_10317_10342 = state_10308__$1;
                        statearr_10317_10342[2] = null;
                        statearr_10317_10342[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_10309 === 8) {
                          var inst_10290 = state_10308[2];
                          var state_10308__$1 = state_10308;
                          var statearr_10318_10343 = state_10308__$1;
                          statearr_10318_10343[2] = inst_10290;
                          statearr_10318_10343[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_10309 === 9) {
                            var inst_10273 = state_10308[5];
                            var inst_10285 = state_10308[2];
                            var inst_10286 = inst_10273 + 1;
                            var inst_10273__$1 = inst_10286;
                            var state_10308__$1 = function() {
                              var statearr_10319 = state_10308;
                              statearr_10319[8] = inst_10285;
                              statearr_10319[5] = inst_10273__$1;
                              return statearr_10319
                            }();
                            var statearr_10320_10344 = state_10308__$1;
                            statearr_10320_10344[2] = null;
                            statearr_10320_10344[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_10309 === 10) {
                              var inst_10277 = state_10308[2];
                              var inst_10278 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_10308__$1 = function() {
                                var statearr_10321 = state_10308;
                                statearr_10321[9] = inst_10277;
                                return statearr_10321
                              }();
                              var statearr_10322_10345 = state_10308__$1;
                              statearr_10322_10345[2] = inst_10278;
                              statearr_10322_10345[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_10309 === 11) {
                                try {
                                  var inst_10273 = state_10308[5];
                                  var inst_10281 = chs__$1.call(null, inst_10273);
                                  var inst_10282 = done.call(null, inst_10273);
                                  var inst_10283 = cljs.core.async.take_BANG_.call(null, inst_10281, inst_10282);
                                  var state_10308__$1 = state_10308;
                                  var statearr_10325_10346 = state_10308__$1;
                                  statearr_10325_10346[2] = inst_10283;
                                  statearr_10325_10346[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }catch(e10323) {
                                  if(e10323 instanceof Object) {
                                    var ex__5069__auto__ = e10323;
                                    var statearr_10324_10347 = state_10308;
                                    statearr_10324_10347[1] = 10;
                                    statearr_10324_10347[2] = ex__5069__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e10323;
                                    }else {
                                      return null
                                    }
                                  }
                                }
                              }else {
                                if(state_val_10309 === 12) {
                                  var inst_10294 = state_10308[10];
                                  var inst_10294__$1 = state_10308[2];
                                  var inst_10295 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_10294__$1);
                                  var state_10308__$1 = function() {
                                    var statearr_10326 = state_10308;
                                    statearr_10326[10] = inst_10294__$1;
                                    return statearr_10326
                                  }();
                                  if(cljs.core.truth_(inst_10295)) {
                                    var statearr_10327_10348 = state_10308__$1;
                                    statearr_10327_10348[1] = 13
                                  }else {
                                    var statearr_10328_10349 = state_10308__$1;
                                    statearr_10328_10349[1] = 14
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_10309 === 13) {
                                    var inst_10297 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_10308__$1 = state_10308;
                                    var statearr_10329_10350 = state_10308__$1;
                                    statearr_10329_10350[2] = inst_10297;
                                    statearr_10329_10350[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_10309 === 14) {
                                      var inst_10294 = state_10308[10];
                                      var inst_10299 = cljs.core.apply.call(null, f, inst_10294);
                                      var state_10308__$1 = state_10308;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10308__$1, 16, out, inst_10299)
                                    }else {
                                      if(state_val_10309 === 15) {
                                        var inst_10304 = state_10308[2];
                                        var state_10308__$1 = state_10308;
                                        var statearr_10330_10351 = state_10308__$1;
                                        statearr_10330_10351[2] = inst_10304;
                                        statearr_10330_10351[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_10309 === 16) {
                                          var inst_10301 = state_10308[2];
                                          var state_10308__$1 = function() {
                                            var statearr_10331 = state_10308;
                                            statearr_10331[11] = inst_10301;
                                            return statearr_10331
                                          }();
                                          var statearr_10332_10352 = state_10308__$1;
                                          statearr_10332_10352[2] = null;
                                          statearr_10332_10352[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          return null
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_10334 = new Array(12);
              statearr_10334[0] = state_machine__5076__auto__;
              statearr_10334[1] = 1;
              return statearr_10334
            };
            var state_machine__5076__auto____1 = function(state_10308) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_10308);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_10308) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_10308)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_10335 = f__5126__auto__.call(null);
        statearr_10335[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___10336;
        return statearr_10335
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return out
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null)
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5125__auto___10452 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5126__auto__ = function() {
        var switch__5075__auto__ = function(state_10432) {
          var state_val_10433 = state_10432[1];
          if(state_val_10433 === 1) {
            var inst_10403 = cljs.core.vec.call(null, chs);
            var inst_10404 = inst_10403;
            var state_10432__$1 = function() {
              var statearr_10434 = state_10432;
              statearr_10434[5] = inst_10404;
              return statearr_10434
            }();
            var statearr_10435_10453 = state_10432__$1;
            statearr_10435_10453[2] = null;
            statearr_10435_10453[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_10433 === 2) {
              var inst_10404 = state_10432[5];
              var inst_10406 = cljs.core.count.call(null, inst_10404);
              var inst_10407 = inst_10406 > 0;
              var state_10432__$1 = state_10432;
              if(cljs.core.truth_(inst_10407)) {
                var statearr_10436_10454 = state_10432__$1;
                statearr_10436_10454[1] = 4
              }else {
                var statearr_10437_10455 = state_10432__$1;
                statearr_10437_10455[1] = 5
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_10433 === 3) {
                var inst_10430 = state_10432[2];
                var state_10432__$1 = state_10432;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10432__$1, inst_10430)
              }else {
                if(state_val_10433 === 4) {
                  var inst_10404 = state_10432[5];
                  var state_10432__$1 = state_10432;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_10432__$1, 7, inst_10404)
                }else {
                  if(state_val_10433 === 5) {
                    var inst_10426 = cljs.core.async.close_BANG_.call(null, out);
                    var state_10432__$1 = state_10432;
                    var statearr_10438_10456 = state_10432__$1;
                    statearr_10438_10456[2] = inst_10426;
                    statearr_10438_10456[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_10433 === 6) {
                      var inst_10428 = state_10432[2];
                      var state_10432__$1 = state_10432;
                      var statearr_10439_10457 = state_10432__$1;
                      statearr_10439_10457[2] = inst_10428;
                      statearr_10439_10457[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_10433 === 7) {
                        var inst_10411 = state_10432[6];
                        var inst_10412 = state_10432[7];
                        var inst_10411__$1 = state_10432[2];
                        var inst_10412__$1 = cljs.core.nth.call(null, inst_10411__$1, 0, null);
                        var inst_10413 = cljs.core.nth.call(null, inst_10411__$1, 1, null);
                        var inst_10414 = inst_10412__$1 == null;
                        var state_10432__$1 = function() {
                          var statearr_10440 = state_10432;
                          statearr_10440[6] = inst_10411__$1;
                          statearr_10440[7] = inst_10412__$1;
                          statearr_10440[8] = inst_10413;
                          return statearr_10440
                        }();
                        if(cljs.core.truth_(inst_10414)) {
                          var statearr_10441_10458 = state_10432__$1;
                          statearr_10441_10458[1] = 8
                        }else {
                          var statearr_10442_10459 = state_10432__$1;
                          statearr_10442_10459[1] = 9
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_10433 === 8) {
                          var inst_10404 = state_10432[5];
                          var inst_10411 = state_10432[6];
                          var inst_10412 = state_10432[7];
                          var inst_10413 = state_10432[8];
                          var inst_10416 = function() {
                            var c = inst_10413;
                            var v = inst_10412;
                            var vec__10409 = inst_10411;
                            var cs = inst_10404;
                            return function(c, v, vec__10409, cs, inst_10404, inst_10411, inst_10412, inst_10413, state_val_10433) {
                              return function(p1__10353_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__10353_SHARP_)
                              }
                            }(c, v, vec__10409, cs, inst_10404, inst_10411, inst_10412, inst_10413, state_val_10433)
                          }();
                          var inst_10417 = cljs.core.filterv.call(null, inst_10416, inst_10404);
                          var inst_10404__$1 = inst_10417;
                          var state_10432__$1 = function() {
                            var statearr_10443 = state_10432;
                            statearr_10443[5] = inst_10404__$1;
                            return statearr_10443
                          }();
                          var statearr_10444_10460 = state_10432__$1;
                          statearr_10444_10460[2] = null;
                          statearr_10444_10460[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_10433 === 9) {
                            var inst_10412 = state_10432[7];
                            var state_10432__$1 = state_10432;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10432__$1, 11, out, inst_10412)
                          }else {
                            if(state_val_10433 === 10) {
                              var inst_10424 = state_10432[2];
                              var state_10432__$1 = state_10432;
                              var statearr_10446_10461 = state_10432__$1;
                              statearr_10446_10461[2] = inst_10424;
                              statearr_10446_10461[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_10433 === 11) {
                                var inst_10404 = state_10432[5];
                                var inst_10421 = state_10432[2];
                                var tmp10445 = inst_10404;
                                var inst_10404__$1 = tmp10445;
                                var state_10432__$1 = function() {
                                  var statearr_10447 = state_10432;
                                  statearr_10447[5] = inst_10404__$1;
                                  statearr_10447[9] = inst_10421;
                                  return statearr_10447
                                }();
                                var statearr_10448_10462 = state_10432__$1;
                                statearr_10448_10462[2] = null;
                                statearr_10448_10462[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5075__auto__) {
          return function() {
            var state_machine__5076__auto__ = null;
            var state_machine__5076__auto____0 = function() {
              var statearr_10450 = new Array(10);
              statearr_10450[0] = state_machine__5076__auto__;
              statearr_10450[1] = 1;
              return statearr_10450
            };
            var state_machine__5076__auto____1 = function(state_10432) {
              while(true) {
                var result__5077__auto__ = switch__5075__auto__.call(null, state_10432);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5077__auto__
                }
                break
              }
            };
            state_machine__5076__auto__ = function(state_10432) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5076__auto____0.call(this);
                case 1:
                  return state_machine__5076__auto____1.call(this, state_10432)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
            state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
            return state_machine__5076__auto__
          }()
        }(switch__5075__auto__)
      }();
      var state__5127__auto__ = function() {
        var statearr_10451 = f__5126__auto__.call(null);
        statearr_10451[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___10452;
        return statearr_10451
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
    });
    return out
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch)
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if(goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for(var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]))
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for(var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer)
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor)
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for(var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer)
  }
  monitors.length--
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn
}};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || goog.userAgent.IE && goog.userAgent.isVersion("8") || goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if(goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for(var id in goog.Disposable.instances_) {
    if(goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)])
    }
  }
  return ret
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {}
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if(!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if(goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if(goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid]
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable))
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if(!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = []
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope))
};
goog.Disposable.prototype.disposeInternal = function() {
  if(this.onDisposeCallbacks_) {
    while(this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()()
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if(obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed()
  }
  return false
};
goog.dispose = function(obj) {
  if(obj && typeof obj.dispose == "function") {
    obj.dispose()
  }
};
goog.disposeAll = function(var_args) {
  for(var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if(goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable)
    }else {
      goog.dispose(disposable)
    }
  }
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation()
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault()
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true
  }catch(e) {
  }
  return false
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if(opt_e) {
    this.init(opt_e, opt_currentTarget)
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if(relatedTarget) {
    if(goog.userAgent.GECKO) {
      if(!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null
      }
    }
  }else {
    if(type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement
    }else {
      if(type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if(e.defaultPrevented) {
    this.preventDefault()
  }
  delete this.propagationStopped_
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if(!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if(this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT
    }else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button])
    }
  }else {
    return this.event_.button == button
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey)
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if(this.event_.stopPropagation) {
    this.event_.stopPropagation()
  }else {
    this.event_.cancelBubble = true
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if(!be.preventDefault) {
    be.returnValue = false;
    if(goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if(be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1
        }
      }catch(ex) {
      }
    }
  }else {
    be.preventDefault()
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_])
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if(goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if(goog.isFunction(listener)) {
    this.isFunctionListener_ = true
  }else {
    if(listener && listener.handleEvent && goog.isFunction(listener.handleEvent)) {
      this.isFunctionListener_ = false
    }else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if(this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject)
  }
  return this.listener.handleEvent.call(this.listener, eventObject)
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  var listenableKey;
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler)
  }else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler)
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if(!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if(!(type in map)) {
    map[type] = {count_:0, remaining_:0}
  }
  map = map[type];
  if(!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if(!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++
  }else {
    listenerArray = map[srcUid];
    for(var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if(listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if(listenerObj.removed) {
          break
        }
        if(!callOnce) {
          listenerArray[i].callOnce = false
        }
        return listenerArray[i]
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if(!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = []
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if(src.addEventListener) {
    if(src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture)
    }
  }else {
    src.attachEvent(goog.events.getOnString_(type), proxy)
  }
  return listenerObj
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject)
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if(!v) {
      return v
    }
  };
  return f
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  var listenableKey;
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler)
  }else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler)
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler)
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler)
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if(!listenerArray) {
    return false
  }
  for(var i = 0;i < listenerArray.length;i++) {
    if(listenerArray[i].listener == listener && listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler) {
      return goog.events.unlistenByKey(listenerArray[i].key)
    }
  }
  return false
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if(!listener) {
    return false
  }
  if(listener.removed) {
    return false
  }
  var src = listener.src;
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener)
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if(src.removeEventListener) {
    if(src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture)
    }
  }else {
    if(src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy)
    }
  }
  var srcUid = goog.getUid(src);
  if(goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if(sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid]
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if(listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray)
  }
  delete goog.events.listeners_[key];
  return true
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler)
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key]
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if(!listenerArray.locked_) {
    if(listenerArray.needsCleanup_) {
      for(var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if(listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue
        }
        if(oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex]
        }
        newIndex++
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if(newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if(goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--
        }
        if(goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type]
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if(!noObj) {
    if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && opt_obj && goog.events.Listenable.isImplementedBy(opt_obj)) {
      return opt_obj.removeAllListeners(opt_type)
    }
    var srcUid = goog.getUid((opt_obj));
    if(goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for(var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if(noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++
        }
      }
    }
  }else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++
    })
  }
  return count
};
goog.events.getListeners = function(obj, type, capture) {
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture)
  }else {
    return goog.events.getListeners_(obj, type, capture) || []
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if(type in map) {
    map = map[type];
    if(capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if(map[objUid]) {
        return map[objUid]
      }
    }
  }
  return null
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler)
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if(listenerArray) {
    for(var i = 0;i < listenerArray.length;i++) {
      if(!listenerArray[i].removed && listenerArray[i].listener == listener && listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler) {
        return listenerArray[i]
      }
    }
  }
  return null
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture)
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if(listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if(hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && !!map[opt_capture] && objUid in map[opt_capture]
    }else {
      if(!(hasType || hasCapture)) {
        return true
      }else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture
        })
      }
    }
  }
  return false
};
goog.events.expose = function(e) {
  var str = [];
  for(var key in e) {
    if(e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")")
    }else {
      str.push(key + " \x3d " + e[key])
    }
  }
  return str.join("\n")
};
goog.events.getOnString_ = function(type) {
  if(type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type]
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject)
  }
  var map = goog.events.listenerTree_;
  if(type in map) {
    map = map[type];
    if(capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject)
    }
  }
  return true
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if(map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if(!listenerArray.locked_) {
      listenerArray.locked_ = 1
    }else {
      listenerArray.locked_++
    }
    try {
      var length = listenerArray.length;
      for(var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if(listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false
        }
      }
    }finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray)
    }
  }
  return Boolean(retval)
};
goog.events.fireListener = function(listener, eventObject) {
  if(listener.callOnce) {
    goog.events.unlistenByKey(listener.key)
  }
  return listener.handleEvent(eventObject)
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_)
};
goog.events.dispatchEvent = function(src, e) {
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e)
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if(!(type in map)) {
    return true
  }
  if(goog.isString(e)) {
    e = new goog.events.Event(e, src)
  }else {
    if(!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent)
    }else {
      e.target = e.target || src
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if(hasCapture) {
    ancestors = [];
    for(var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent)
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for(var i = ancestors.length - 1;!e.propagationStopped_ && i >= 0 && targetsMap.remaining_;i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false
    }
  }
  var hasBubble = false in map;
  if(hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if(hasCapture) {
      for(var i = 0;!e.propagationStopped_ && i < ancestors.length && targetsMap.remaining_;i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false
      }
    }else {
      for(var current = src;!e.propagationStopped_ && current && targetsMap.remaining_;current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false
      }
    }
  }
  return Boolean(rv)
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_)
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if(listener.removed) {
    return true
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if(!(type in map)) {
    return true
  }
  map = map[type];
  var retval, targetsMap;
  if(!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if(hasCapture) {
      if(goog.events.isMarkedIeEvent_(ieEvent)) {
        return true
      }
      goog.events.markIeEvent_(ieEvent)
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if(hasCapture) {
        var ancestors = [];
        for(var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent)
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for(var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0 && targetsMap.remaining_;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt)
        }
        if(hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for(var i = 0;!evt.propagationStopped_ && i < ancestors.length && targetsMap.remaining_;i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt)
          }
        }
      }else {
        retval = goog.events.fireListener(listener, evt)
      }
    }finally {
      if(ancestors) {
        ancestors.length = 0
      }
    }
    return retval
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if(e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return
    }catch(ex) {
      useReturnValue = true
    }
  }
  if(useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if(goog.isFunction(listener)) {
    return listener
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e)
  })
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_)
});
goog.provide("three");
var THREE = THREE || {REVISION:"55"};
self.console = self.console || {info:function() {
}, log:function() {
}, debug:function() {
}, warn:function() {
}, error:function() {
}};
self.Int32Array = self.Int32Array || Array;
self.Float32Array = self.Float32Array || Array;
String.prototype.startsWith = String.prototype.startsWith || function(str) {
  return this.slice(0, str.length) === str
};
String.prototype.endsWith = String.prototype.endsWith || function(str) {
  var t = String(str);
  var index = this.lastIndexOf(t);
  return(-1 < index && index) === this.length - t.length
};
String.prototype.trim = String.prototype.trim || function() {
  return this.replace(/^\s+|\s+$/g, "")
};
(function() {
  var lastTime = 0;
  var vendors = ["ms", "moz", "webkit", "o"];
  for(var x = 0;x < vendors.length && !window.requestAnimationFrame;++x) {
    window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
    window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"]
  }
  if(window.requestAnimationFrame === undefined) {
    window.requestAnimationFrame = function(callback, element) {
      var currTime = Date.now(), timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() {
        callback(currTime + timeToCall)
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id
    }
  }
  window.cancelAnimationFrame = window.cancelAnimationFrame || function(id) {
    window.clearTimeout(id)
  }
})();
THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;
THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;
THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;
THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;
THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;
THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;
THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;
THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;
THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;
THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;
THREE.UVMapping = function() {
};
THREE.CubeReflectionMapping = function() {
};
THREE.CubeRefractionMapping = function() {
};
THREE.SphericalReflectionMapping = function() {
};
THREE.SphericalRefractionMapping = function() {
};
THREE.RepeatWrapping = 1E3;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;
THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;
THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;
THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;
THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;
THREE.Color = function(value) {
  if(value !== undefined) {
    this.set(value)
  }
  return this
};
THREE.Color.prototype = {constructor:THREE.Color, r:1, g:1, b:1, set:function(value) {
  switch(typeof value) {
    case "number":
      this.setHex(value);
      break;
    case "string":
      this.setStyle(value);
      break
  }
}, setHex:function(hex) {
  hex = Math.floor(hex);
  this.r = (hex >> 16 & 255) / 255;
  this.g = (hex >> 8 & 255) / 255;
  this.b = (hex & 255) / 255;
  return this
}, setRGB:function(r, g, b) {
  this.r = r;
  this.g = g;
  this.b = b;
  return this
}, setHSV:function(h, s, v) {
  var i, f, p, q, t;
  if(v === 0) {
    this.r = this.g = this.b = 0
  }else {
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - s * f);
    t = v * (1 - s * (1 - f));
    if(i === 0) {
      this.r = v;
      this.g = t;
      this.b = p
    }else {
      if(i === 1) {
        this.r = q;
        this.g = v;
        this.b = p
      }else {
        if(i === 2) {
          this.r = p;
          this.g = v;
          this.b = t
        }else {
          if(i === 3) {
            this.r = p;
            this.g = q;
            this.b = v
          }else {
            if(i === 4) {
              this.r = t;
              this.g = p;
              this.b = v
            }else {
              if(i === 5) {
                this.r = v;
                this.g = p;
                this.b = q
              }
            }
          }
        }
      }
    }
  }
  return this
}, setStyle:function(style) {
  if(/^rgb\((\d+),(\d+),(\d+)\)$/i.test(style)) {
    var color = /^rgb\((\d+),(\d+),(\d+)\)$/i.exec(style);
    this.r = Math.min(255, parseInt(color[1], 10)) / 255;
    this.g = Math.min(255, parseInt(color[2], 10)) / 255;
    this.b = Math.min(255, parseInt(color[3], 10)) / 255;
    return this
  }
  if(/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test(style)) {
    var color = /^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec(style);
    this.r = Math.min(100, parseInt(color[1], 10)) / 100;
    this.g = Math.min(100, parseInt(color[2], 10)) / 100;
    this.b = Math.min(100, parseInt(color[3], 10)) / 100;
    return this
  }
  if(/^\#([0-9a-f]{6})$/i.test(style)) {
    var color = /^\#([0-9a-f]{6})$/i.exec(style);
    this.setHex(parseInt(color[1], 16));
    return this
  }
  if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(style)) {
    var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(style);
    this.setHex(parseInt(color[1] + color[1] + color[2] + color[2] + color[3] + color[3], 16));
    return this
  }
  if(/^(\w+)$/i.test(style)) {
    this.setHex(THREE.ColorKeywords[style]);
    return this
  }
}, copy:function(color) {
  this.r = color.r;
  this.g = color.g;
  this.b = color.b;
  return this
}, copyGammaToLinear:function(color) {
  this.r = color.r * color.r;
  this.g = color.g * color.g;
  this.b = color.b * color.b;
  return this
}, copyLinearToGamma:function(color) {
  this.r = Math.sqrt(color.r);
  this.g = Math.sqrt(color.g);
  this.b = Math.sqrt(color.b);
  return this
}, convertGammaToLinear:function() {
  var r = this.r, g = this.g, b = this.b;
  this.r = r * r;
  this.g = g * g;
  this.b = b * b;
  return this
}, convertLinearToGamma:function() {
  this.r = Math.sqrt(this.r);
  this.g = Math.sqrt(this.g);
  this.b = Math.sqrt(this.b);
  return this
}, getHex:function() {
  return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0
}, getHexString:function() {
  return("000000" + this.getHex().toString(16)).slice(-6)
}, getStyle:function() {
  return"rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")"
}, getHSV:function(hsv) {
  var r = this.r;
  var g = this.g;
  var b = this.b;
  var max = Math.max(Math.max(r, g), b);
  var min = Math.min(Math.min(r, g), b);
  var hue;
  var saturation;
  var value = max;
  if(min === max) {
    hue = 0;
    saturation = 0
  }else {
    var delta = max - min;
    saturation = delta / max;
    if(r === max) {
      hue = (g - b) / delta
    }else {
      if(g === max) {
        hue = 2 + (b - r) / delta
      }else {
        hue = 4 + (r - g) / delta
      }
    }
    hue /= 6;
    if(hue < 0) {
      hue += 1
    }
    if(hue > 1) {
      hue -= 1
    }
  }
  if(hsv === undefined) {
    hsv = {h:0, s:0, v:0}
  }
  hsv.h = hue;
  hsv.s = saturation;
  hsv.v = value;
  return hsv
}, add:function(color) {
  this.r += color.r;
  this.g += color.g;
  this.b += color.b;
  return this
}, addColors:function(color1, color2) {
  this.r = color1.r + color2.r;
  this.g = color1.g + color2.g;
  this.b = color1.b + color2.b;
  return this
}, addScalar:function(s) {
  this.r += s;
  this.g += s;
  this.b += s;
  return this
}, multiply:function(color) {
  this.r *= color.r;
  this.g *= color.g;
  this.b *= color.b;
  return this
}, multiplyScalar:function(s) {
  this.r *= s;
  this.g *= s;
  this.b *= s;
  return this
}, lerp:function(color, alpha) {
  this.r += (color.r - this.r) * alpha;
  this.g += (color.g - this.g) * alpha;
  this.b += (color.b - this.b) * alpha;
  return this
}, clone:function() {
  return(new THREE.Color).setRGB(this.r, this.g, this.b)
}};
THREE.ColorKeywords = {"aliceblue":15792383, "antiquewhite":16444375, "aqua":65535, "aquamarine":8388564, "azure":15794175, "beige":16119260, "bisque":16770244, "black":0, "blanchedalmond":16772045, "blue":255, "blueviolet":9055202, "brown":10824234, "burlywood":14596231, "cadetblue":6266528, "chartreuse":8388352, "chocolate":13789470, "coral":16744272, "cornflowerblue":6591981, "cornsilk":16775388, "crimson":14423100, "cyan":65535, "darkblue":139, "darkcyan":35723, "darkgoldenrod":12092939, "darkgray":11119017, 
"darkgreen":25600, "darkgrey":11119017, "darkkhaki":12433259, "darkmagenta":9109643, "darkolivegreen":5597999, "darkorange":16747520, "darkorchid":10040012, "darkred":9109504, "darksalmon":15308410, "darkseagreen":9419919, "darkslateblue":4734347, "darkslategray":3100495, "darkslategrey":3100495, "darkturquoise":52945, "darkviolet":9699539, "deeppink":16716947, "deepskyblue":49151, "dimgray":6908265, "dimgrey":6908265, "dodgerblue":2003199, "firebrick":11674146, "floralwhite":16775920, "forestgreen":2263842, 
"fuchsia":16711935, "gainsboro":14474460, "ghostwhite":16316671, "gold":16766720, "goldenrod":14329120, "gray":8421504, "green":32768, "greenyellow":11403055, "grey":8421504, "honeydew":15794160, "hotpink":16738740, "indianred":13458524, "indigo":4915330, "ivory":16777200, "khaki":15787660, "lavender":15132410, "lavenderblush":16773365, "lawngreen":8190976, "lemonchiffon":16775885, "lightblue":11393254, "lightcoral":15761536, "lightcyan":14745599, "lightgoldenrodyellow":16448210, "lightgray":13882323, 
"lightgreen":9498256, "lightgrey":13882323, "lightpink":16758465, "lightsalmon":16752762, "lightseagreen":2142890, "lightskyblue":8900346, "lightslategray":7833753, "lightslategrey":7833753, "lightsteelblue":11584734, "lightyellow":16777184, "lime":65280, "limegreen":3329330, "linen":16445670, "magenta":16711935, "maroon":8388608, "mediumaquamarine":6737322, "mediumblue":205, "mediumorchid":12211667, "mediumpurple":9662683, "mediumseagreen":3978097, "mediumslateblue":8087790, "mediumspringgreen":64154, 
"mediumturquoise":4772300, "mediumvioletred":13047173, "midnightblue":1644912, "mintcream":16121850, "mistyrose":16770273, "moccasin":16770229, "navajowhite":16768685, "navy":128, "oldlace":16643558, "olive":8421376, "olivedrab":7048739, "orange":16753920, "orangered":16729344, "orchid":14315734, "palegoldenrod":15657130, "palegreen":10025880, "paleturquoise":11529966, "palevioletred":14381203, "papayawhip":16773077, "peachpuff":16767673, "peru":13468991, "pink":16761035, "plum":14524637, "powderblue":11591910, 
"purple":8388736, "red":16711680, "rosybrown":12357519, "royalblue":4286945, "saddlebrown":9127187, "salmon":16416882, "sandybrown":16032864, "seagreen":3050327, "seashell":16774638, "sienna":10506797, "silver":12632256, "skyblue":8900331, "slateblue":6970061, "slategray":7372944, "slategrey":7372944, "snow":16775930, "springgreen":65407, "steelblue":4620980, "tan":13808780, "teal":32896, "thistle":14204888, "tomato":16737095, "turquoise":4251856, "violet":15631086, "wheat":16113331, "white":16777215, 
"whitesmoke":16119285, "yellow":16776960, "yellowgreen":10145074};
THREE.Quaternion = function(x, y, z, w) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.w = w !== undefined ? w : 1
};
THREE.Quaternion.prototype = {constructor:THREE.Quaternion, set:function(x, y, z, w) {
  this.x = x;
  this.y = y;
  this.z = z;
  this.w = w;
  return this
}, copy:function(q) {
  this.x = q.x;
  this.y = q.y;
  this.z = q.z;
  this.w = q.w;
  return this
}, setFromEuler:function(v, order) {
  var c1 = Math.cos(v.x / 2);
  var c2 = Math.cos(v.y / 2);
  var c3 = Math.cos(v.z / 2);
  var s1 = Math.sin(v.x / 2);
  var s2 = Math.sin(v.y / 2);
  var s3 = Math.sin(v.z / 2);
  if(order === undefined || order === "XYZ") {
    this.x = s1 * c2 * c3 + c1 * s2 * s3;
    this.y = c1 * s2 * c3 - s1 * c2 * s3;
    this.z = c1 * c2 * s3 + s1 * s2 * c3;
    this.w = c1 * c2 * c3 - s1 * s2 * s3
  }else {
    if(order === "YXZ") {
      this.x = s1 * c2 * c3 + c1 * s2 * s3;
      this.y = c1 * s2 * c3 - s1 * c2 * s3;
      this.z = c1 * c2 * s3 - s1 * s2 * c3;
      this.w = c1 * c2 * c3 + s1 * s2 * s3
    }else {
      if(order === "ZXY") {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3
      }else {
        if(order === "ZYX") {
          this.x = s1 * c2 * c3 - c1 * s2 * s3;
          this.y = c1 * s2 * c3 + s1 * c2 * s3;
          this.z = c1 * c2 * s3 - s1 * s2 * c3;
          this.w = c1 * c2 * c3 + s1 * s2 * s3
        }else {
          if(order === "YZX") {
            this.x = s1 * c2 * c3 + c1 * s2 * s3;
            this.y = c1 * s2 * c3 + s1 * c2 * s3;
            this.z = c1 * c2 * s3 - s1 * s2 * c3;
            this.w = c1 * c2 * c3 - s1 * s2 * s3
          }else {
            if(order === "XZY") {
              this.x = s1 * c2 * c3 - c1 * s2 * s3;
              this.y = c1 * s2 * c3 - s1 * c2 * s3;
              this.z = c1 * c2 * s3 + s1 * s2 * c3;
              this.w = c1 * c2 * c3 + s1 * s2 * s3
            }
          }
        }
      }
    }
  }
  return this
}, setFromAxisAngle:function(axis, angle) {
  var halfAngle = angle / 2, s = Math.sin(halfAngle);
  this.x = axis.x * s;
  this.y = axis.y * s;
  this.z = axis.z * s;
  this.w = Math.cos(halfAngle);
  return this
}, setFromRotationMatrix:function(m) {
  var te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33, s;
  if(trace > 0) {
    s = 0.5 / Math.sqrt(trace + 1);
    this.w = 0.25 / s;
    this.x = (m32 - m23) * s;
    this.y = (m13 - m31) * s;
    this.z = (m21 - m12) * s
  }else {
    if(m11 > m22 && m11 > m33) {
      s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this.w = (m32 - m23) / s;
      this.x = 0.25 * s;
      this.y = (m12 + m21) / s;
      this.z = (m13 + m31) / s
    }else {
      if(m22 > m33) {
        s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this.w = (m13 - m31) / s;
        this.x = (m12 + m21) / s;
        this.y = 0.25 * s;
        this.z = (m23 + m32) / s
      }else {
        s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this.w = (m21 - m12) / s;
        this.x = (m13 + m31) / s;
        this.y = (m23 + m32) / s;
        this.z = 0.25 * s
      }
    }
  }
  return this
}, inverse:function() {
  this.conjugate().normalize();
  return this
}, conjugate:function() {
  this.x *= -1;
  this.y *= -1;
  this.z *= -1;
  return this
}, lengthSq:function() {
  return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
}, length:function() {
  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
}, normalize:function() {
  var l = this.length();
  if(l === 0) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 1
  }else {
    l = 1 / l;
    this.x = this.x * l;
    this.y = this.y * l;
    this.z = this.z * l;
    this.w = this.w * l
  }
  return this
}, multiply:function(q, p) {
  if(p !== undefined) {
    console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
    return this.multiplyQuaternions(q, p)
  }
  return this.multiplyQuaternions(this, q)
}, multiplyQuaternions:function(a, b) {
  var qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;
  var qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;
  this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
  this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
  this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
  this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  return this
}, multiplyVector3:function(vector) {
  console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
  return vector.applyQuaternion(this)
}, slerp:function(qb, t) {
  var x = this.x, y = this.y, z = this.z, w = this.w;
  var cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;
  if(cosHalfTheta < 0) {
    this.w = -qb.w;
    this.x = -qb.x;
    this.y = -qb.y;
    this.z = -qb.z;
    cosHalfTheta = -cosHalfTheta
  }else {
    this.copy(qb)
  }
  if(cosHalfTheta >= 1) {
    this.w = w;
    this.x = x;
    this.y = y;
    this.z = z;
    return this
  }
  var halfTheta = Math.acos(cosHalfTheta);
  var sinHalfTheta = Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
  if(Math.abs(sinHalfTheta) < 0.0010) {
    this.w = 0.5 * (w + this.w);
    this.x = 0.5 * (x + this.x);
    this.y = 0.5 * (y + this.y);
    this.z = 0.5 * (z + this.z);
    return this
  }
  var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
  this.w = w * ratioA + this.w * ratioB;
  this.x = x * ratioA + this.x * ratioB;
  this.y = y * ratioA + this.y * ratioB;
  this.z = z * ratioA + this.z * ratioB;
  return this
}, equals:function(v) {
  return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w
}, clone:function() {
  return new THREE.Quaternion(this.x, this.y, this.z, this.w)
}};
THREE.Quaternion.slerp = function(qa, qb, qm, t) {
  return qm.copy(qa).slerp(qb, t)
};
THREE.Vector2 = function(x, y) {
  this.x = x || 0;
  this.y = y || 0
};
THREE.Vector2.prototype = {constructor:THREE.Vector2, set:function(x, y) {
  this.x = x;
  this.y = y;
  return this
}, setX:function(x) {
  this.x = x;
  return this
}, setY:function(y) {
  this.y = y;
  return this
}, setComponent:function(index, value) {
  switch(index) {
    case 0:
      this.x = value;
      break;
    case 1:
      this.y = value;
      break;
    default:
      throw new Error("index is out of range: " + index);
  }
}, getComponent:function(index) {
  switch(index) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    default:
      throw new Error("index is out of range: " + index);
  }
}, copy:function(v) {
  this.x = v.x;
  this.y = v.y;
  return this
}, add:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
    return this.addVectors(v, w)
  }
  this.x += v.x;
  this.y += v.y;
  return this
}, addVectors:function(a, b) {
  this.x = a.x + b.x;
  this.y = a.y + b.y;
  return this
}, addScalar:function(s) {
  this.x += s;
  this.y += s;
  return this
}, sub:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
    return this.subVectors(v, w)
  }
  this.x -= v.x;
  this.y -= v.y;
  return this
}, subVectors:function(a, b) {
  this.x = a.x - b.x;
  this.y = a.y - b.y;
  return this
}, multiplyScalar:function(s) {
  this.x *= s;
  this.y *= s;
  return this
}, divideScalar:function(s) {
  if(s !== 0) {
    this.x /= s;
    this.y /= s
  }else {
    this.set(0, 0)
  }
  return this
}, min:function(v) {
  if(this.x > v.x) {
    this.x = v.x
  }
  if(this.y > v.y) {
    this.y = v.y
  }
  return this
}, max:function(v) {
  if(this.x < v.x) {
    this.x = v.x
  }
  if(this.y < v.y) {
    this.y = v.y
  }
  return this
}, clamp:function(min, max) {
  if(this.x < min.x) {
    this.x = min.x
  }else {
    if(this.x > max.x) {
      this.x = max.x
    }
  }
  if(this.y < min.y) {
    this.y = min.y
  }else {
    if(this.y > max.y) {
      this.y = max.y
    }
  }
  return this
}, negate:function() {
  return this.multiplyScalar(-1)
}, dot:function(v) {
  return this.x * v.x + this.y * v.y
}, lengthSq:function() {
  return this.x * this.x + this.y * this.y
}, length:function() {
  return Math.sqrt(this.x * this.x + this.y * this.y)
}, normalize:function() {
  return this.divideScalar(this.length())
}, distanceTo:function(v) {
  return Math.sqrt(this.distanceToSquared(v))
}, distanceToSquared:function(v) {
  var dx = this.x - v.x, dy = this.y - v.y;
  return dx * dx + dy * dy
}, setLength:function(l) {
  var oldLength = this.length();
  if(oldLength !== 0 && l !== oldLength) {
    this.multiplyScalar(l / oldLength)
  }
  return this
}, lerp:function(v, alpha) {
  this.x += (v.x - this.x) * alpha;
  this.y += (v.y - this.y) * alpha;
  return this
}, equals:function(v) {
  return v.x === this.x && v.y === this.y
}, clone:function() {
  return new THREE.Vector2(this.x, this.y)
}};
THREE.Vector3 = function(x, y, z) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0
};
THREE.Vector3.prototype = {constructor:THREE.Vector3, set:function(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
  return this
}, setX:function(x) {
  this.x = x;
  return this
}, setY:function(y) {
  this.y = y;
  return this
}, setZ:function(z) {
  this.z = z;
  return this
}, setComponent:function(index, value) {
  switch(index) {
    case 0:
      this.x = value;
      break;
    case 1:
      this.y = value;
      break;
    case 2:
      this.z = value;
      break;
    default:
      throw new Error("index is out of range: " + index);
  }
}, getComponent:function(index) {
  switch(index) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    case 2:
      return this.z;
    default:
      throw new Error("index is out of range: " + index);
  }
}, copy:function(v) {
  this.x = v.x;
  this.y = v.y;
  this.z = v.z;
  return this
}, add:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
    return this.addVectors(v, w)
  }
  this.x += v.x;
  this.y += v.y;
  this.z += v.z;
  return this
}, addScalar:function(s) {
  this.x += s;
  this.y += s;
  this.z += s;
  return this
}, addVectors:function(a, b) {
  this.x = a.x + b.x;
  this.y = a.y + b.y;
  this.z = a.z + b.z;
  return this
}, sub:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
    return this.subVectors(v, w)
  }
  this.x -= v.x;
  this.y -= v.y;
  this.z -= v.z;
  return this
}, subVectors:function(a, b) {
  this.x = a.x - b.x;
  this.y = a.y - b.y;
  this.z = a.z - b.z;
  return this
}, multiply:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
    return this.multiplyVectors(v, w)
  }
  this.x *= v.x;
  this.y *= v.y;
  this.z *= v.z;
  return this
}, multiplyScalar:function(s) {
  this.x *= s;
  this.y *= s;
  this.z *= s;
  return this
}, multiplyVectors:function(a, b) {
  this.x = a.x * b.x;
  this.y = a.y * b.y;
  this.z = a.z * b.z;
  return this
}, applyMatrix3:function(m) {
  var x = this.x;
  var y = this.y;
  var z = this.z;
  var e = m.elements;
  this.x = e[0] * x + e[3] * y + e[6] * z;
  this.y = e[1] * x + e[4] * y + e[7] * z;
  this.z = e[2] * x + e[5] * y + e[8] * z;
  return this
}, applyMatrix4:function(m) {
  var x = this.x, y = this.y, z = this.z;
  var e = m.elements;
  this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
  this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
  this.z = e[2] * x + e[6] * y + e[10] * z + e[14];
  return this
}, applyProjection:function(m) {
  var x = this.x, y = this.y, z = this.z;
  var e = m.elements;
  var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
  this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;
  this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;
  this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;
  return this
}, applyQuaternion:function(q) {
  var x = this.x;
  var y = this.y;
  var z = this.z;
  var qx = q.x;
  var qy = q.y;
  var qz = q.z;
  var qw = q.w;
  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z;
  this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  return this
}, applyEuler:function(v, eulerOrder) {
  var quaternion = THREE.Vector3.__q1.setFromEuler(v, eulerOrder);
  this.applyQuaternion(quaternion);
  return this
}, applyAxisAngle:function(axis, angle) {
  var quaternion = THREE.Vector3.__q1.setFromAxisAngle(axis, angle);
  this.applyQuaternion(quaternion);
  return this
}, divide:function(v) {
  this.x /= v.x;
  this.y /= v.y;
  this.z /= v.z;
  return this
}, divideScalar:function(s) {
  if(s !== 0) {
    this.x /= s;
    this.y /= s;
    this.z /= s
  }else {
    this.x = 0;
    this.y = 0;
    this.z = 0
  }
  return this
}, min:function(v) {
  if(this.x > v.x) {
    this.x = v.x
  }
  if(this.y > v.y) {
    this.y = v.y
  }
  if(this.z > v.z) {
    this.z = v.z
  }
  return this
}, max:function(v) {
  if(this.x < v.x) {
    this.x = v.x
  }
  if(this.y < v.y) {
    this.y = v.y
  }
  if(this.z < v.z) {
    this.z = v.z
  }
  return this
}, clamp:function(min, max) {
  if(this.x < min.x) {
    this.x = min.x
  }else {
    if(this.x > max.x) {
      this.x = max.x
    }
  }
  if(this.y < min.y) {
    this.y = min.y
  }else {
    if(this.y > max.y) {
      this.y = max.y
    }
  }
  if(this.z < min.z) {
    this.z = min.z
  }else {
    if(this.z > max.z) {
      this.z = max.z
    }
  }
  return this
}, negate:function() {
  return this.multiplyScalar(-1)
}, dot:function(v) {
  return this.x * v.x + this.y * v.y + this.z * v.z
}, lengthSq:function() {
  return this.x * this.x + this.y * this.y + this.z * this.z
}, length:function() {
  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
}, lengthManhattan:function() {
  return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
}, normalize:function() {
  return this.divideScalar(this.length())
}, setLength:function(l) {
  var oldLength = this.length();
  if(oldLength !== 0 && l !== oldLength) {
    this.multiplyScalar(l / oldLength)
  }
  return this
}, lerp:function(v, alpha) {
  this.x += (v.x - this.x) * alpha;
  this.y += (v.y - this.y) * alpha;
  this.z += (v.z - this.z) * alpha;
  return this
}, cross:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
    return this.crossVectors(v, w)
  }
  var x = this.x, y = this.y, z = this.z;
  this.x = y * v.z - z * v.y;
  this.y = z * v.x - x * v.z;
  this.z = x * v.y - y * v.x;
  return this
}, crossVectors:function(a, b) {
  this.x = a.y * b.z - a.z * b.y;
  this.y = a.z * b.x - a.x * b.z;
  this.z = a.x * b.y - a.y * b.x;
  return this
}, angleTo:function(v) {
  return Math.acos(this.dot(v) / this.length() / v.length())
}, distanceTo:function(v) {
  return Math.sqrt(this.distanceToSquared(v))
}, distanceToSquared:function(v) {
  var dx = this.x - v.x;
  var dy = this.y - v.y;
  var dz = this.z - v.z;
  return dx * dx + dy * dy + dz * dz
}, getPositionFromMatrix:function(m) {
  this.x = m.elements[12];
  this.y = m.elements[13];
  this.z = m.elements[14];
  return this
}, setEulerFromRotationMatrix:function(m, order) {
  function clamp(x) {
    return Math.min(Math.max(x, -1), 1)
  }
  var te = m.elements;
  var m11 = te[0], m12 = te[4], m13 = te[8];
  var m21 = te[1], m22 = te[5], m23 = te[9];
  var m31 = te[2], m32 = te[6], m33 = te[10];
  if(order === undefined || order === "XYZ") {
    this.y = Math.asin(clamp(m13));
    if(Math.abs(m13) < 0.99999) {
      this.x = Math.atan2(-m23, m33);
      this.z = Math.atan2(-m12, m11)
    }else {
      this.x = Math.atan2(m32, m22);
      this.z = 0
    }
  }else {
    if(order === "YXZ") {
      this.x = Math.asin(-clamp(m23));
      if(Math.abs(m23) < 0.99999) {
        this.y = Math.atan2(m13, m33);
        this.z = Math.atan2(m21, m22)
      }else {
        this.y = Math.atan2(-m31, m11);
        this.z = 0
      }
    }else {
      if(order === "ZXY") {
        this.x = Math.asin(clamp(m32));
        if(Math.abs(m32) < 0.99999) {
          this.y = Math.atan2(-m31, m33);
          this.z = Math.atan2(-m12, m22)
        }else {
          this.y = 0;
          this.z = Math.atan2(m21, m11)
        }
      }else {
        if(order === "ZYX") {
          this.y = Math.asin(-clamp(m31));
          if(Math.abs(m31) < 0.99999) {
            this.x = Math.atan2(m32, m33);
            this.z = Math.atan2(m21, m11)
          }else {
            this.x = 0;
            this.z = Math.atan2(-m12, m22)
          }
        }else {
          if(order === "YZX") {
            this.z = Math.asin(clamp(m21));
            if(Math.abs(m21) < 0.99999) {
              this.x = Math.atan2(-m23, m22);
              this.y = Math.atan2(-m31, m11)
            }else {
              this.x = 0;
              this.y = Math.atan2(m13, m33)
            }
          }else {
            if(order === "XZY") {
              this.z = Math.asin(-clamp(m12));
              if(Math.abs(m12) < 0.99999) {
                this.x = Math.atan2(m32, m22);
                this.y = Math.atan2(m13, m11)
              }else {
                this.x = Math.atan2(-m23, m33);
                this.y = 0
              }
            }
          }
        }
      }
    }
  }
  return this
}, setEulerFromQuaternion:function(q, order) {
  function clamp(x) {
    return Math.min(Math.max(x, -1), 1)
  }
  var sqx = q.x * q.x;
  var sqy = q.y * q.y;
  var sqz = q.z * q.z;
  var sqw = q.w * q.w;
  if(order === undefined || order === "XYZ") {
    this.x = Math.atan2(2 * (q.x * q.w - q.y * q.z), sqw - sqx - sqy + sqz);
    this.y = Math.asin(clamp(2 * (q.x * q.z + q.y * q.w)));
    this.z = Math.atan2(2 * (q.z * q.w - q.x * q.y), sqw + sqx - sqy - sqz)
  }else {
    if(order === "YXZ") {
      this.x = Math.asin(clamp(2 * (q.x * q.w - q.y * q.z)));
      this.y = Math.atan2(2 * (q.x * q.z + q.y * q.w), sqw - sqx - sqy + sqz);
      this.z = Math.atan2(2 * (q.x * q.y + q.z * q.w), sqw - sqx + sqy - sqz)
    }else {
      if(order === "ZXY") {
        this.x = Math.asin(clamp(2 * (q.x * q.w + q.y * q.z)));
        this.y = Math.atan2(2 * (q.y * q.w - q.z * q.x), sqw - sqx - sqy + sqz);
        this.z = Math.atan2(2 * (q.z * q.w - q.x * q.y), sqw - sqx + sqy - sqz)
      }else {
        if(order === "ZYX") {
          this.x = Math.atan2(2 * (q.x * q.w + q.z * q.y), sqw - sqx - sqy + sqz);
          this.y = Math.asin(clamp(2 * (q.y * q.w - q.x * q.z)));
          this.z = Math.atan2(2 * (q.x * q.y + q.z * q.w), sqw + sqx - sqy - sqz)
        }else {
          if(order === "YZX") {
            this.x = Math.atan2(2 * (q.x * q.w - q.z * q.y), sqw - sqx + sqy - sqz);
            this.y = Math.atan2(2 * (q.y * q.w - q.x * q.z), sqw + sqx - sqy - sqz);
            this.z = Math.asin(clamp(2 * (q.x * q.y + q.z * q.w)))
          }else {
            if(order === "XZY") {
              this.x = Math.atan2(2 * (q.x * q.w + q.y * q.z), sqw - sqx + sqy - sqz);
              this.y = Math.atan2(2 * (q.x * q.z + q.y * q.w), sqw + sqx - sqy - sqz);
              this.z = Math.asin(clamp(2 * (q.z * q.w - q.x * q.y)))
            }
          }
        }
      }
    }
  }
  return this
}, getScaleFromMatrix:function(m) {
  var sx = this.set(m.elements[0], m.elements[1], m.elements[2]).length();
  var sy = this.set(m.elements[4], m.elements[5], m.elements[6]).length();
  var sz = this.set(m.elements[8], m.elements[9], m.elements[10]).length();
  this.x = sx;
  this.y = sy;
  this.z = sz;
  return this
}, equals:function(v) {
  return v.x === this.x && v.y === this.y && v.z === this.z
}, clone:function() {
  return new THREE.Vector3(this.x, this.y, this.z)
}};
THREE.Vector3.__q1 = new THREE.Quaternion;
THREE.Vector4 = function(x, y, z, w) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.w = w !== undefined ? w : 1
};
THREE.Vector4.prototype = {constructor:THREE.Vector4, set:function(x, y, z, w) {
  this.x = x;
  this.y = y;
  this.z = z;
  this.w = w;
  return this
}, setX:function(x) {
  this.x = x;
  return this
}, setY:function(y) {
  this.y = y;
  return this
}, setZ:function(z) {
  this.z = z;
  return this
}, setW:function(w) {
  this.w = w;
  return this
}, setComponent:function(index, value) {
  switch(index) {
    case 0:
      this.x = value;
      break;
    case 1:
      this.y = value;
      break;
    case 2:
      this.z = value;
      break;
    case 3:
      this.w = value;
      break;
    default:
      throw new Error("index is out of range: " + index);
  }
}, getComponent:function(index) {
  switch(index) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    case 2:
      return this.z;
    case 3:
      return this.w;
    default:
      throw new Error("index is out of range: " + index);
  }
}, copy:function(v) {
  this.x = v.x;
  this.y = v.y;
  this.z = v.z;
  this.w = v.w !== undefined ? v.w : 1;
  return this
}, add:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
    return this.addVectors(v, w)
  }
  this.x += v.x;
  this.y += v.y;
  this.z += v.z;
  this.w += v.w;
  return this
}, addScalar:function(s) {
  this.x += s;
  this.y += s;
  this.z += s;
  this.w += s;
  return this
}, addVectors:function(a, b) {
  this.x = a.x + b.x;
  this.y = a.y + b.y;
  this.z = a.z + b.z;
  this.w = a.w + b.w;
  return this
}, sub:function(v, w) {
  if(w !== undefined) {
    console.warn("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
    return this.subVectors(v, w)
  }
  this.x -= v.x;
  this.y -= v.y;
  this.z -= v.z;
  this.w -= v.w;
  return this
}, subVectors:function(a, b) {
  this.x = a.x - b.x;
  this.y = a.y - b.y;
  this.z = a.z - b.z;
  this.w = a.w - b.w;
  return this
}, multiplyScalar:function(s) {
  this.x *= s;
  this.y *= s;
  this.z *= s;
  this.w *= s;
  return this
}, applyMatrix4:function(m) {
  var x = this.x;
  var y = this.y;
  var z = this.z;
  var w = this.w;
  var e = m.elements;
  this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
  this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
  this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
  this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
  return this
}, divideScalar:function(s) {
  if(s !== 0) {
    this.x /= s;
    this.y /= s;
    this.z /= s;
    this.w /= s
  }else {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 1
  }
  return this
}, min:function(v) {
  if(this.x > v.x) {
    this.x = v.x
  }
  if(this.y > v.y) {
    this.y = v.y
  }
  if(this.z > v.z) {
    this.z = v.z
  }
  if(this.w > v.w) {
    this.w = v.w
  }
  return this
}, max:function(v) {
  if(this.x < v.x) {
    this.x = v.x
  }
  if(this.y < v.y) {
    this.y = v.y
  }
  if(this.z < v.z) {
    this.z = v.z
  }
  if(this.w < v.w) {
    this.w = v.w
  }
  return this
}, clamp:function(min, max) {
  if(this.x < min.x) {
    this.x = min.x
  }else {
    if(this.x > max.x) {
      this.x = max.x
    }
  }
  if(this.y < min.y) {
    this.y = min.y
  }else {
    if(this.y > max.y) {
      this.y = max.y
    }
  }
  if(this.z < min.z) {
    this.z = min.z
  }else {
    if(this.z > max.z) {
      this.z = max.z
    }
  }
  if(this.w < min.w) {
    this.w = min.w
  }else {
    if(this.w > max.w) {
      this.w = max.w
    }
  }
  return this
}, negate:function() {
  return this.multiplyScalar(-1)
}, dot:function(v) {
  return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w
}, lengthSq:function() {
  return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
}, length:function() {
  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
}, lengthManhattan:function() {
  return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
}, normalize:function() {
  return this.divideScalar(this.length())
}, setLength:function(l) {
  var oldLength = this.length();
  if(oldLength !== 0 && l !== oldLength) {
    this.multiplyScalar(l / oldLength)
  }
  return this
}, lerp:function(v, alpha) {
  this.x += (v.x - this.x) * alpha;
  this.y += (v.y - this.y) * alpha;
  this.z += (v.z - this.z) * alpha;
  this.w += (v.w - this.w) * alpha;
  return this
}, equals:function(v) {
  return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w
}, clone:function() {
  return new THREE.Vector4(this.x, this.y, this.z, this.w)
}, setAxisAngleFromQuaternion:function(q) {
  this.w = 2 * Math.acos(q.w);
  var s = Math.sqrt(1 - q.w * q.w);
  if(s < 1E-4) {
    this.x = 1;
    this.y = 0;
    this.z = 0
  }else {
    this.x = q.x / s;
    this.y = q.y / s;
    this.z = q.z / s
  }
  return this
}, setAxisAngleFromRotationMatrix:function(m) {
  var angle, x, y, z, epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
  if(Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
    if(Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
      this.set(1, 0, 0, 0);
      return this
    }
    angle = Math.PI;
    var xx = (m11 + 1) / 2;
    var yy = (m22 + 1) / 2;
    var zz = (m33 + 1) / 2;
    var xy = (m12 + m21) / 4;
    var xz = (m13 + m31) / 4;
    var yz = (m23 + m32) / 4;
    if(xx > yy && xx > zz) {
      if(xx < epsilon) {
        x = 0;
        y = 0.707106781;
        z = 0.707106781
      }else {
        x = Math.sqrt(xx);
        y = xy / x;
        z = xz / x
      }
    }else {
      if(yy > zz) {
        if(yy < epsilon) {
          x = 0.707106781;
          y = 0;
          z = 0.707106781
        }else {
          y = Math.sqrt(yy);
          x = xy / y;
          z = yz / y
        }
      }else {
        if(zz < epsilon) {
          x = 0.707106781;
          y = 0.707106781;
          z = 0
        }else {
          z = Math.sqrt(zz);
          x = xz / z;
          y = yz / z
        }
      }
    }
    this.set(x, y, z, angle);
    return this
  }
  var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
  if(Math.abs(s) < 0.0010) {
    s = 1
  }
  this.x = (m32 - m23) / s;
  this.y = (m13 - m31) / s;
  this.z = (m21 - m12) / s;
  this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
  return this
}};
THREE.Box2 = function(min, max) {
  this.min = min !== undefined ? min : new THREE.Vector2(Infinity, Infinity);
  this.max = max !== undefined ? max : new THREE.Vector2(-Infinity, -Infinity)
};
THREE.Box2.prototype = {constructor:THREE.Box2, set:function(min, max) {
  this.min.copy(min);
  this.max.copy(max);
  return this
}, setFromPoints:function(points) {
  if(points.length > 0) {
    var point = points[0];
    this.min.copy(point);
    this.max.copy(point);
    for(var i = 1, il = points.length;i < il;i++) {
      point = points[i];
      if(point.x < this.min.x) {
        this.min.x = point.x
      }else {
        if(point.x > this.max.x) {
          this.max.x = point.x
        }
      }
      if(point.y < this.min.y) {
        this.min.y = point.y
      }else {
        if(point.y > this.max.y) {
          this.max.y = point.y
        }
      }
    }
  }else {
    this.makeEmpty()
  }
  return this
}, setFromCenterAndSize:function(center, size) {
  var halfSize = THREE.Box2.__v1.copy(size).multiplyScalar(0.5);
  this.min.copy(center).sub(halfSize);
  this.max.copy(center).add(halfSize);
  return this
}, copy:function(box) {
  this.min.copy(box.min);
  this.max.copy(box.max);
  return this
}, makeEmpty:function() {
  this.min.x = this.min.y = Infinity;
  this.max.x = this.max.y = -Infinity;
  return this
}, empty:function() {
  return this.max.x < this.min.x || this.max.y < this.min.y
}, center:function(optionalTarget) {
  var result = optionalTarget || new THREE.Vector2;
  return result.addVectors(this.min, this.max).multiplyScalar(0.5)
}, size:function(optionalTarget) {
  var result = optionalTarget || new THREE.Vector2;
  return result.subVectors(this.max, this.min)
}, expandByPoint:function(point) {
  this.min.min(point);
  this.max.max(point);
  return this
}, expandByVector:function(vector) {
  this.min.sub(vector);
  this.max.add(vector);
  return this
}, expandByScalar:function(scalar) {
  this.min.addScalar(-scalar);
  this.max.addScalar(scalar);
  return this
}, containsPoint:function(point) {
  if(point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y) {
    return false
  }
  return true
}, containsBox:function(box) {
  if(this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y) {
    return true
  }
  return false
}, getParameter:function(point) {
  return new THREE.Vector2((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y))
}, isIntersectionBox:function(box) {
  if(box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y) {
    return false
  }
  return true
}, clampPoint:function(point, optionalTarget) {
  var result = optionalTarget || new THREE.Vector2;
  return result.copy(point).clamp(this.min, this.max)
}, distanceToPoint:function(point) {
  var clampedPoint = THREE.Box2.__v1.copy(point).clamp(this.min, this.max);
  return clampedPoint.sub(point).length()
}, intersect:function(box) {
  this.min.max(box.min);
  this.max.min(box.max);
  return this
}, union:function(box) {
  this.min.min(box.min);
  this.max.max(box.max);
  return this
}, translate:function(offset) {
  this.min.add(offset);
  this.max.add(offset);
  return this
}, equals:function(box) {
  return box.min.equals(this.min) && box.max.equals(this.max)
}, clone:function() {
  return(new THREE.Box2).copy(this)
}};
THREE.Box2.__v1 = new THREE.Vector2;
THREE.Box3 = function(min, max) {
  this.min = min !== undefined ? min : new THREE.Vector3(Infinity, Infinity, Infinity);
  this.max = max !== undefined ? max : new THREE.Vector3(-Infinity, -Infinity, -Infinity)
};
THREE.Box3.prototype = {constructor:THREE.Box3, set:function(min, max) {
  this.min.copy(min);
  this.max.copy(max);
  return this
}, setFromPoints:function(points) {
  if(points.length > 0) {
    var point = points[0];
    this.min.copy(point);
    this.max.copy(point);
    for(var i = 1, il = points.length;i < il;i++) {
      point = points[i];
      if(point.x < this.min.x) {
        this.min.x = point.x
      }else {
        if(point.x > this.max.x) {
          this.max.x = point.x
        }
      }
      if(point.y < this.min.y) {
        this.min.y = point.y
      }else {
        if(point.y > this.max.y) {
          this.max.y = point.y
        }
      }
      if(point.z < this.min.z) {
        this.min.z = point.z
      }else {
        if(point.z > this.max.z) {
          this.max.z = point.z
        }
      }
    }
  }else {
    this.makeEmpty()
  }
  return this
}, setFromCenterAndSize:function(center, size) {
  var halfSize = THREE.Box3.__v1.copy(size).multiplyScalar(0.5);
  this.min.copy(center).sub(halfSize);
  this.max.copy(center).add(halfSize);
  return this
}, copy:function(box) {
  this.min.copy(box.min);
  this.max.copy(box.max);
  return this
}, makeEmpty:function() {
  this.min.x = this.min.y = this.min.z = Infinity;
  this.max.x = this.max.y = this.max.z = -Infinity;
  return this
}, empty:function() {
  return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
}, center:function(optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  return result.addVectors(this.min, this.max).multiplyScalar(0.5)
}, size:function(optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  return result.subVectors(this.max, this.min)
}, expandByPoint:function(point) {
  this.min.min(point);
  this.max.max(point);
  return this
}, expandByVector:function(vector) {
  this.min.sub(vector);
  this.max.add(vector);
  return this
}, expandByScalar:function(scalar) {
  this.min.addScalar(-scalar);
  this.max.addScalar(scalar);
  return this
}, containsPoint:function(point) {
  if(point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z) {
    return false
  }
  return true
}, containsBox:function(box) {
  if(this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z) {
    return true
  }
  return false
}, getParameter:function(point) {
  return new THREE.Vector3((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z))
}, isIntersectionBox:function(box) {
  if(box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z) {
    return false
  }
  return true
}, clampPoint:function(point, optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  return(new THREE.Vector3).copy(point).clamp(this.min, this.max)
}, distanceToPoint:function(point) {
  var clampedPoint = THREE.Box3.__v1.copy(point).clamp(this.min, this.max);
  return clampedPoint.sub(point).length()
}, getBoundingSphere:function(optionalTarget) {
  var result = optionalTarget || new THREE.Sphere;
  result.center = this.center();
  result.radius = this.size(THREE.Box3.__v0).length() * 0.5;
  return result
}, intersect:function(box) {
  this.min.max(box.min);
  this.max.min(box.max);
  return this
}, union:function(box) {
  this.min.min(box.min);
  this.max.max(box.max);
  return this
}, transform:function(matrix) {
  var newPoints = [THREE.Box3.__v0.set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix), THREE.Box3.__v0.set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix), THREE.Box3.__v1.set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix), THREE.Box3.__v2.set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix), THREE.Box3.__v3.set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix), THREE.Box3.__v4.set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix), THREE.Box3.__v5.set(this.max.x, 
  this.min.y, this.max.z).applyMatrix4(matrix), THREE.Box3.__v6.set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix), THREE.Box3.__v7.set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix)];
  this.makeEmpty();
  this.setFromPoints(newPoints);
  return this
}, translate:function(offset) {
  this.min.add(offset);
  this.max.add(offset);
  return this
}, equals:function(box) {
  return box.min.equals(this.min) && box.max.equals(this.max)
}, clone:function() {
  return(new THREE.Box3).copy(this)
}};
THREE.Box3.__v0 = new THREE.Vector3;
THREE.Box3.__v1 = new THREE.Vector3;
THREE.Box3.__v2 = new THREE.Vector3;
THREE.Box3.__v3 = new THREE.Vector3;
THREE.Box3.__v4 = new THREE.Vector3;
THREE.Box3.__v5 = new THREE.Vector3;
THREE.Box3.__v6 = new THREE.Vector3;
THREE.Box3.__v7 = new THREE.Vector3;
THREE.Matrix3 = function(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
  this.elements = new Float32Array(9);
  this.set(n11 !== undefined ? n11 : 1, n12 || 0, n13 || 0, n21 || 0, n22 !== undefined ? n22 : 1, n23 || 0, n31 || 0, n32 || 0, n33 !== undefined ? n33 : 1)
};
THREE.Matrix3.prototype = {constructor:THREE.Matrix3, set:function(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
  var te = this.elements;
  te[0] = n11;
  te[3] = n12;
  te[6] = n13;
  te[1] = n21;
  te[4] = n22;
  te[7] = n23;
  te[2] = n31;
  te[5] = n32;
  te[8] = n33;
  return this
}, identity:function() {
  this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
  return this
}, copy:function(m) {
  var me = m.elements;
  this.set(me[0], me[3], me[6], me[1], me[4], me[7], me[2], me[5], me[8]);
  return this
}, multiplyVector3:function(vector) {
  console.warn("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
  return vector.applyMatrix3(this)
}, multiplyVector3Array:function(a) {
  var tmp = THREE.Matrix3.__v1;
  for(var i = 0, il = a.length;i < il;i += 3) {
    tmp.x = a[i];
    tmp.y = a[i + 1];
    tmp.z = a[i + 2];
    tmp.applyMatrix3(this);
    a[i] = tmp.x;
    a[i + 1] = tmp.y;
    a[i + 2] = tmp.z
  }
  return a
}, multiplyScalar:function(s) {
  var te = this.elements;
  te[0] *= s;
  te[3] *= s;
  te[6] *= s;
  te[1] *= s;
  te[4] *= s;
  te[7] *= s;
  te[2] *= s;
  te[5] *= s;
  te[8] *= s;
  return this
}, determinant:function() {
  var te = this.elements;
  var a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
  return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g
}, getInverse:function(matrix, throwOnInvertible) {
  var me = matrix.elements;
  var te = this.elements;
  te[0] = me[10] * me[5] - me[6] * me[9];
  te[1] = -me[10] * me[1] + me[2] * me[9];
  te[2] = me[6] * me[1] - me[2] * me[5];
  te[3] = -me[10] * me[4] + me[6] * me[8];
  te[4] = me[10] * me[0] - me[2] * me[8];
  te[5] = -me[6] * me[0] + me[2] * me[4];
  te[6] = me[9] * me[4] - me[5] * me[8];
  te[7] = -me[9] * me[0] + me[1] * me[8];
  te[8] = me[5] * me[0] - me[1] * me[4];
  var det = me[0] * te[0] + me[1] * te[3] + me[2] * te[6];
  if(det === 0) {
    var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";
    if(throwOnInvertible || false) {
      throw new Error(msg);
    }else {
      console.warn(msg)
    }
    this.identity();
    return this
  }
  this.multiplyScalar(1 / det);
  return this
}, transpose:function() {
  var tmp, m = this.elements;
  tmp = m[1];
  m[1] = m[3];
  m[3] = tmp;
  tmp = m[2];
  m[2] = m[6];
  m[6] = tmp;
  tmp = m[5];
  m[5] = m[7];
  m[7] = tmp;
  return this
}, transposeIntoArray:function(r) {
  var m = this.elements;
  r[0] = m[0];
  r[1] = m[3];
  r[2] = m[6];
  r[3] = m[1];
  r[4] = m[4];
  r[5] = m[7];
  r[6] = m[2];
  r[7] = m[5];
  r[8] = m[8];
  return this
}, clone:function() {
  var te = this.elements;
  return new THREE.Matrix3(te[0], te[3], te[6], te[1], te[4], te[7], te[2], te[5], te[8])
}};
THREE.Matrix3.__v1 = new THREE.Vector3;
THREE.Matrix4 = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  this.elements = new Float32Array(16);
  this.set(n11 !== undefined ? n11 : 1, n12 || 0, n13 || 0, n14 || 0, n21 || 0, n22 !== undefined ? n22 : 1, n23 || 0, n24 || 0, n31 || 0, n32 || 0, n33 !== undefined ? n33 : 1, n34 || 0, n41 || 0, n42 || 0, n43 || 0, n44 !== undefined ? n44 : 1)
};
THREE.Matrix4.prototype = {constructor:THREE.Matrix4, set:function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  var te = this.elements;
  te[0] = n11;
  te[4] = n12;
  te[8] = n13;
  te[12] = n14;
  te[1] = n21;
  te[5] = n22;
  te[9] = n23;
  te[13] = n24;
  te[2] = n31;
  te[6] = n32;
  te[10] = n33;
  te[14] = n34;
  te[3] = n41;
  te[7] = n42;
  te[11] = n43;
  te[15] = n44;
  return this
}, identity:function() {
  this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  return this
}, copy:function(m) {
  var me = m.elements;
  this.set(me[0], me[4], me[8], me[12], me[1], me[5], me[9], me[13], me[2], me[6], me[10], me[14], me[3], me[7], me[11], me[15]);
  return this
}, setRotationFromEuler:function(v, order) {
  var te = this.elements;
  var x = v.x, y = v.y, z = v.z;
  var a = Math.cos(x), b = Math.sin(x);
  var c = Math.cos(y), d = Math.sin(y);
  var e = Math.cos(z), f = Math.sin(z);
  if(order === undefined || order === "XYZ") {
    var ae = a * e, af = a * f, be = b * e, bf = b * f;
    te[0] = c * e;
    te[4] = -c * f;
    te[8] = d;
    te[1] = af + be * d;
    te[5] = ae - bf * d;
    te[9] = -b * c;
    te[2] = bf - ae * d;
    te[6] = be + af * d;
    te[10] = a * c
  }else {
    if(order === "YXZ") {
      var ce = c * e, cf = c * f, de = d * e, df = d * f;
      te[0] = ce + df * b;
      te[4] = de * b - cf;
      te[8] = a * d;
      te[1] = a * f;
      te[5] = a * e;
      te[9] = -b;
      te[2] = cf * b - de;
      te[6] = df + ce * b;
      te[10] = a * c
    }else {
      if(order === "ZXY") {
        var ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c
      }else {
        if(order === "ZYX") {
          var ae = a * e, af = a * f, be = b * e, bf = b * f;
          te[0] = c * e;
          te[4] = be * d - af;
          te[8] = ae * d + bf;
          te[1] = c * f;
          te[5] = bf * d + ae;
          te[9] = af * d - be;
          te[2] = -d;
          te[6] = b * c;
          te[10] = a * c
        }else {
          if(order === "YZX") {
            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f
          }else {
            if(order === "XZY") {
              var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
              te[0] = c * e;
              te[4] = -f;
              te[8] = d * e;
              te[1] = ac * f + bd;
              te[5] = a * e;
              te[9] = ad * f - bc;
              te[2] = bc * f - ad;
              te[6] = b * e;
              te[10] = bd * f + ac
            }
          }
        }
      }
    }
  }
  return this
}, setRotationFromQuaternion:function(q) {
  var te = this.elements;
  var x = q.x, y = q.y, z = q.z, w = q.w;
  var x2 = x + x, y2 = y + y, z2 = z + z;
  var xx = x * x2, xy = x * y2, xz = x * z2;
  var yy = y * y2, yz = y * z2, zz = z * z2;
  var wx = w * x2, wy = w * y2, wz = w * z2;
  te[0] = 1 - (yy + zz);
  te[4] = xy - wz;
  te[8] = xz + wy;
  te[1] = xy + wz;
  te[5] = 1 - (xx + zz);
  te[9] = yz - wx;
  te[2] = xz - wy;
  te[6] = yz + wx;
  te[10] = 1 - (xx + yy);
  return this
}, lookAt:function(eye, target, up) {
  var te = this.elements;
  var x = THREE.Matrix4.__v1;
  var y = THREE.Matrix4.__v2;
  var z = THREE.Matrix4.__v3;
  z.subVectors(eye, target).normalize();
  if(z.length() === 0) {
    z.z = 1
  }
  x.crossVectors(up, z).normalize();
  if(x.length() === 0) {
    z.x += 1E-4;
    x.crossVectors(up, z).normalize()
  }
  y.crossVectors(z, x);
  te[0] = x.x;
  te[4] = y.x;
  te[8] = z.x;
  te[1] = x.y;
  te[5] = y.y;
  te[9] = z.y;
  te[2] = x.z;
  te[6] = y.z;
  te[10] = z.z;
  return this
}, multiply:function(m, n) {
  if(n !== undefined) {
    console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
    return this.multiplyMatrices(m, n)
  }
  return this.multiplyMatrices(this, m)
}, multiplyMatrices:function(a, b) {
  var ae = a.elements;
  var be = b.elements;
  var te = this.elements;
  var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
  var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
  var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
  var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
  var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
  var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
  var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
  var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
  te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
  te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
  te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
  te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
  return this
}, multiplyToArray:function(a, b, r) {
  var te = this.elements;
  this.multiplyMatrices(a, b);
  r[0] = te[0];
  r[1] = te[1];
  r[2] = te[2];
  r[3] = te[3];
  r[4] = te[4];
  r[5] = te[5];
  r[6] = te[6];
  r[7] = te[7];
  r[8] = te[8];
  r[9] = te[9];
  r[10] = te[10];
  r[11] = te[11];
  r[12] = te[12];
  r[13] = te[13];
  r[14] = te[14];
  r[15] = te[15];
  return this
}, multiplyScalar:function(s) {
  var te = this.elements;
  te[0] *= s;
  te[4] *= s;
  te[8] *= s;
  te[12] *= s;
  te[1] *= s;
  te[5] *= s;
  te[9] *= s;
  te[13] *= s;
  te[2] *= s;
  te[6] *= s;
  te[10] *= s;
  te[14] *= s;
  te[3] *= s;
  te[7] *= s;
  te[11] *= s;
  te[15] *= s;
  return this
}, multiplyVector3:function(vector) {
  console.warn("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
  return vector.applyProjection(this)
}, multiplyVector4:function(vector) {
  console.warn("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
  return vector.applyMatrix4(this)
}, multiplyVector3Array:function(a) {
  var tmp = THREE.Matrix4.__v1;
  for(var i = 0, il = a.length;i < il;i += 3) {
    tmp.x = a[i];
    tmp.y = a[i + 1];
    tmp.z = a[i + 2];
    tmp.applyProjection(this);
    a[i] = tmp.x;
    a[i + 1] = tmp.y;
    a[i + 2] = tmp.z
  }
  return a
}, rotateAxis:function(v) {
  var te = this.elements;
  var vx = v.x, vy = v.y, vz = v.z;
  v.x = vx * te[0] + vy * te[4] + vz * te[8];
  v.y = vx * te[1] + vy * te[5] + vz * te[9];
  v.z = vx * te[2] + vy * te[6] + vz * te[10];
  v.normalize();
  return v
}, crossVector:function(a) {
  var te = this.elements;
  var v = new THREE.Vector4;
  v.x = te[0] * a.x + te[4] * a.y + te[8] * a.z + te[12] * a.w;
  v.y = te[1] * a.x + te[5] * a.y + te[9] * a.z + te[13] * a.w;
  v.z = te[2] * a.x + te[6] * a.y + te[10] * a.z + te[14] * a.w;
  v.w = a.w ? te[3] * a.x + te[7] * a.y + te[11] * a.z + te[15] * a.w : 1;
  return v
}, determinant:function() {
  var te = this.elements;
  var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
  var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
  var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
  var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
  return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31)
}, transpose:function() {
  var te = this.elements;
  var tmp;
  tmp = te[1];
  te[1] = te[4];
  te[4] = tmp;
  tmp = te[2];
  te[2] = te[8];
  te[8] = tmp;
  tmp = te[6];
  te[6] = te[9];
  te[9] = tmp;
  tmp = te[3];
  te[3] = te[12];
  te[12] = tmp;
  tmp = te[7];
  te[7] = te[13];
  te[13] = tmp;
  tmp = te[11];
  te[11] = te[14];
  te[14] = tmp;
  return this
}, flattenToArray:function(flat) {
  var te = this.elements;
  flat[0] = te[0];
  flat[1] = te[1];
  flat[2] = te[2];
  flat[3] = te[3];
  flat[4] = te[4];
  flat[5] = te[5];
  flat[6] = te[6];
  flat[7] = te[7];
  flat[8] = te[8];
  flat[9] = te[9];
  flat[10] = te[10];
  flat[11] = te[11];
  flat[12] = te[12];
  flat[13] = te[13];
  flat[14] = te[14];
  flat[15] = te[15];
  return flat
}, flattenToArrayOffset:function(flat, offset) {
  var te = this.elements;
  flat[offset] = te[0];
  flat[offset + 1] = te[1];
  flat[offset + 2] = te[2];
  flat[offset + 3] = te[3];
  flat[offset + 4] = te[4];
  flat[offset + 5] = te[5];
  flat[offset + 6] = te[6];
  flat[offset + 7] = te[7];
  flat[offset + 8] = te[8];
  flat[offset + 9] = te[9];
  flat[offset + 10] = te[10];
  flat[offset + 11] = te[11];
  flat[offset + 12] = te[12];
  flat[offset + 13] = te[13];
  flat[offset + 14] = te[14];
  flat[offset + 15] = te[15];
  return flat
}, getPosition:function() {
  var te = this.elements;
  return THREE.Matrix4.__v1.set(te[12], te[13], te[14])
}, setPosition:function(v) {
  var te = this.elements;
  te[12] = v.x;
  te[13] = v.y;
  te[14] = v.z;
  return this
}, getColumnX:function() {
  var te = this.elements;
  return THREE.Matrix4.__v1.set(te[0], te[1], te[2])
}, getColumnY:function() {
  var te = this.elements;
  return THREE.Matrix4.__v1.set(te[4], te[5], te[6])
}, getColumnZ:function() {
  var te = this.elements;
  return THREE.Matrix4.__v1.set(te[8], te[9], te[10])
}, getInverse:function(m, throwOnInvertible) {
  var te = this.elements;
  var me = m.elements;
  var n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];
  var n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];
  var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];
  var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];
  te[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
  te[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
  te[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
  te[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
  te[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
  te[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
  te[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
  te[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
  te[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
  te[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
  te[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
  te[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
  te[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
  te[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
  te[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
  te[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;
  var det = me[0] * te[0] + me[1] * te[4] + me[2] * te[8] + me[3] * te[12];
  if(det == 0) {
    var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";
    if(throwOnInvertible || false) {
      throw new Error(msg);
    }else {
      console.warn(msg)
    }
    this.identity();
    return this
  }
  this.multiplyScalar(1 / det);
  return this
}, compose:function(translation, rotation, scale) {
  var te = this.elements;
  var mRotation = THREE.Matrix4.__m1;
  var mScale = THREE.Matrix4.__m2;
  mRotation.identity();
  mRotation.setRotationFromQuaternion(rotation);
  mScale.makeScale(scale.x, scale.y, scale.z);
  this.multiplyMatrices(mRotation, mScale);
  te[12] = translation.x;
  te[13] = translation.y;
  te[14] = translation.z;
  return this
}, decompose:function(translation, rotation, scale) {
  var te = this.elements;
  var x = THREE.Matrix4.__v1;
  var y = THREE.Matrix4.__v2;
  var z = THREE.Matrix4.__v3;
  x.set(te[0], te[1], te[2]);
  y.set(te[4], te[5], te[6]);
  z.set(te[8], te[9], te[10]);
  translation = translation instanceof THREE.Vector3 ? translation : new THREE.Vector3;
  rotation = rotation instanceof THREE.Quaternion ? rotation : new THREE.Quaternion;
  scale = scale instanceof THREE.Vector3 ? scale : new THREE.Vector3;
  scale.x = x.length();
  scale.y = y.length();
  scale.z = z.length();
  translation.x = te[12];
  translation.y = te[13];
  translation.z = te[14];
  var matrix = THREE.Matrix4.__m1;
  matrix.copy(this);
  matrix.elements[0] /= scale.x;
  matrix.elements[1] /= scale.x;
  matrix.elements[2] /= scale.x;
  matrix.elements[4] /= scale.y;
  matrix.elements[5] /= scale.y;
  matrix.elements[6] /= scale.y;
  matrix.elements[8] /= scale.z;
  matrix.elements[9] /= scale.z;
  matrix.elements[10] /= scale.z;
  rotation.setFromRotationMatrix(matrix);
  return[translation, rotation, scale]
}, extractPosition:function(m) {
  var te = this.elements;
  var me = m.elements;
  te[12] = me[12];
  te[13] = me[13];
  te[14] = me[14];
  return this
}, extractRotation:function(m) {
  var te = this.elements;
  var me = m.elements;
  var vector = THREE.Matrix4.__v1;
  var scaleX = 1 / vector.set(me[0], me[1], me[2]).length();
  var scaleY = 1 / vector.set(me[4], me[5], me[6]).length();
  var scaleZ = 1 / vector.set(me[8], me[9], me[10]).length();
  te[0] = me[0] * scaleX;
  te[1] = me[1] * scaleX;
  te[2] = me[2] * scaleX;
  te[4] = me[4] * scaleY;
  te[5] = me[5] * scaleY;
  te[6] = me[6] * scaleY;
  te[8] = me[8] * scaleZ;
  te[9] = me[9] * scaleZ;
  te[10] = me[10] * scaleZ;
  return this
}, translate:function(v) {
  var te = this.elements;
  var x = v.x, y = v.y, z = v.z;
  te[12] = te[0] * x + te[4] * y + te[8] * z + te[12];
  te[13] = te[1] * x + te[5] * y + te[9] * z + te[13];
  te[14] = te[2] * x + te[6] * y + te[10] * z + te[14];
  te[15] = te[3] * x + te[7] * y + te[11] * z + te[15];
  return this
}, rotateX:function(angle) {
  var te = this.elements;
  var m12 = te[4];
  var m22 = te[5];
  var m32 = te[6];
  var m42 = te[7];
  var m13 = te[8];
  var m23 = te[9];
  var m33 = te[10];
  var m43 = te[11];
  var c = Math.cos(angle);
  var s = Math.sin(angle);
  te[4] = c * m12 + s * m13;
  te[5] = c * m22 + s * m23;
  te[6] = c * m32 + s * m33;
  te[7] = c * m42 + s * m43;
  te[8] = c * m13 - s * m12;
  te[9] = c * m23 - s * m22;
  te[10] = c * m33 - s * m32;
  te[11] = c * m43 - s * m42;
  return this
}, rotateY:function(angle) {
  var te = this.elements;
  var m11 = te[0];
  var m21 = te[1];
  var m31 = te[2];
  var m41 = te[3];
  var m13 = te[8];
  var m23 = te[9];
  var m33 = te[10];
  var m43 = te[11];
  var c = Math.cos(angle);
  var s = Math.sin(angle);
  te[0] = c * m11 - s * m13;
  te[1] = c * m21 - s * m23;
  te[2] = c * m31 - s * m33;
  te[3] = c * m41 - s * m43;
  te[8] = c * m13 + s * m11;
  te[9] = c * m23 + s * m21;
  te[10] = c * m33 + s * m31;
  te[11] = c * m43 + s * m41;
  return this
}, rotateZ:function(angle) {
  var te = this.elements;
  var m11 = te[0];
  var m21 = te[1];
  var m31 = te[2];
  var m41 = te[3];
  var m12 = te[4];
  var m22 = te[5];
  var m32 = te[6];
  var m42 = te[7];
  var c = Math.cos(angle);
  var s = Math.sin(angle);
  te[0] = c * m11 + s * m12;
  te[1] = c * m21 + s * m22;
  te[2] = c * m31 + s * m32;
  te[3] = c * m41 + s * m42;
  te[4] = c * m12 - s * m11;
  te[5] = c * m22 - s * m21;
  te[6] = c * m32 - s * m31;
  te[7] = c * m42 - s * m41;
  return this
}, rotateByAxis:function(axis, angle) {
  var te = this.elements;
  if(axis.x === 1 && axis.y === 0 && axis.z === 0) {
    return this.rotateX(angle)
  }else {
    if(axis.x === 0 && axis.y === 1 && axis.z === 0) {
      return this.rotateY(angle)
    }else {
      if(axis.x === 0 && axis.y === 0 && axis.z === 1) {
        return this.rotateZ(angle)
      }
    }
  }
  var x = axis.x, y = axis.y, z = axis.z;
  var n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  var xx = x * x, yy = y * y, zz = z * z;
  var c = Math.cos(angle);
  var s = Math.sin(angle);
  var oneMinusCosine = 1 - c;
  var xy = x * y * oneMinusCosine;
  var xz = x * z * oneMinusCosine;
  var yz = y * z * oneMinusCosine;
  var xs = x * s;
  var ys = y * s;
  var zs = z * s;
  var r11 = xx + (1 - xx) * c;
  var r21 = xy + zs;
  var r31 = xz - ys;
  var r12 = xy - zs;
  var r22 = yy + (1 - yy) * c;
  var r32 = yz + xs;
  var r13 = xz + ys;
  var r23 = yz - xs;
  var r33 = zz + (1 - zz) * c;
  var m11 = te[0], m21 = te[1], m31 = te[2], m41 = te[3];
  var m12 = te[4], m22 = te[5], m32 = te[6], m42 = te[7];
  var m13 = te[8], m23 = te[9], m33 = te[10], m43 = te[11];
  var m14 = te[12], m24 = te[13], m34 = te[14], m44 = te[15];
  te[0] = r11 * m11 + r21 * m12 + r31 * m13;
  te[1] = r11 * m21 + r21 * m22 + r31 * m23;
  te[2] = r11 * m31 + r21 * m32 + r31 * m33;
  te[3] = r11 * m41 + r21 * m42 + r31 * m43;
  te[4] = r12 * m11 + r22 * m12 + r32 * m13;
  te[5] = r12 * m21 + r22 * m22 + r32 * m23;
  te[6] = r12 * m31 + r22 * m32 + r32 * m33;
  te[7] = r12 * m41 + r22 * m42 + r32 * m43;
  te[8] = r13 * m11 + r23 * m12 + r33 * m13;
  te[9] = r13 * m21 + r23 * m22 + r33 * m23;
  te[10] = r13 * m31 + r23 * m32 + r33 * m33;
  te[11] = r13 * m41 + r23 * m42 + r33 * m43;
  return this
}, scale:function(v) {
  var te = this.elements;
  var x = v.x, y = v.y, z = v.z;
  te[0] *= x;
  te[4] *= y;
  te[8] *= z;
  te[1] *= x;
  te[5] *= y;
  te[9] *= z;
  te[2] *= x;
  te[6] *= y;
  te[10] *= z;
  te[3] *= x;
  te[7] *= y;
  te[11] *= z;
  return this
}, getMaxScaleOnAxis:function() {
  var te = this.elements;
  var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
  var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
  var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
  return Math.sqrt(Math.max(scaleXSq, Math.max(scaleYSq, scaleZSq)))
}, makeTranslation:function(x, y, z) {
  this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
  return this
}, makeRotationX:function(theta) {
  var c = Math.cos(theta), s = Math.sin(theta);
  this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
  return this
}, makeRotationY:function(theta) {
  var c = Math.cos(theta), s = Math.sin(theta);
  this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
  return this
}, makeRotationZ:function(theta) {
  var c = Math.cos(theta), s = Math.sin(theta);
  this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  return this
}, makeRotationAxis:function(axis, angle) {
  var c = Math.cos(angle);
  var s = Math.sin(angle);
  var t = 1 - c;
  var x = axis.x, y = axis.y, z = axis.z;
  var tx = t * x, ty = t * y;
  this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
  return this
}, makeScale:function(x, y, z) {
  this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
  return this
}, makeFrustum:function(left, right, bottom, top, near, far) {
  var te = this.elements;
  var x = 2 * near / (right - left);
  var y = 2 * near / (top - bottom);
  var a = (right + left) / (right - left);
  var b = (top + bottom) / (top - bottom);
  var c = -(far + near) / (far - near);
  var d = -2 * far * near / (far - near);
  te[0] = x;
  te[4] = 0;
  te[8] = a;
  te[12] = 0;
  te[1] = 0;
  te[5] = y;
  te[9] = b;
  te[13] = 0;
  te[2] = 0;
  te[6] = 0;
  te[10] = c;
  te[14] = d;
  te[3] = 0;
  te[7] = 0;
  te[11] = -1;
  te[15] = 0;
  return this
}, makePerspective:function(fov, aspect, near, far) {
  var ymax = near * Math.tan(THREE.Math.degToRad(fov * 0.5));
  var ymin = -ymax;
  var xmin = ymin * aspect;
  var xmax = ymax * aspect;
  return this.makeFrustum(xmin, xmax, ymin, ymax, near, far)
}, makeOrthographic:function(left, right, top, bottom, near, far) {
  var te = this.elements;
  var w = right - left;
  var h = top - bottom;
  var p = far - near;
  var x = (right + left) / w;
  var y = (top + bottom) / h;
  var z = (far + near) / p;
  te[0] = 2 / w;
  te[4] = 0;
  te[8] = 0;
  te[12] = -x;
  te[1] = 0;
  te[5] = 2 / h;
  te[9] = 0;
  te[13] = -y;
  te[2] = 0;
  te[6] = 0;
  te[10] = -2 / p;
  te[14] = -z;
  te[3] = 0;
  te[7] = 0;
  te[11] = 0;
  te[15] = 1;
  return this
}, clone:function() {
  var te = this.elements;
  return new THREE.Matrix4(te[0], te[4], te[8], te[12], te[1], te[5], te[9], te[13], te[2], te[6], te[10], te[14], te[3], te[7], te[11], te[15])
}};
THREE.Matrix4.__v1 = new THREE.Vector3;
THREE.Matrix4.__v2 = new THREE.Vector3;
THREE.Matrix4.__v3 = new THREE.Vector3;
THREE.Matrix4.__m1 = new THREE.Matrix4;
THREE.Matrix4.__m2 = new THREE.Matrix4;
THREE.Ray = function(origin, direction) {
  this.origin = origin !== undefined ? origin : new THREE.Vector3;
  this.direction = direction !== undefined ? direction : new THREE.Vector3
};
THREE.Ray.prototype = {constructor:THREE.Ray, set:function(origin, direction) {
  this.origin.copy(origin);
  this.direction.copy(direction);
  return this
}, copy:function(ray) {
  this.origin.copy(ray.origin);
  this.direction.copy(ray.direction);
  return this
}, at:function(t, optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  return result.copy(this.direction).multiplyScalar(t).add(this.origin)
}, recast:function(t) {
  this.origin.copy(this.at(t, THREE.Ray.__v1));
  return this
}, closestPointToPoint:function(point, optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  result.subVectors(point, this.origin);
  var directionDistance = result.dot(this.direction);
  return result.copy(this.direction).multiplyScalar(directionDistance).add(this.origin)
}, distanceToPoint:function(point) {
  var directionDistance = THREE.Ray.__v1.subVectors(point, this.origin).dot(this.direction);
  THREE.Ray.__v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
  return THREE.Ray.__v1.distanceTo(point)
}, isIntersectionSphere:function(sphere) {
  return this.distanceToPoint(sphere.center) <= sphere.radius
}, isIntersectionPlane:function(plane) {
  var denominator = plane.normal.dot(this.direction);
  if(denominator != 0) {
    return true
  }
  if(plane.distanceToPoint(this.origin) == 0) {
    return true
  }
  return false
}, distanceToPlane:function(plane) {
  var denominator = plane.normal.dot(this.direction);
  if(denominator == 0) {
    if(plane.distanceToPoint(this.origin) == 0) {
      return 0
    }
    return undefined
  }
  var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
  return t
}, intersectPlane:function(plane, optionalTarget) {
  var t = this.distanceToPlane(plane);
  if(t === undefined) {
    return undefined
  }
  return this.at(t, optionalTarget)
}, transform:function(matrix4) {
  this.direction.add(this.origin).applyMatrix4(matrix4);
  this.origin.applyMatrix4(matrix4);
  this.direction.sub(this.origin);
  return this
}, equals:function(ray) {
  return ray.origin.equals(this.origin) && ray.direction.equals(this.direction)
}, clone:function() {
  return(new THREE.Ray).copy(this)
}};
THREE.Ray.__v1 = new THREE.Vector3;
THREE.Ray.__v2 = new THREE.Vector3;
THREE.Sphere = function(center, radius) {
  this.center = center !== undefined ? center : new THREE.Vector3;
  this.radius = radius !== undefined ? radius : 0
};
THREE.Sphere.prototype = {constructor:THREE.Sphere, set:function(center, radius) {
  this.center.copy(center);
  this.radius = radius;
  return this
}, setFromCenterAndPoints:function(center, points) {
  var maxRadiusSq = 0;
  for(var i = 0, il = points.length;i < il;i++) {
    var radiusSq = center.distanceToSquared(points[i]);
    maxRadiusSq = Math.max(maxRadiusSq, radiusSq)
  }
  this.center = center;
  this.radius = Math.sqrt(maxRadiusSq);
  return this
}, copy:function(sphere) {
  this.center.copy(sphere.center);
  this.radius = sphere.radius;
  return this
}, empty:function() {
  return this.radius <= 0
}, containsPoint:function(point) {
  return point.distanceToSquared(this.center) <= this.radius * this.radius
}, distanceToPoint:function(point) {
  return point.distanceTo(this.center) - this.radius
}, intersectsSphere:function(sphere) {
  var radiusSum = this.radius + sphere.radius;
  return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum
}, clampPoint:function(point, optionalTarget) {
  var deltaLengthSq = this.center.distanceToSquared(point);
  var result = optionalTarget || new THREE.Vector3;
  result.copy(point);
  if(deltaLengthSq > this.radius * this.radius) {
    result.sub(this.center).normalize();
    result.multiplyScalar(this.radius).add(this.center)
  }
  return result
}, getBoundingBox:function(optionalTarget) {
  var box = optionalTarget || new THREE.Box3;
  box.set(this.center, this.center);
  box.expandByScalar(this.radius);
  return box
}, transform:function(matrix) {
  this.center.applyMatrix4(matrix);
  this.radius = this.radius * matrix.getMaxScaleOnAxis();
  return this
}, translate:function(offset) {
  this.center.add(offset);
  return this
}, equals:function(sphere) {
  return sphere.center.equals(this.center) && sphere.radius === this.radius
}, clone:function() {
  return(new THREE.Sphere).copy(this)
}};
THREE.Frustum = function(p0, p1, p2, p3, p4, p5) {
  this.planes = [p0 !== undefined ? p0 : new THREE.Plane, p1 !== undefined ? p1 : new THREE.Plane, p2 !== undefined ? p2 : new THREE.Plane, p3 !== undefined ? p3 : new THREE.Plane, p4 !== undefined ? p4 : new THREE.Plane, p5 !== undefined ? p5 : new THREE.Plane]
};
THREE.Frustum.prototype = {set:function(p0, p1, p2, p3, p4, p5) {
  var planes = this.planes;
  planes[0].copy(p0);
  planes[1].copy(p1);
  planes[2].copy(p2);
  planes[3].copy(p3);
  planes[4].copy(p4);
  planes[5].copy(p5);
  return this
}, copy:function(frustum) {
  var planes = this.planes;
  for(var i = 0;i < 6;i++) {
    planes[i].copy(frustum.planes[i])
  }
  return this
}, setFromMatrix:function(m) {
  var planes = this.planes;
  var me = m.elements;
  var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
  var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
  var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
  var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
  planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
  planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
  planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
  planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
  planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
  planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
  return this
}, intersectsObject:function(object) {
  var matrix = object.matrixWorld;
  var planes = this.planes;
  var center = matrix.getPosition();
  var negRadius = -object.geometry.boundingSphere.radius * matrix.getMaxScaleOnAxis();
  for(var i = 0;i < 6;i++) {
    var distance = planes[i].distanceToPoint(center);
    if(distance < negRadius) {
      return false
    }
  }
  return true
}, intersectsSphere:function(sphere) {
  var planes = this.planes;
  var center = sphere.center;
  var negRadius = -sphere.radius;
  for(var i = 0;i < 6;i++) {
    var distance = planes[i].distanceToPoint(center);
    if(distance < negRadius) {
      return false
    }
  }
  return true
}, containsPoint:function(point) {
  var planes = this.planes;
  for(var i = 0;i < 6;i++) {
    if(planes[i].distanceToPoint(point) < 0) {
      return false
    }
  }
  return true
}, clone:function() {
  return(new THREE.Frustum).copy(this)
}};
THREE.Plane = function(normal, constant) {
  this.normal = normal !== undefined ? normal : new THREE.Vector3(1, 0, 0);
  this.constant = constant !== undefined ? constant : 0
};
THREE.Plane.prototype = {constructor:THREE.Plane, set:function(normal, constant) {
  this.normal.copy(normal);
  this.constant = constant;
  return this
}, setComponents:function(x, y, z, w) {
  this.normal.set(x, y, z);
  this.constant = w;
  return this
}, setFromNormalAndCoplanarPoint:function(normal, point) {
  this.normal.copy(normal);
  this.constant = -point.dot(this.normal);
  return this
}, setFromCoplanarPoints:function(a, b, c) {
  var normal = THREE.Plane.__v1.subVectors(c, b).cross(THREE.Plane.__v2.subVectors(a, b)).normalize();
  this.setFromNormalAndCoplanarPoint(normal, a);
  return this
}, copy:function(plane) {
  this.normal.copy(plane.normal);
  this.constant = plane.constant;
  return this
}, normalize:function() {
  var inverseNormalLength = 1 / this.normal.length();
  this.normal.multiplyScalar(inverseNormalLength);
  this.constant *= inverseNormalLength;
  return this
}, negate:function() {
  this.constant *= -1;
  this.normal.negate();
  return this
}, distanceToPoint:function(point) {
  return this.normal.dot(point) + this.constant
}, distanceToSphere:function(sphere) {
  return this.distanceToPoint(sphere.center) - sphere.radius
}, projectPoint:function(point, optionalTarget) {
  return this.orthoPoint(point, optionalTarget).sub(point).negate()
}, orthoPoint:function(point, optionalTarget) {
  var perpendicularMagnitude = this.distanceToPoint(point);
  var result = optionalTarget || new THREE.Vector3;
  return result.copy(this.normal).multiplyScalar(perpendicularMagnitude)
}, isIntersectionLine:function(startPoint, endPoint) {
  var startSign = this.distanceToPoint(startPoint);
  var endSign = this.distanceToPoint(endPoint);
  return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0
}, intersectLine:function(startPoint, endPoint, optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  var direction = THREE.Plane.__v1.subVectors(endPoint, startPoint);
  var denominator = this.normal.dot(direction);
  if(denominator == 0) {
    if(this.distanceToPoint(startPoint) == 0) {
      return result.copy(startPoint)
    }
    return undefined
  }
  var t = -(startPoint.dot(this.normal) + this.constant) / denominator;
  if(t < 0 || t > 1) {
    return undefined
  }
  return result.copy(direction).multiplyScalar(t).add(startPoint)
}, coplanarPoint:function(optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  return result.copy(this.normal).multiplyScalar(-this.constant)
}, transform:function(matrix, optionalNormalMatrix) {
  optionalNormalMatrix = optionalNormalMatrix || (new THREE.Matrix3).getInverse(matrix).transpose();
  var newNormal = THREE.Plane.__v1.copy(this.normal).applyMatrix3(optionalNormalMatrix);
  var newCoplanarPoint = this.coplanarPoint(THREE.Plane.__v2);
  newCoplanarPoint.applyMatrix4(matrix);
  this.setFromNormalAndCoplanarPoint(newNormal, newCoplanarPoint);
  return this
}, translate:function(offset) {
  this.constant = this.constant - offset.dot(this.normal);
  return this
}, equals:function(plane) {
  return plane.normal.equals(this.normal) && plane.constant == this.constant
}, clone:function() {
  return(new THREE.Plane).copy(this)
}};
THREE.Plane.__vZero = new THREE.Vector3(0, 0, 0);
THREE.Plane.__v1 = new THREE.Vector3;
THREE.Plane.__v2 = new THREE.Vector3;
THREE.Math = {clamp:function(x, a, b) {
  return x < a ? a : x > b ? b : x
}, clampBottom:function(x, a) {
  return x < a ? a : x
}, mapLinear:function(x, a1, a2, b1, b2) {
  return b1 + (x - a1) * (b2 - b1) / (a2 - a1)
}, random16:function() {
  return(65280 * Math.random() + 255 * Math.random()) / 65535
}, randInt:function(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1))
}, randFloat:function(low, high) {
  return low + Math.random() * (high - low)
}, randFloatSpread:function(range) {
  return range * (0.5 - Math.random())
}, sign:function(x) {
  return x < 0 ? -1 : x > 0 ? 1 : 0
}, degToRad:function(degrees) {
  return degrees * THREE.Math.__d2r
}, radToDeg:function(radians) {
  return radians * THREE.Math.__r2d
}};
THREE.Math.__d2r = Math.PI / 180;
THREE.Math.__r2d = 180 / Math.PI;
THREE.Spline = function(points) {
  this.points = points;
  var c = [], v3 = {x:0, y:0, z:0}, point, intPoint, weight, w2, w3, pa, pb, pc, pd;
  this.initFromArray = function(a) {
    this.points = [];
    for(var i = 0;i < a.length;i++) {
      this.points[i] = {x:a[i][0], y:a[i][1], z:a[i][2]}
    }
  };
  this.getPoint = function(k) {
    point = (this.points.length - 1) * k;
    intPoint = Math.floor(point);
    weight = point - intPoint;
    c[0] = intPoint === 0 ? intPoint : intPoint - 1;
    c[1] = intPoint;
    c[2] = intPoint > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
    c[3] = intPoint > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;
    pa = this.points[c[0]];
    pb = this.points[c[1]];
    pc = this.points[c[2]];
    pd = this.points[c[3]];
    w2 = weight * weight;
    w3 = weight * w2;
    v3.x = interpolate(pa.x, pb.x, pc.x, pd.x, weight, w2, w3);
    v3.y = interpolate(pa.y, pb.y, pc.y, pd.y, weight, w2, w3);
    v3.z = interpolate(pa.z, pb.z, pc.z, pd.z, weight, w2, w3);
    return v3
  };
  this.getControlPointsArray = function() {
    var i, p, l = this.points.length, coords = [];
    for(i = 0;i < l;i++) {
      p = this.points[i];
      coords[i] = [p.x, p.y, p.z]
    }
    return coords
  };
  this.getLength = function(nSubDivisions) {
    var i, index, nSamples, position, point = 0, intPoint = 0, oldIntPoint = 0, oldPosition = new THREE.Vector3, tmpVec = new THREE.Vector3, chunkLengths = [], totalLength = 0;
    chunkLengths[0] = 0;
    if(!nSubDivisions) {
      nSubDivisions = 100
    }
    nSamples = this.points.length * nSubDivisions;
    oldPosition.copy(this.points[0]);
    for(i = 1;i < nSamples;i++) {
      index = i / nSamples;
      position = this.getPoint(index);
      tmpVec.copy(position);
      totalLength += tmpVec.distanceTo(oldPosition);
      oldPosition.copy(position);
      point = (this.points.length - 1) * index;
      intPoint = Math.floor(point);
      if(intPoint != oldIntPoint) {
        chunkLengths[intPoint] = totalLength;
        oldIntPoint = intPoint
      }
    }
    chunkLengths[chunkLengths.length] = totalLength;
    return{chunks:chunkLengths, total:totalLength}
  };
  this.reparametrizeByArcLength = function(samplingCoef) {
    var i, j, index, indexCurrent, indexNext, linearDistance, realDistance, sampling, position, newpoints = [], tmpVec = new THREE.Vector3, sl = this.getLength();
    newpoints.push(tmpVec.copy(this.points[0]).clone());
    for(i = 1;i < this.points.length;i++) {
      realDistance = sl.chunks[i] - sl.chunks[i - 1];
      sampling = Math.ceil(samplingCoef * realDistance / sl.total);
      indexCurrent = (i - 1) / (this.points.length - 1);
      indexNext = i / (this.points.length - 1);
      for(j = 1;j < sampling - 1;j++) {
        index = indexCurrent + j * (1 / sampling) * (indexNext - indexCurrent);
        position = this.getPoint(index);
        newpoints.push(tmpVec.copy(position).clone())
      }
      newpoints.push(tmpVec.copy(this.points[i]).clone())
    }
    this.points = newpoints
  };
  function interpolate(p0, p1, p2, p3, t, t2, t3) {
    var v0 = (p2 - p0) * 0.5, v1 = (p3 - p1) * 0.5;
    return(2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1
  }
};
THREE.Triangle = function(a, b, c) {
  this.a = a !== undefined ? a : new THREE.Vector3;
  this.b = b !== undefined ? b : new THREE.Vector3;
  this.c = c !== undefined ? c : new THREE.Vector3
};
THREE.Triangle.normal = function(a, b, c, optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  result.subVectors(c, b);
  THREE.Triangle.__v0.subVectors(a, b);
  result.cross(THREE.Triangle.__v0);
  var resultLengthSq = result.lengthSq();
  if(resultLengthSq > 0) {
    return result.multiplyScalar(1 / Math.sqrt(resultLengthSq))
  }
  return result.set(0, 0, 0)
};
THREE.Triangle.barycoordFromPoint = function(point, a, b, c, optionalTarget) {
  THREE.Triangle.__v0.subVectors(c, a);
  THREE.Triangle.__v1.subVectors(b, a);
  THREE.Triangle.__v2.subVectors(point, a);
  var dot00 = THREE.Triangle.__v0.dot(THREE.Triangle.__v0);
  var dot01 = THREE.Triangle.__v0.dot(THREE.Triangle.__v1);
  var dot02 = THREE.Triangle.__v0.dot(THREE.Triangle.__v2);
  var dot11 = THREE.Triangle.__v1.dot(THREE.Triangle.__v1);
  var dot12 = THREE.Triangle.__v1.dot(THREE.Triangle.__v2);
  var denom = dot00 * dot11 - dot01 * dot01;
  var result = optionalTarget || new THREE.Vector3;
  if(denom == 0) {
    return result.set(-2, -1, -1)
  }
  var invDenom = 1 / denom;
  var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
  var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
  return result.set(1 - u - v, v, u)
};
THREE.Triangle.containsPoint = function(point, a, b, c) {
  var result = THREE.Triangle.barycoordFromPoint(point, a, b, c, THREE.Triangle.__v3);
  return result.x >= 0 && result.y >= 0 && result.x + result.y <= 1
};
THREE.Triangle.prototype = {constructor:THREE.Triangle, set:function(a, b, c) {
  this.a.copy(a);
  this.b.copy(b);
  this.c.copy(c);
  return this
}, setFromPointsAndIndices:function(points, i0, i1, i2) {
  this.a.copy(points[i0]);
  this.b.copy(points[i1]);
  this.c.copy(points[i2]);
  return this
}, copy:function(triangle) {
  this.a.copy(triangle.a);
  this.b.copy(triangle.b);
  this.c.copy(triangle.c);
  return this
}, area:function() {
  THREE.Triangle.__v0.subVectors(this.c, this.b);
  THREE.Triangle.__v1.subVectors(this.a, this.b);
  return THREE.Triangle.__v0.cross(THREE.Triangle.__v1).length() * 0.5
}, midpoint:function(optionalTarget) {
  var result = optionalTarget || new THREE.Vector3;
  return result.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
}, normal:function(optionalTarget) {
  return THREE.Triangle.normal(this.a, this.b, this.c, optionalTarget)
}, plane:function(optionalTarget) {
  var result = optionalTarget || new THREE.Plane;
  return result.setFromCoplanarPoints(this.a, this.b, this.c)
}, barycoordFromPoint:function(point, optionalTarget) {
  return THREE.Triangle.barycoordFromPoint(point, this.a, this.b, this.c, optionalTarget)
}, containsPoint:function(point) {
  return THREE.Triangle.containsPoint(point, this.a, this.b, this.c)
}, equals:function(triangle) {
  return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c)
}, clone:function() {
  return(new THREE.Triangle).copy(this)
}};
THREE.Triangle.__v0 = new THREE.Vector3;
THREE.Triangle.__v1 = new THREE.Vector3;
THREE.Triangle.__v2 = new THREE.Vector3;
THREE.Triangle.__v3 = new THREE.Vector3;
THREE.Vertex = function(v) {
  console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");
  return v
};
THREE.UV = function(u, v) {
  console.warn("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");
  return new THREE.Vector2(u, v)
};
THREE.Clock = function(autoStart) {
  this.autoStart = autoStart !== undefined ? autoStart : true;
  this.startTime = 0;
  this.oldTime = 0;
  this.elapsedTime = 0;
  this.running = false
};
THREE.Clock.prototype.start = function() {
  this.startTime = Date.now();
  this.oldTime = this.startTime;
  this.running = true
};
THREE.Clock.prototype.stop = function() {
  this.getElapsedTime();
  this.running = false
};
THREE.Clock.prototype.getElapsedTime = function() {
  this.getDelta();
  return this.elapsedTime
};
THREE.Clock.prototype.getDelta = function() {
  var diff = 0;
  if(this.autoStart && !this.running) {
    this.start()
  }
  if(this.running) {
    var newTime = Date.now();
    diff = 0.0010 * (newTime - this.oldTime);
    this.oldTime = newTime;
    this.elapsedTime += diff
  }
  return diff
};
THREE.EventDispatcher = function() {
  var listeners = {};
  this.addEventListener = function(type, listener) {
    if(listeners[type] === undefined) {
      listeners[type] = []
    }
    if(listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener)
    }
  };
  this.removeEventListener = function(type, listener) {
    var index = listeners[type].indexOf(listener);
    if(index !== -1) {
      listeners[type].splice(index, 1)
    }
  };
  this.dispatchEvent = function(event) {
    var listenerArray = listeners[event.type];
    if(listenerArray !== undefined) {
      event.target = this;
      for(var i = 0, l = listenerArray.length;i < l;i++) {
        listenerArray[i].call(this, event)
      }
    }
  }
};
(function(THREE) {
  THREE.Raycaster = function(origin, direction, near, far) {
    this.ray = new THREE.Ray(origin, direction);
    if(this.ray.direction.length() > 0) {
      this.ray.direction.normalize()
    }
    this.near = near || 0;
    this.far = far || Infinity
  };
  var sphere = new THREE.Sphere;
  var localRay = new THREE.Ray;
  var facePlane = new THREE.Plane;
  var intersectPoint = new THREE.Vector3;
  var inverseMatrix = new THREE.Matrix4;
  var descSort = function(a, b) {
    return a.distance - b.distance
  };
  var intersectObject = function(object, raycaster, intersects) {
    if(object instanceof THREE.Particle) {
      var distance = raycaster.ray.distanceToPoint(object.matrixWorld.getPosition());
      if(distance > object.scale.x) {
        return intersects
      }
      intersects.push({distance:distance, point:object.position, face:null, object:object})
    }else {
      if(object instanceof THREE.Mesh) {
        sphere.set(object.matrixWorld.getPosition(), object.geometry.boundingSphere.radius * object.matrixWorld.getMaxScaleOnAxis());
        if(!raycaster.ray.isIntersectionSphere(sphere)) {
          return intersects
        }
        var geometry = object.geometry;
        var vertices = geometry.vertices;
        var isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
        var objectMaterials = isFaceMaterial === true ? object.material.materials : null;
        var side = object.material.side;
        var a, b, c, d;
        var precision = raycaster.precision;
        object.matrixRotationWorld.extractRotation(object.matrixWorld);
        inverseMatrix.getInverse(object.matrixWorld);
        localRay.copy(raycaster.ray).transform(inverseMatrix);
        for(var f = 0, fl = geometry.faces.length;f < fl;f++) {
          var face = geometry.faces[f];
          var material = isFaceMaterial === true ? objectMaterials[face.materialIndex] : object.material;
          if(material === undefined) {
            continue
          }
          facePlane.setFromNormalAndCoplanarPoint(face.normal, vertices[face.a]);
          var planeDistance = localRay.distanceToPlane(facePlane);
          if(Math.abs(planeDistance) < precision) {
            continue
          }
          if(planeDistance < 0) {
            continue
          }
          side = material.side;
          if(side !== THREE.DoubleSide) {
            var planeSign = localRay.direction.dot(facePlane.normal);
            if(!(side === THREE.FrontSide ? planeSign < 0 : planeSign > 0)) {
              continue
            }
          }
          if(planeDistance < raycaster.near || planeDistance > raycaster.far) {
            continue
          }
          intersectPoint = localRay.at(planeDistance, intersectPoint);
          if(face instanceof THREE.Face3) {
            a = vertices[face.a];
            b = vertices[face.b];
            c = vertices[face.c];
            if(!THREE.Triangle.containsPoint(intersectPoint, a, b, c)) {
              continue
            }
          }else {
            if(face instanceof THREE.Face4) {
              a = vertices[face.a];
              b = vertices[face.b];
              c = vertices[face.c];
              d = vertices[face.d];
              if(!THREE.Triangle.containsPoint(intersectPoint, a, b, d) && !THREE.Triangle.containsPoint(intersectPoint, b, c, d)) {
                continue
              }
            }else {
              throw Error("face type not supported");
            }
          }
          intersects.push({distance:planeDistance, point:raycaster.ray.at(planeDistance), face:face, faceIndex:f, object:object})
        }
      }
    }
  };
  var intersectDescendants = function(object, raycaster, intersects) {
    var descendants = object.getDescendants();
    for(var i = 0, l = descendants.length;i < l;i++) {
      intersectObject(descendants[i], raycaster, intersects)
    }
  };
  THREE.Raycaster.prototype.precision = 1E-4;
  THREE.Raycaster.prototype.set = function(origin, direction) {
    this.ray.set(origin, direction);
    if(this.ray.direction.length() > 0) {
      this.ray.direction.normalize()
    }
  };
  THREE.Raycaster.prototype.intersectObject = function(object, recursive) {
    var intersects = [];
    if(recursive === true) {
      intersectDescendants(object, this, intersects)
    }
    intersectObject(object, this, intersects);
    intersects.sort(descSort);
    return intersects
  };
  THREE.Raycaster.prototype.intersectObjects = function(objects, recursive) {
    var intersects = [];
    for(var i = 0, l = objects.length;i < l;i++) {
      intersectObject(objects[i], this, intersects);
      if(recursive === true) {
        intersectDescendants(objects[i], this, intersects)
      }
    }
    intersects.sort(descSort);
    return intersects
  }
})(THREE);
THREE.Object3D = function() {
  this.id = THREE.Object3DIdCount++;
  this.name = "";
  this.properties = {};
  this.parent = undefined;
  this.children = [];
  this.up = new THREE.Vector3(0, 1, 0);
  this.position = new THREE.Vector3;
  this.rotation = new THREE.Vector3;
  this.eulerOrder = THREE.Object3D.defaultEulerOrder;
  this.scale = new THREE.Vector3(1, 1, 1);
  this.renderDepth = null;
  this.rotationAutoUpdate = true;
  this.matrix = new THREE.Matrix4;
  this.matrixWorld = new THREE.Matrix4;
  this.matrixRotationWorld = new THREE.Matrix4;
  this.matrixAutoUpdate = true;
  this.matrixWorldNeedsUpdate = true;
  this.quaternion = new THREE.Quaternion;
  this.useQuaternion = false;
  this.visible = true;
  this.castShadow = false;
  this.receiveShadow = false;
  this.frustumCulled = true;
  this._vector = new THREE.Vector3
};
THREE.Object3D.prototype = {constructor:THREE.Object3D, applyMatrix:function(matrix) {
  this.matrix.multiplyMatrices(matrix, this.matrix);
  this.scale.getScaleFromMatrix(this.matrix);
  var mat = (new THREE.Matrix4).extractRotation(this.matrix);
  this.rotation.setEulerFromRotationMatrix(mat, this.eulerOrder);
  this.position.getPositionFromMatrix(this.matrix)
}, translate:function(distance, axis) {
  this.matrix.rotateAxis(axis);
  this.position.add(axis.multiplyScalar(distance))
}, translateX:function(distance) {
  this.translate(distance, this._vector.set(1, 0, 0))
}, translateY:function(distance) {
  this.translate(distance, this._vector.set(0, 1, 0))
}, translateZ:function(distance) {
  this.translate(distance, this._vector.set(0, 0, 1))
}, localToWorld:function(vector) {
  return vector.applyMatrix4(this.matrixWorld)
}, worldToLocal:function(vector) {
  return vector.applyMatrix4(THREE.Object3D.__m1.getInverse(this.matrixWorld))
}, lookAt:function(vector) {
  this.matrix.lookAt(vector, this.position, this.up);
  if(this.rotationAutoUpdate) {
    if(this.useQuaternion === false) {
      this.rotation.setEulerFromRotationMatrix(this.matrix, this.eulerOrder)
    }else {
      this.quaternion.copy(this.matrix.decompose()[1])
    }
  }
}, add:function(object) {
  if(object === this) {
    console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");
    return
  }
  if(object instanceof THREE.Object3D) {
    if(object.parent !== undefined) {
      object.parent.remove(object)
    }
    object.parent = this;
    this.children.push(object);
    var scene = this;
    while(scene.parent !== undefined) {
      scene = scene.parent
    }
    if(scene !== undefined && scene instanceof THREE.Scene) {
      scene.__addObject(object)
    }
  }
}, remove:function(object) {
  var index = this.children.indexOf(object);
  if(index !== -1) {
    object.parent = undefined;
    this.children.splice(index, 1);
    var scene = this;
    while(scene.parent !== undefined) {
      scene = scene.parent
    }
    if(scene !== undefined && scene instanceof THREE.Scene) {
      scene.__removeObject(object)
    }
  }
}, traverse:function(callback) {
  callback(this);
  for(var i = 0, l = this.children.length;i < l;i++) {
    this.children[i].traverse(callback)
  }
}, getChildByName:function(name, recursive) {
  for(var i = 0, l = this.children.length;i < l;i++) {
    var child = this.children[i];
    if(child.name === name) {
      return child
    }
    if(recursive === true) {
      child = child.getChildByName(name, recursive);
      if(child !== undefined) {
        return child
      }
    }
  }
  return undefined
}, getDescendants:function(array) {
  if(array === undefined) {
    array = []
  }
  Array.prototype.push.apply(array, this.children);
  for(var i = 0, l = this.children.length;i < l;i++) {
    this.children[i].getDescendants(array)
  }
  return array
}, updateMatrix:function() {
  this.matrix.setPosition(this.position);
  if(this.useQuaternion === false) {
    this.matrix.setRotationFromEuler(this.rotation, this.eulerOrder)
  }else {
    this.matrix.setRotationFromQuaternion(this.quaternion)
  }
  if(this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1) {
    this.matrix.scale(this.scale)
  }
  this.matrixWorldNeedsUpdate = true
}, updateMatrixWorld:function(force) {
  if(this.matrixAutoUpdate === true) {
    this.updateMatrix()
  }
  if(this.matrixWorldNeedsUpdate === true || force === true) {
    if(this.parent === undefined) {
      this.matrixWorld.copy(this.matrix)
    }else {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)
    }
    this.matrixWorldNeedsUpdate = false;
    force = true
  }
  for(var i = 0, l = this.children.length;i < l;i++) {
    this.children[i].updateMatrixWorld(force)
  }
}, clone:function(object) {
  if(object === undefined) {
    object = new THREE.Object3D
  }
  object.name = this.name;
  object.up.copy(this.up);
  object.position.copy(this.position);
  if(object.rotation instanceof THREE.Vector3) {
    object.rotation.copy(this.rotation)
  }
  object.eulerOrder = this.eulerOrder;
  object.scale.copy(this.scale);
  object.renderDepth = this.renderDepth;
  object.rotationAutoUpdate = this.rotationAutoUpdate;
  object.matrix.copy(this.matrix);
  object.matrixWorld.copy(this.matrixWorld);
  object.matrixRotationWorld.copy(this.matrixRotationWorld);
  object.matrixAutoUpdate = this.matrixAutoUpdate;
  object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;
  object.quaternion.copy(this.quaternion);
  object.useQuaternion = this.useQuaternion;
  object.visible = this.visible;
  object.castShadow = this.castShadow;
  object.receiveShadow = this.receiveShadow;
  object.frustumCulled = this.frustumCulled;
  for(var i = 0;i < this.children.length;i++) {
    var child = this.children[i];
    object.add(child.clone())
  }
  return object
}};
THREE.Object3D.__m1 = new THREE.Matrix4;
THREE.Object3D.defaultEulerOrder = "XYZ", THREE.Object3DIdCount = 0;
THREE.Projector = function() {
  var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _face3Count, _face3Pool = [], _face3PoolLength = 0, _face4Count, _face4Pool = [], _face4PoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _particle, _particleCount, _particlePool = [], _particlePoolLength = 0, _renderData = {objects:[], sprites:[], lights:[], elements:[]}, _vector3 = new THREE.Vector3, _vector4 = new THREE.Vector4, _clipBox = 
  new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3, _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4, _viewProjectionMatrix = new THREE.Matrix4, _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4, _normalMatrix = new THREE.Matrix3, _normalViewMatrix = new THREE.Matrix3, _centroid = new THREE.Vector3, _frustum = new THREE.Frustum, _clippedVertex1PositionScreen = new THREE.Vector4, _clippedVertex2PositionScreen = 
  new THREE.Vector4, _face3VertexNormals;
  this.projectVector = function(vector, camera) {
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    return vector.applyProjection(_viewProjectionMatrix)
  };
  this.unprojectVector = function(vector, camera) {
    camera.projectionMatrixInverse.getInverse(camera.projectionMatrix);
    _viewProjectionMatrix.multiplyMatrices(camera.matrixWorld, camera.projectionMatrixInverse);
    return vector.applyProjection(_viewProjectionMatrix)
  };
  this.pickingRay = function(vector, camera) {
    vector.z = -1;
    var end = new THREE.Vector3(vector.x, vector.y, 1);
    this.unprojectVector(vector, camera);
    this.unprojectVector(end, camera);
    end.sub(vector).normalize();
    return new THREE.Raycaster(vector, end)
  };
  var projectGraph = function(root, sortObjects) {
    _objectCount = 0;
    _renderData.objects.length = 0;
    _renderData.sprites.length = 0;
    _renderData.lights.length = 0;
    var projectObject = function(parent) {
      for(var c = 0, cl = parent.children.length;c < cl;c++) {
        var object = parent.children[c];
        if(object.visible === false) {
          continue
        }
        if(object instanceof THREE.Light) {
          _renderData.lights.push(object)
        }else {
          if(object instanceof THREE.Mesh || object instanceof THREE.Line) {
            if(object.frustumCulled === false || _frustum.intersectsObject(object) === true) {
              _object = getNextObjectInPool();
              _object.object = object;
              if(object.renderDepth !== null) {
                _object.z = object.renderDepth
              }else {
                _vector3.copy(object.matrixWorld.getPosition());
                _vector3.applyProjection(_viewProjectionMatrix);
                _object.z = _vector3.z
              }
              _renderData.objects.push(_object)
            }
          }else {
            if(object instanceof THREE.Sprite || object instanceof THREE.Particle) {
              _object = getNextObjectInPool();
              _object.object = object;
              if(object.renderDepth !== null) {
                _object.z = object.renderDepth
              }else {
                _vector3.copy(object.matrixWorld.getPosition());
                _vector3.applyProjection(_viewProjectionMatrix);
                _object.z = _vector3.z
              }
              _renderData.sprites.push(_object)
            }else {
              _object = getNextObjectInPool();
              _object.object = object;
              if(object.renderDepth !== null) {
                _object.z = object.renderDepth
              }else {
                _vector3.copy(object.matrixWorld.getPosition());
                _vector3.applyProjection(_viewProjectionMatrix);
                _object.z = _vector3.z
              }
              _renderData.objects.push(_object)
            }
          }
        }
        projectObject(object)
      }
    };
    projectObject(root);
    if(sortObjects === true) {
      _renderData.objects.sort(painterSort)
    }
    return _renderData
  };
  this.projectScene = function(scene, camera, sortObjects, sortElements) {
    var visible = false, o, ol, v, vl, f, fl, n, nl, c, cl, u, ul, object, geometry, vertices, vertex, vertexPositionScreen, faces, face, faceVertexNormals, faceVertexUvs, uvs, v1, v2, v3, v4, isFaceMaterial, objectMaterials;
    _face3Count = 0;
    _face4Count = 0;
    _lineCount = 0;
    _particleCount = 0;
    _renderData.elements.length = 0;
    scene.updateMatrixWorld();
    if(camera.parent === undefined) {
      camera.updateMatrixWorld()
    }
    _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));
    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);
    _normalViewMatrix.getInverse(_viewMatrix);
    _normalViewMatrix.transpose();
    _frustum.setFromMatrix(_viewProjectionMatrix);
    _renderData = projectGraph(scene, sortObjects);
    for(o = 0, ol = _renderData.objects.length;o < ol;o++) {
      object = _renderData.objects[o].object;
      _modelMatrix = object.matrixWorld;
      _vertexCount = 0;
      if(object instanceof THREE.Mesh) {
        geometry = object.geometry;
        vertices = geometry.vertices;
        faces = geometry.faces;
        faceVertexUvs = geometry.faceVertexUvs;
        _normalMatrix.getInverse(_modelMatrix);
        _normalMatrix.transpose();
        isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
        objectMaterials = isFaceMaterial === true ? object.material : null;
        for(v = 0, vl = vertices.length;v < vl;v++) {
          _vertex = getNextVertexInPool();
          _vertex.positionWorld.copy(vertices[v]).applyMatrix4(_modelMatrix);
          _vertex.positionScreen.copy(_vertex.positionWorld).applyMatrix4(_viewProjectionMatrix);
          _vertex.positionScreen.x /= _vertex.positionScreen.w;
          _vertex.positionScreen.y /= _vertex.positionScreen.w;
          _vertex.positionScreen.z /= _vertex.positionScreen.w;
          _vertex.visible = !(_vertex.positionScreen.x < -1 || _vertex.positionScreen.x > 1 || _vertex.positionScreen.y < -1 || _vertex.positionScreen.y > 1 || _vertex.positionScreen.z < -1 || _vertex.positionScreen.z > 1)
        }
        for(f = 0, fl = faces.length;f < fl;f++) {
          face = faces[f];
          var material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;
          if(material === undefined) {
            continue
          }
          var side = material.side;
          if(face instanceof THREE.Face3) {
            v1 = _vertexPool[face.a];
            v2 = _vertexPool[face.b];
            v3 = _vertexPool[face.c];
            _points3[0] = v1.positionScreen;
            _points3[1] = v2.positionScreen;
            _points3[2] = v3.positionScreen;
            if(v1.visible === true || v2.visible === true || v3.visible === true || _clipBox.isIntersectionBox(_boundingBox.setFromPoints(_points3))) {
              visible = (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;
              if(side === THREE.DoubleSide || visible === (side === THREE.FrontSide)) {
                _face = getNextFace3InPool();
                _face.v1.copy(v1);
                _face.v2.copy(v2);
                _face.v3.copy(v3)
              }else {
                continue
              }
            }else {
              continue
            }
          }else {
            if(face instanceof THREE.Face4) {
              v1 = _vertexPool[face.a];
              v2 = _vertexPool[face.b];
              v3 = _vertexPool[face.c];
              v4 = _vertexPool[face.d];
              _points4[0] = v1.positionScreen;
              _points4[1] = v2.positionScreen;
              _points4[2] = v3.positionScreen;
              _points4[3] = v4.positionScreen;
              if(v1.visible === true || v2.visible === true || v3.visible === true || v4.visible === true || _clipBox.isIntersectionBox(_boundingBox.setFromPoints(_points4))) {
                visible = (v4.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v4.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0 || (v2.positionScreen.x - v3.positionScreen.x) * (v4.positionScreen.y - v3.positionScreen.y) - (v2.positionScreen.y - v3.positionScreen.y) * (v4.positionScreen.x - v3.positionScreen.x) < 0;
                if(side === THREE.DoubleSide || visible === (side === THREE.FrontSide)) {
                  _face = getNextFace4InPool();
                  _face.v1.copy(v1);
                  _face.v2.copy(v2);
                  _face.v3.copy(v3);
                  _face.v4.copy(v4)
                }else {
                  continue
                }
              }else {
                continue
              }
            }
          }
          _face.normalModel.copy(face.normal);
          if(visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {
            _face.normalModel.negate()
          }
          _face.normalModel.applyMatrix3(_normalMatrix).normalize();
          _face.normalModelView.copy(_face.normalModel).applyMatrix3(_normalViewMatrix);
          _face.centroidModel.copy(face.centroid).applyMatrix4(_modelMatrix);
          faceVertexNormals = face.vertexNormals;
          for(n = 0, nl = faceVertexNormals.length;n < nl;n++) {
            var normalModel = _face.vertexNormalsModel[n];
            normalModel.copy(faceVertexNormals[n]);
            if(visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {
              normalModel.negate()
            }
            normalModel.applyMatrix3(_normalMatrix).normalize();
            var normalModelView = _face.vertexNormalsModelView[n];
            normalModelView.copy(normalModel).applyMatrix3(_normalViewMatrix)
          }
          _face.vertexNormalsLength = faceVertexNormals.length;
          for(c = 0, cl = faceVertexUvs.length;c < cl;c++) {
            uvs = faceVertexUvs[c][f];
            if(uvs === undefined) {
              continue
            }
            for(u = 0, ul = uvs.length;u < ul;u++) {
              _face.uvs[c][u] = uvs[u]
            }
          }
          _face.color = face.color;
          _face.material = material;
          _centroid.copy(_face.centroidModel).applyProjection(_viewProjectionMatrix);
          _face.z = _centroid.z;
          _renderData.elements.push(_face)
        }
      }else {
        if(object instanceof THREE.Line) {
          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);
          vertices = object.geometry.vertices;
          v1 = getNextVertexInPool();
          v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);
          var step = object.type === THREE.LinePieces ? 2 : 1;
          for(v = 1, vl = vertices.length;v < vl;v++) {
            v1 = getNextVertexInPool();
            v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);
            if((v + 1) % step > 0) {
              continue
            }
            v2 = _vertexPool[_vertexCount - 2];
            _clippedVertex1PositionScreen.copy(v1.positionScreen);
            _clippedVertex2PositionScreen.copy(v2.positionScreen);
            if(clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {
              _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);
              _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);
              _line = getNextLineInPool();
              _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);
              _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);
              _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);
              _line.material = object.material;
              _renderData.elements.push(_line)
            }
          }
        }
      }
    }
    for(o = 0, ol = _renderData.sprites.length;o < ol;o++) {
      object = _renderData.sprites[o].object;
      _modelMatrix = object.matrixWorld;
      if(object instanceof THREE.Particle) {
        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);
        _vector4.applyMatrix4(_viewProjectionMatrix);
        _vector4.z /= _vector4.w;
        if(_vector4.z > 0 && _vector4.z < 1) {
          _particle = getNextParticleInPool();
          _particle.object = object;
          _particle.x = _vector4.x / _vector4.w;
          _particle.y = _vector4.y / _vector4.w;
          _particle.z = _vector4.z;
          _particle.rotation = object.rotation.z;
          _particle.scale.x = object.scale.x * Math.abs(_particle.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));
          _particle.scale.y = object.scale.y * Math.abs(_particle.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));
          _particle.material = object.material;
          _renderData.elements.push(_particle)
        }
      }
    }
    if(sortElements === true) {
      _renderData.elements.sort(painterSort)
    }
    return _renderData
  };
  function getNextObjectInPool() {
    if(_objectCount === _objectPoolLength) {
      var object = new THREE.RenderableObject;
      _objectPool.push(object);
      _objectPoolLength++;
      _objectCount++;
      return object
    }
    return _objectPool[_objectCount++]
  }
  function getNextVertexInPool() {
    if(_vertexCount === _vertexPoolLength) {
      var vertex = new THREE.RenderableVertex;
      _vertexPool.push(vertex);
      _vertexPoolLength++;
      _vertexCount++;
      return vertex
    }
    return _vertexPool[_vertexCount++]
  }
  function getNextFace3InPool() {
    if(_face3Count === _face3PoolLength) {
      var face = new THREE.RenderableFace3;
      _face3Pool.push(face);
      _face3PoolLength++;
      _face3Count++;
      return face
    }
    return _face3Pool[_face3Count++]
  }
  function getNextFace4InPool() {
    if(_face4Count === _face4PoolLength) {
      var face = new THREE.RenderableFace4;
      _face4Pool.push(face);
      _face4PoolLength++;
      _face4Count++;
      return face
    }
    return _face4Pool[_face4Count++]
  }
  function getNextLineInPool() {
    if(_lineCount === _linePoolLength) {
      var line = new THREE.RenderableLine;
      _linePool.push(line);
      _linePoolLength++;
      _lineCount++;
      return line
    }
    return _linePool[_lineCount++]
  }
  function getNextParticleInPool() {
    if(_particleCount === _particlePoolLength) {
      var particle = new THREE.RenderableParticle;
      _particlePool.push(particle);
      _particlePoolLength++;
      _particleCount++;
      return particle
    }
    return _particlePool[_particleCount++]
  }
  function painterSort(a, b) {
    return b.z - a.z
  }
  function clipLine(s1, s2) {
    var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;
    if(bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {
      return true
    }else {
      if(bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {
        return false
      }else {
        if(bc1near < 0) {
          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near))
        }else {
          if(bc2near < 0) {
            alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near))
          }
        }
        if(bc1far < 0) {
          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far))
        }else {
          if(bc2far < 0) {
            alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far))
          }
        }
        if(alpha2 < alpha1) {
          return false
        }else {
          s1.lerp(s2, alpha1);
          s2.lerp(s1, 1 - alpha2);
          return true
        }
      }
    }
  }
};
THREE.Face3 = function(a, b, c, normal, color, materialIndex) {
  this.a = a;
  this.b = b;
  this.c = c;
  this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3;
  this.vertexNormals = normal instanceof Array ? normal : [];
  this.color = color instanceof THREE.Color ? color : new THREE.Color;
  this.vertexColors = color instanceof Array ? color : [];
  this.vertexTangents = [];
  this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
  this.centroid = new THREE.Vector3
};
THREE.Face3.prototype = {constructor:THREE.Face3, clone:function() {
  var face = new THREE.Face3(this.a, this.b, this.c);
  face.normal.copy(this.normal);
  face.color.copy(this.color);
  face.centroid.copy(this.centroid);
  face.materialIndex = this.materialIndex;
  var i, il;
  for(i = 0, il = this.vertexNormals.length;i < il;i++) {
    face.vertexNormals[i] = this.vertexNormals[i].clone()
  }
  for(i = 0, il = this.vertexColors.length;i < il;i++) {
    face.vertexColors[i] = this.vertexColors[i].clone()
  }
  for(i = 0, il = this.vertexTangents.length;i < il;i++) {
    face.vertexTangents[i] = this.vertexTangents[i].clone()
  }
  return face
}};
THREE.Face4 = function(a, b, c, d, normal, color, materialIndex) {
  this.a = a;
  this.b = b;
  this.c = c;
  this.d = d;
  this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3;
  this.vertexNormals = normal instanceof Array ? normal : [];
  this.color = color instanceof THREE.Color ? color : new THREE.Color;
  this.vertexColors = color instanceof Array ? color : [];
  this.vertexTangents = [];
  this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
  this.centroid = new THREE.Vector3
};
THREE.Face4.prototype = {constructor:THREE.Face4, clone:function() {
  var face = new THREE.Face4(this.a, this.b, this.c, this.d);
  face.normal.copy(this.normal);
  face.color.copy(this.color);
  face.centroid.copy(this.centroid);
  face.materialIndex = this.materialIndex;
  var i, il;
  for(i = 0, il = this.vertexNormals.length;i < il;i++) {
    face.vertexNormals[i] = this.vertexNormals[i].clone()
  }
  for(i = 0, il = this.vertexColors.length;i < il;i++) {
    face.vertexColors[i] = this.vertexColors[i].clone()
  }
  for(i = 0, il = this.vertexTangents.length;i < il;i++) {
    face.vertexTangents[i] = this.vertexTangents[i].clone()
  }
  return face
}};
THREE.Geometry = function() {
  THREE.EventDispatcher.call(this);
  this.id = THREE.GeometryIdCount++;
  this.name = "";
  this.vertices = [];
  this.colors = [];
  this.normals = [];
  this.faces = [];
  this.faceUvs = [[]];
  this.faceVertexUvs = [[]];
  this.morphTargets = [];
  this.morphColors = [];
  this.morphNormals = [];
  this.skinWeights = [];
  this.skinIndices = [];
  this.lineDistances = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.hasTangents = false;
  this.dynamic = true;
  this.verticesNeedUpdate = false;
  this.elementsNeedUpdate = false;
  this.uvsNeedUpdate = false;
  this.normalsNeedUpdate = false;
  this.tangentsNeedUpdate = false;
  this.colorsNeedUpdate = false;
  this.lineDistancesNeedUpdate = false;
  this.buffersNeedUpdate = false
};
THREE.Geometry.prototype = {constructor:THREE.Geometry, applyMatrix:function(matrix) {
  var normalMatrix = (new THREE.Matrix3).getInverse(matrix).transpose();
  for(var i = 0, il = this.vertices.length;i < il;i++) {
    var vertex = this.vertices[i];
    vertex.applyMatrix4(matrix)
  }
  for(var i = 0, il = this.faces.length;i < il;i++) {
    var face = this.faces[i];
    face.normal.applyMatrix3(normalMatrix).normalize();
    for(var j = 0, jl = face.vertexNormals.length;j < jl;j++) {
      face.vertexNormals[j].applyMatrix3(normalMatrix).normalize()
    }
    face.centroid.applyMatrix4(matrix)
  }
}, computeCentroids:function() {
  var f, fl, face;
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    face.centroid.set(0, 0, 0);
    if(face instanceof THREE.Face3) {
      face.centroid.add(this.vertices[face.a]);
      face.centroid.add(this.vertices[face.b]);
      face.centroid.add(this.vertices[face.c]);
      face.centroid.divideScalar(3)
    }else {
      if(face instanceof THREE.Face4) {
        face.centroid.add(this.vertices[face.a]);
        face.centroid.add(this.vertices[face.b]);
        face.centroid.add(this.vertices[face.c]);
        face.centroid.add(this.vertices[face.d]);
        face.centroid.divideScalar(4)
      }
    }
  }
}, computeFaceNormals:function() {
  var n, nl, v, vl, vertex, f, fl, face, vA, vB, vC, cb = new THREE.Vector3, ab = new THREE.Vector3;
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    vA = this.vertices[face.a];
    vB = this.vertices[face.b];
    vC = this.vertices[face.c];
    cb.subVectors(vC, vB);
    ab.subVectors(vA, vB);
    cb.cross(ab);
    cb.normalize();
    face.normal.copy(cb)
  }
}, computeVertexNormals:function(areaWeighted) {
  var v, vl, f, fl, face, vertices;
  if(this.__tmpVertices === undefined) {
    this.__tmpVertices = new Array(this.vertices.length);
    vertices = this.__tmpVertices;
    for(v = 0, vl = this.vertices.length;v < vl;v++) {
      vertices[v] = new THREE.Vector3
    }
    for(f = 0, fl = this.faces.length;f < fl;f++) {
      face = this.faces[f];
      if(face instanceof THREE.Face3) {
        face.vertexNormals = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3]
      }else {
        if(face instanceof THREE.Face4) {
          face.vertexNormals = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3]
        }
      }
    }
  }else {
    vertices = this.__tmpVertices;
    for(v = 0, vl = this.vertices.length;v < vl;v++) {
      vertices[v].set(0, 0, 0)
    }
  }
  if(areaWeighted) {
    var vA, vB, vC, vD;
    var cb = new THREE.Vector3, ab = new THREE.Vector3, db = new THREE.Vector3, dc = new THREE.Vector3, bc = new THREE.Vector3;
    for(f = 0, fl = this.faces.length;f < fl;f++) {
      face = this.faces[f];
      if(face instanceof THREE.Face3) {
        vA = this.vertices[face.a];
        vB = this.vertices[face.b];
        vC = this.vertices[face.c];
        cb.subVectors(vC, vB);
        ab.subVectors(vA, vB);
        cb.cross(ab);
        vertices[face.a].add(cb);
        vertices[face.b].add(cb);
        vertices[face.c].add(cb)
      }else {
        if(face instanceof THREE.Face4) {
          vA = this.vertices[face.a];
          vB = this.vertices[face.b];
          vC = this.vertices[face.c];
          vD = this.vertices[face.d];
          db.subVectors(vD, vB);
          ab.subVectors(vA, vB);
          db.cross(ab);
          vertices[face.a].add(db);
          vertices[face.b].add(db);
          vertices[face.d].add(db);
          dc.subVectors(vD, vC);
          bc.subVectors(vB, vC);
          dc.cross(bc);
          vertices[face.b].add(dc);
          vertices[face.c].add(dc);
          vertices[face.d].add(dc)
        }
      }
    }
  }else {
    for(f = 0, fl = this.faces.length;f < fl;f++) {
      face = this.faces[f];
      if(face instanceof THREE.Face3) {
        vertices[face.a].add(face.normal);
        vertices[face.b].add(face.normal);
        vertices[face.c].add(face.normal)
      }else {
        if(face instanceof THREE.Face4) {
          vertices[face.a].add(face.normal);
          vertices[face.b].add(face.normal);
          vertices[face.c].add(face.normal);
          vertices[face.d].add(face.normal)
        }
      }
    }
  }
  for(v = 0, vl = this.vertices.length;v < vl;v++) {
    vertices[v].normalize()
  }
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    if(face instanceof THREE.Face3) {
      face.vertexNormals[0].copy(vertices[face.a]);
      face.vertexNormals[1].copy(vertices[face.b]);
      face.vertexNormals[2].copy(vertices[face.c])
    }else {
      if(face instanceof THREE.Face4) {
        face.vertexNormals[0].copy(vertices[face.a]);
        face.vertexNormals[1].copy(vertices[face.b]);
        face.vertexNormals[2].copy(vertices[face.c]);
        face.vertexNormals[3].copy(vertices[face.d])
      }
    }
  }
}, computeMorphNormals:function() {
  var i, il, f, fl, face;
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    if(!face.__originalFaceNormal) {
      face.__originalFaceNormal = face.normal.clone()
    }else {
      face.__originalFaceNormal.copy(face.normal)
    }
    if(!face.__originalVertexNormals) {
      face.__originalVertexNormals = []
    }
    for(i = 0, il = face.vertexNormals.length;i < il;i++) {
      if(!face.__originalVertexNormals[i]) {
        face.__originalVertexNormals[i] = face.vertexNormals[i].clone()
      }else {
        face.__originalVertexNormals[i].copy(face.vertexNormals[i])
      }
    }
  }
  var tmpGeo = new THREE.Geometry;
  tmpGeo.faces = this.faces;
  for(i = 0, il = this.morphTargets.length;i < il;i++) {
    if(!this.morphNormals[i]) {
      this.morphNormals[i] = {};
      this.morphNormals[i].faceNormals = [];
      this.morphNormals[i].vertexNormals = [];
      var dstNormalsFace = this.morphNormals[i].faceNormals;
      var dstNormalsVertex = this.morphNormals[i].vertexNormals;
      var faceNormal, vertexNormals;
      for(f = 0, fl = this.faces.length;f < fl;f++) {
        face = this.faces[f];
        faceNormal = new THREE.Vector3;
        if(face instanceof THREE.Face3) {
          vertexNormals = {a:new THREE.Vector3, b:new THREE.Vector3, c:new THREE.Vector3}
        }else {
          vertexNormals = {a:new THREE.Vector3, b:new THREE.Vector3, c:new THREE.Vector3, d:new THREE.Vector3}
        }
        dstNormalsFace.push(faceNormal);
        dstNormalsVertex.push(vertexNormals)
      }
    }
    var morphNormals = this.morphNormals[i];
    tmpGeo.vertices = this.morphTargets[i].vertices;
    tmpGeo.computeFaceNormals();
    tmpGeo.computeVertexNormals();
    var faceNormal, vertexNormals;
    for(f = 0, fl = this.faces.length;f < fl;f++) {
      face = this.faces[f];
      faceNormal = morphNormals.faceNormals[f];
      vertexNormals = morphNormals.vertexNormals[f];
      faceNormal.copy(face.normal);
      if(face instanceof THREE.Face3) {
        vertexNormals.a.copy(face.vertexNormals[0]);
        vertexNormals.b.copy(face.vertexNormals[1]);
        vertexNormals.c.copy(face.vertexNormals[2])
      }else {
        vertexNormals.a.copy(face.vertexNormals[0]);
        vertexNormals.b.copy(face.vertexNormals[1]);
        vertexNormals.c.copy(face.vertexNormals[2]);
        vertexNormals.d.copy(face.vertexNormals[3])
      }
    }
  }
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    face.normal = face.__originalFaceNormal;
    face.vertexNormals = face.__originalVertexNormals
  }
}, computeTangents:function() {
  var f, fl, v, vl, i, il, vertexIndex, face, uv, vA, vB, vC, uvA, uvB, uvC, x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r, t, test, tan1 = [], tan2 = [], sdir = new THREE.Vector3, tdir = new THREE.Vector3, tmp = new THREE.Vector3, tmp2 = new THREE.Vector3, n = new THREE.Vector3, w;
  for(v = 0, vl = this.vertices.length;v < vl;v++) {
    tan1[v] = new THREE.Vector3;
    tan2[v] = new THREE.Vector3
  }
  function handleTriangle(context, a, b, c, ua, ub, uc) {
    vA = context.vertices[a];
    vB = context.vertices[b];
    vC = context.vertices[c];
    uvA = uv[ua];
    uvB = uv[ub];
    uvC = uv[uc];
    x1 = vB.x - vA.x;
    x2 = vC.x - vA.x;
    y1 = vB.y - vA.y;
    y2 = vC.y - vA.y;
    z1 = vB.z - vA.z;
    z2 = vC.z - vA.z;
    s1 = uvB.x - uvA.x;
    s2 = uvC.x - uvA.x;
    t1 = uvB.y - uvA.y;
    t2 = uvC.y - uvA.y;
    r = 1 / (s1 * t2 - s2 * t1);
    sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
    tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
    tan1[a].add(sdir);
    tan1[b].add(sdir);
    tan1[c].add(sdir);
    tan2[a].add(tdir);
    tan2[b].add(tdir);
    tan2[c].add(tdir)
  }
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    uv = this.faceVertexUvs[0][f];
    if(face instanceof THREE.Face3) {
      handleTriangle(this, face.a, face.b, face.c, 0, 1, 2)
    }else {
      if(face instanceof THREE.Face4) {
        handleTriangle(this, face.a, face.b, face.d, 0, 1, 3);
        handleTriangle(this, face.b, face.c, face.d, 1, 2, 3)
      }
    }
  }
  var faceIndex = ["a", "b", "c", "d"];
  for(f = 0, fl = this.faces.length;f < fl;f++) {
    face = this.faces[f];
    for(i = 0;i < face.vertexNormals.length;i++) {
      n.copy(face.vertexNormals[i]);
      vertexIndex = face[faceIndex[i]];
      t = tan1[vertexIndex];
      tmp.copy(t);
      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
      tmp2.crossVectors(face.vertexNormals[i], t);
      test = tmp2.dot(tan2[vertexIndex]);
      w = test < 0 ? -1 : 1;
      face.vertexTangents[i] = new THREE.Vector4(tmp.x, tmp.y, tmp.z, w)
    }
  }
  this.hasTangents = true
}, computeLineDistances:function() {
  var d = 0;
  var vertices = this.vertices;
  for(var i = 0, il = vertices.length;i < il;i++) {
    if(i > 0) {
      d += vertices[i].distanceTo(vertices[i - 1])
    }
    this.lineDistances[i] = d
  }
}, computeBoundingBox:function() {
  if(this.boundingBox === null) {
    this.boundingBox = new THREE.Box3
  }
  this.boundingBox.setFromPoints(this.vertices)
}, computeBoundingSphere:function() {
  if(this.boundingSphere === null) {
    this.boundingSphere = new THREE.Sphere
  }
  this.boundingSphere.setFromCenterAndPoints(this.boundingSphere.center, this.vertices)
}, mergeVertices:function() {
  var verticesMap = {};
  var unique = [], changes = [];
  var v, key;
  var precisionPoints = 4;
  var precision = Math.pow(10, precisionPoints);
  var i, il, face;
  var indices, k, j, jl, u;
  this.__tmpVertices = undefined;
  for(i = 0, il = this.vertices.length;i < il;i++) {
    v = this.vertices[i];
    key = [Math.round(v.x * precision), Math.round(v.y * precision), Math.round(v.z * precision)].join("_");
    if(verticesMap[key] === undefined) {
      verticesMap[key] = i;
      unique.push(this.vertices[i]);
      changes[i] = unique.length - 1
    }else {
      changes[i] = changes[verticesMap[key]]
    }
  }
  var faceIndicesToRemove = [];
  for(i = 0, il = this.faces.length;i < il;i++) {
    face = this.faces[i];
    if(face instanceof THREE.Face3) {
      face.a = changes[face.a];
      face.b = changes[face.b];
      face.c = changes[face.c];
      indices = [face.a, face.b, face.c];
      var dupIndex = -1;
      for(var n = 0;n < 3;n++) {
        if(indices[n] == indices[(n + 1) % 3]) {
          dupIndex = n;
          faceIndicesToRemove.push(i);
          break
        }
      }
    }else {
      if(face instanceof THREE.Face4) {
        face.a = changes[face.a];
        face.b = changes[face.b];
        face.c = changes[face.c];
        face.d = changes[face.d];
        indices = [face.a, face.b, face.c, face.d];
        var dupIndex = -1;
        for(var n = 0;n < 4;n++) {
          if(indices[n] == indices[(n + 1) % 4]) {
            if(dupIndex >= 0) {
              faceIndicesToRemove.push(i)
            }
            dupIndex = n
          }
        }
        if(dupIndex >= 0) {
          indices.splice(dupIndex, 1);
          var newFace = new THREE.Face3(indices[0], indices[1], indices[2], face.normal, face.color, face.materialIndex);
          for(j = 0, jl = this.faceVertexUvs.length;j < jl;j++) {
            u = this.faceVertexUvs[j][i];
            if(u) {
              u.splice(dupIndex, 1)
            }
          }
          if(face.vertexNormals && face.vertexNormals.length > 0) {
            newFace.vertexNormals = face.vertexNormals;
            newFace.vertexNormals.splice(dupIndex, 1)
          }
          if(face.vertexColors && face.vertexColors.length > 0) {
            newFace.vertexColors = face.vertexColors;
            newFace.vertexColors.splice(dupIndex, 1)
          }
          this.faces[i] = newFace
        }
      }
    }
  }
  for(i = faceIndicesToRemove.length - 1;i >= 0;i--) {
    this.faces.splice(i, 1);
    for(j = 0, jl = this.faceVertexUvs.length;j < jl;j++) {
      this.faceVertexUvs[j].splice(i, 1)
    }
  }
  var diff = this.vertices.length - unique.length;
  this.vertices = unique;
  return diff
}, clone:function() {
  var geometry = new THREE.Geometry;
  var vertices = this.vertices;
  for(var i = 0, il = vertices.length;i < il;i++) {
    geometry.vertices.push(vertices[i].clone())
  }
  var faces = this.faces;
  for(var i = 0, il = faces.length;i < il;i++) {
    geometry.faces.push(faces[i].clone())
  }
  var uvs = this.faceVertexUvs[0];
  for(var i = 0, il = uvs.length;i < il;i++) {
    var uv = uvs[i], uvCopy = [];
    for(var j = 0, jl = uv.length;j < jl;j++) {
      uvCopy.push(new THREE.Vector2(uv[j].x, uv[j].y))
    }
    geometry.faceVertexUvs[0].push(uvCopy)
  }
  return geometry
}, dispose:function() {
  this.dispatchEvent({type:"dispose"})
}};
THREE.GeometryIdCount = 0;
THREE.BufferGeometry = function() {
  THREE.EventDispatcher.call(this);
  this.id = THREE.GeometryIdCount++;
  this.attributes = {};
  this.dynamic = false;
  this.offsets = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.hasTangents = false;
  this.morphTargets = []
};
THREE.BufferGeometry.prototype = {constructor:THREE.BufferGeometry, applyMatrix:function(matrix) {
  var positionArray;
  var normalArray;
  if(this.attributes["position"]) {
    positionArray = this.attributes["position"].array
  }
  if(this.attributes["normal"]) {
    normalArray = this.attributes["normal"].array
  }
  if(positionArray !== undefined) {
    matrix.multiplyVector3Array(positionArray);
    this.verticesNeedUpdate = true
  }
  if(normalArray !== undefined) {
    var normalMatrix = new THREE.Matrix3;
    normalMatrix.getInverse(matrix).transpose();
    normalMatrix.multiplyVector3Array(normalArray);
    this.normalizeNormals();
    this.normalsNeedUpdate = true
  }
}, computeBoundingBox:function() {
  if(this.boundingBox === null) {
    this.boundingBox = new THREE.Box3
  }
  var positions = this.attributes["position"].array;
  if(positions) {
    var bb = this.boundingBox;
    var x, y, z;
    if(positions.length >= 3) {
      bb.min.x = bb.max.x = positions[0];
      bb.min.y = bb.max.y = positions[1];
      bb.min.z = bb.max.z = positions[2]
    }
    for(var i = 3, il = positions.length;i < il;i += 3) {
      x = positions[i];
      y = positions[i + 1];
      z = positions[i + 2];
      if(x < bb.min.x) {
        bb.min.x = x
      }else {
        if(x > bb.max.x) {
          bb.max.x = x
        }
      }
      if(y < bb.min.y) {
        bb.min.y = y
      }else {
        if(y > bb.max.y) {
          bb.max.y = y
        }
      }
      if(z < bb.min.z) {
        bb.min.z = z
      }else {
        if(z > bb.max.z) {
          bb.max.z = z
        }
      }
    }
  }
  if(positions === undefined || positions.length === 0) {
    this.boundingBox.min.set(0, 0, 0);
    this.boundingBox.max.set(0, 0, 0)
  }
}, computeBoundingSphere:function() {
  if(this.boundingSphere === null) {
    this.boundingSphere = new THREE.Sphere
  }
  var positions = this.attributes["position"].array;
  if(positions) {
    var radiusSq, maxRadiusSq = 0;
    var x, y, z;
    for(var i = 0, il = positions.length;i < il;i += 3) {
      x = positions[i];
      y = positions[i + 1];
      z = positions[i + 2];
      radiusSq = x * x + y * y + z * z;
      if(radiusSq > maxRadiusSq) {
        maxRadiusSq = radiusSq
      }
    }
    this.boundingSphere.radius = Math.sqrt(maxRadiusSq)
  }
}, computeVertexNormals:function() {
  if(this.attributes["position"]) {
    var i, il;
    var j, jl;
    var nVertexElements = this.attributes["position"].array.length;
    if(this.attributes["normal"] === undefined) {
      this.attributes["normal"] = {itemSize:3, array:new Float32Array(nVertexElements), numItems:nVertexElements}
    }else {
      for(i = 0, il = this.attributes["normal"].array.length;i < il;i++) {
        this.attributes["normal"].array[i] = 0
      }
    }
    var positions = this.attributes["position"].array;
    var normals = this.attributes["normal"].array;
    var vA, vB, vC, x, y, z, pA = new THREE.Vector3, pB = new THREE.Vector3, pC = new THREE.Vector3, cb = new THREE.Vector3, ab = new THREE.Vector3;
    if(this.attributes["index"]) {
      var indices = this.attributes["index"].array;
      var offsets = this.offsets;
      for(j = 0, jl = offsets.length;j < jl;++j) {
        var start = offsets[j].start;
        var count = offsets[j].count;
        var index = offsets[j].index;
        for(i = start, il = start + count;i < il;i += 3) {
          vA = index + indices[i];
          vB = index + indices[i + 1];
          vC = index + indices[i + 2];
          x = positions[vA * 3];
          y = positions[vA * 3 + 1];
          z = positions[vA * 3 + 2];
          pA.set(x, y, z);
          x = positions[vB * 3];
          y = positions[vB * 3 + 1];
          z = positions[vB * 3 + 2];
          pB.set(x, y, z);
          x = positions[vC * 3];
          y = positions[vC * 3 + 1];
          z = positions[vC * 3 + 2];
          pC.set(x, y, z);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          normals[vA * 3] += cb.x;
          normals[vA * 3 + 1] += cb.y;
          normals[vA * 3 + 2] += cb.z;
          normals[vB * 3] += cb.x;
          normals[vB * 3 + 1] += cb.y;
          normals[vB * 3 + 2] += cb.z;
          normals[vC * 3] += cb.x;
          normals[vC * 3 + 1] += cb.y;
          normals[vC * 3 + 2] += cb.z
        }
      }
    }else {
      for(i = 0, il = positions.length;i < il;i += 9) {
        x = positions[i];
        y = positions[i + 1];
        z = positions[i + 2];
        pA.set(x, y, z);
        x = positions[i + 3];
        y = positions[i + 4];
        z = positions[i + 5];
        pB.set(x, y, z);
        x = positions[i + 6];
        y = positions[i + 7];
        z = positions[i + 8];
        pC.set(x, y, z);
        cb.subVectors(pC, pB);
        ab.subVectors(pA, pB);
        cb.cross(ab);
        normals[i] = cb.x;
        normals[i + 1] = cb.y;
        normals[i + 2] = cb.z;
        normals[i + 3] = cb.x;
        normals[i + 4] = cb.y;
        normals[i + 5] = cb.z;
        normals[i + 6] = cb.x;
        normals[i + 7] = cb.y;
        normals[i + 8] = cb.z
      }
    }
    this.normalizeNormals();
    this.normalsNeedUpdate = true
  }
}, normalizeNormals:function() {
  var normals = this.attributes["normal"].array;
  var x, y, z, n;
  for(var i = 0, il = normals.length;i < il;i += 3) {
    x = normals[i];
    y = normals[i + 1];
    z = normals[i + 2];
    n = 1 / Math.sqrt(x * x + y * y + z * z);
    normals[i] *= n;
    normals[i + 1] *= n;
    normals[i + 2] *= n
  }
}, computeTangents:function() {
  if(this.attributes["index"] === undefined || this.attributes["position"] === undefined || this.attributes["normal"] === undefined || this.attributes["uv"] === undefined) {
    console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");
    return
  }
  var indices = this.attributes["index"].array;
  var positions = this.attributes["position"].array;
  var normals = this.attributes["normal"].array;
  var uvs = this.attributes["uv"].array;
  var nVertices = positions.length / 3;
  if(this.attributes["tangent"] === undefined) {
    var nTangentElements = 4 * nVertices;
    this.attributes["tangent"] = {itemSize:4, array:new Float32Array(nTangentElements), numItems:nTangentElements}
  }
  var tangents = this.attributes["tangent"].array;
  var tan1 = [], tan2 = [];
  for(var k = 0;k < nVertices;k++) {
    tan1[k] = new THREE.Vector3;
    tan2[k] = new THREE.Vector3
  }
  var xA, yA, zA, xB, yB, zB, xC, yC, zC, uA, vA, uB, vB, uC, vC, x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r;
  var sdir = new THREE.Vector3, tdir = new THREE.Vector3;
  function handleTriangle(a, b, c) {
    xA = positions[a * 3];
    yA = positions[a * 3 + 1];
    zA = positions[a * 3 + 2];
    xB = positions[b * 3];
    yB = positions[b * 3 + 1];
    zB = positions[b * 3 + 2];
    xC = positions[c * 3];
    yC = positions[c * 3 + 1];
    zC = positions[c * 3 + 2];
    uA = uvs[a * 2];
    vA = uvs[a * 2 + 1];
    uB = uvs[b * 2];
    vB = uvs[b * 2 + 1];
    uC = uvs[c * 2];
    vC = uvs[c * 2 + 1];
    x1 = xB - xA;
    x2 = xC - xA;
    y1 = yB - yA;
    y2 = yC - yA;
    z1 = zB - zA;
    z2 = zC - zA;
    s1 = uB - uA;
    s2 = uC - uA;
    t1 = vB - vA;
    t2 = vC - vA;
    r = 1 / (s1 * t2 - s2 * t1);
    sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
    tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
    tan1[a].add(sdir);
    tan1[b].add(sdir);
    tan1[c].add(sdir);
    tan2[a].add(tdir);
    tan2[b].add(tdir);
    tan2[c].add(tdir)
  }
  var i, il;
  var j, jl;
  var iA, iB, iC;
  var offsets = this.offsets;
  for(j = 0, jl = offsets.length;j < jl;++j) {
    var start = offsets[j].start;
    var count = offsets[j].count;
    var index = offsets[j].index;
    for(i = start, il = start + count;i < il;i += 3) {
      iA = index + indices[i];
      iB = index + indices[i + 1];
      iC = index + indices[i + 2];
      handleTriangle(iA, iB, iC)
    }
  }
  var tmp = new THREE.Vector3, tmp2 = new THREE.Vector3;
  var n = new THREE.Vector3, n2 = new THREE.Vector3;
  var w, t, test;
  var nx, ny, nz;
  function handleVertex(v) {
    n.x = normals[v * 3];
    n.y = normals[v * 3 + 1];
    n.z = normals[v * 3 + 2];
    n2.copy(n);
    t = tan1[v];
    tmp.copy(t);
    tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
    tmp2.crossVectors(n2, t);
    test = tmp2.dot(tan2[v]);
    w = test < 0 ? -1 : 1;
    tangents[v * 4] = tmp.x;
    tangents[v * 4 + 1] = tmp.y;
    tangents[v * 4 + 2] = tmp.z;
    tangents[v * 4 + 3] = w
  }
  for(j = 0, jl = offsets.length;j < jl;++j) {
    var start = offsets[j].start;
    var count = offsets[j].count;
    var index = offsets[j].index;
    for(i = start, il = start + count;i < il;i += 3) {
      iA = index + indices[i];
      iB = index + indices[i + 1];
      iC = index + indices[i + 2];
      handleVertex(iA);
      handleVertex(iB);
      handleVertex(iC)
    }
  }
  this.hasTangents = true;
  this.tangentsNeedUpdate = true
}, dispose:function() {
  this.dispatchEvent({type:"dispose"})
}};
THREE.Camera = function() {
  THREE.Object3D.call(this);
  this.matrixWorldInverse = new THREE.Matrix4;
  this.projectionMatrix = new THREE.Matrix4;
  this.projectionMatrixInverse = new THREE.Matrix4
};
THREE.Camera.prototype = Object.create(THREE.Object3D.prototype);
THREE.Camera.prototype.lookAt = function(vector) {
  this.matrix.lookAt(this.position, vector, this.up);
  if(this.rotationAutoUpdate === true) {
    if(this.useQuaternion === false) {
      this.rotation.setEulerFromRotationMatrix(this.matrix, this.eulerOrder)
    }else {
      this.quaternion.copy(this.matrix.decompose()[1])
    }
  }
};
THREE.OrthographicCamera = function(left, right, top, bottom, near, far) {
  THREE.Camera.call(this);
  this.left = left;
  this.right = right;
  this.top = top;
  this.bottom = bottom;
  this.near = near !== undefined ? near : 0.1;
  this.far = far !== undefined ? far : 2E3;
  this.updateProjectionMatrix()
};
THREE.OrthographicCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.OrthographicCamera.prototype.updateProjectionMatrix = function() {
  this.projectionMatrix.makeOrthographic(this.left, this.right, this.top, this.bottom, this.near, this.far)
};
THREE.PerspectiveCamera = function(fov, aspect, near, far) {
  THREE.Camera.call(this);
  this.fov = fov !== undefined ? fov : 50;
  this.aspect = aspect !== undefined ? aspect : 1;
  this.near = near !== undefined ? near : 0.1;
  this.far = far !== undefined ? far : 2E3;
  this.updateProjectionMatrix()
};
THREE.PerspectiveCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.PerspectiveCamera.prototype.setLens = function(focalLength, frameHeight) {
  if(frameHeight === undefined) {
    frameHeight = 24
  }
  this.fov = 2 * THREE.Math.radToDeg(Math.atan(frameHeight / (focalLength * 2)));
  this.updateProjectionMatrix()
};
THREE.PerspectiveCamera.prototype.setViewOffset = function(fullWidth, fullHeight, x, y, width, height) {
  this.fullWidth = fullWidth;
  this.fullHeight = fullHeight;
  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;
  this.updateProjectionMatrix()
};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function() {
  if(this.fullWidth) {
    var aspect = this.fullWidth / this.fullHeight;
    var top = Math.tan(THREE.Math.degToRad(this.fov * 0.5)) * this.near;
    var bottom = -top;
    var left = aspect * bottom;
    var right = aspect * top;
    var width = Math.abs(right - left);
    var height = Math.abs(top - bottom);
    this.projectionMatrix.makeFrustum(left + this.x * width / this.fullWidth, left + (this.x + this.width) * width / this.fullWidth, top - (this.y + this.height) * height / this.fullHeight, top - this.y * height / this.fullHeight, this.near, this.far)
  }else {
    this.projectionMatrix.makePerspective(this.fov, this.aspect, this.near, this.far)
  }
};
THREE.Light = function(hex) {
  THREE.Object3D.call(this);
  this.color = new THREE.Color(hex)
};
THREE.Light.prototype = Object.create(THREE.Object3D.prototype);
THREE.AmbientLight = function(hex) {
  THREE.Light.call(this, hex)
};
THREE.AmbientLight.prototype = Object.create(THREE.Light.prototype);
THREE.AreaLight = function(hex, intensity) {
  THREE.Light.call(this, hex);
  this.normal = new THREE.Vector3(0, -1, 0);
  this.right = new THREE.Vector3(1, 0, 0);
  this.intensity = intensity !== undefined ? intensity : 1;
  this.width = 1;
  this.height = 1;
  this.constantAttenuation = 1.5;
  this.linearAttenuation = 0.5;
  this.quadraticAttenuation = 0.1
};
THREE.AreaLight.prototype = Object.create(THREE.Light.prototype);
THREE.DirectionalLight = function(hex, intensity) {
  THREE.Light.call(this, hex);
  this.position = new THREE.Vector3(0, 1, 0);
  this.target = new THREE.Object3D;
  this.intensity = intensity !== undefined ? intensity : 1;
  this.castShadow = false;
  this.onlyShadow = false;
  this.shadowCameraNear = 50;
  this.shadowCameraFar = 5E3;
  this.shadowCameraLeft = -500;
  this.shadowCameraRight = 500;
  this.shadowCameraTop = 500;
  this.shadowCameraBottom = -500;
  this.shadowCameraVisible = false;
  this.shadowBias = 0;
  this.shadowDarkness = 0.5;
  this.shadowMapWidth = 512;
  this.shadowMapHeight = 512;
  this.shadowCascade = false;
  this.shadowCascadeOffset = new THREE.Vector3(0, 0, -1E3);
  this.shadowCascadeCount = 2;
  this.shadowCascadeBias = [0, 0, 0];
  this.shadowCascadeWidth = [512, 512, 512];
  this.shadowCascadeHeight = [512, 512, 512];
  this.shadowCascadeNearZ = [-1, 0.99, 0.998];
  this.shadowCascadeFarZ = [0.99, 0.998, 1];
  this.shadowCascadeArray = [];
  this.shadowMap = null;
  this.shadowMapSize = null;
  this.shadowCamera = null;
  this.shadowMatrix = null
};
THREE.DirectionalLight.prototype = Object.create(THREE.Light.prototype);
THREE.HemisphereLight = function(skyColorHex, groundColorHex, intensity) {
  THREE.Light.call(this, skyColorHex);
  this.groundColor = new THREE.Color(groundColorHex);
  this.position = new THREE.Vector3(0, 100, 0);
  this.intensity = intensity !== undefined ? intensity : 1
};
THREE.HemisphereLight.prototype = Object.create(THREE.Light.prototype);
THREE.PointLight = function(hex, intensity, distance) {
  THREE.Light.call(this, hex);
  this.position = new THREE.Vector3(0, 0, 0);
  this.intensity = intensity !== undefined ? intensity : 1;
  this.distance = distance !== undefined ? distance : 0
};
THREE.PointLight.prototype = Object.create(THREE.Light.prototype);
THREE.SpotLight = function(hex, intensity, distance, angle, exponent) {
  THREE.Light.call(this, hex);
  this.position = new THREE.Vector3(0, 1, 0);
  this.target = new THREE.Object3D;
  this.intensity = intensity !== undefined ? intensity : 1;
  this.distance = distance !== undefined ? distance : 0;
  this.angle = angle !== undefined ? angle : Math.PI / 2;
  this.exponent = exponent !== undefined ? exponent : 10;
  this.castShadow = false;
  this.onlyShadow = false;
  this.shadowCameraNear = 50;
  this.shadowCameraFar = 5E3;
  this.shadowCameraFov = 50;
  this.shadowCameraVisible = false;
  this.shadowBias = 0;
  this.shadowDarkness = 0.5;
  this.shadowMapWidth = 512;
  this.shadowMapHeight = 512;
  this.shadowMap = null;
  this.shadowMapSize = null;
  this.shadowCamera = null;
  this.shadowMatrix = null
};
THREE.SpotLight.prototype = Object.create(THREE.Light.prototype);
THREE.Loader = function(showStatus) {
  this.showStatus = showStatus;
  this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;
  this.onLoadStart = function() {
  };
  this.onLoadProgress = function() {
  };
  this.onLoadComplete = function() {
  }
};
THREE.Loader.prototype = {constructor:THREE.Loader, crossOrigin:"anonymous", addStatusElement:function() {
  var e = document.createElement("div");
  e.style.position = "absolute";
  e.style.right = "0px";
  e.style.top = "0px";
  e.style.fontSize = "0.8em";
  e.style.textAlign = "left";
  e.style.background = "rgba(0,0,0,0.25)";
  e.style.color = "#fff";
  e.style.width = "120px";
  e.style.padding = "0.5em 0.5em 0.5em 0.5em";
  e.style.zIndex = 1E3;
  e.innerHTML = "Loading ...";
  return e
}, updateProgress:function(progress) {
  var message = "Loaded ";
  if(progress.total) {
    message += (100 * progress.loaded / progress.total).toFixed(0) + "%"
  }else {
    message += (progress.loaded / 1E3).toFixed(2) + " KB"
  }
  this.statusDomElement.innerHTML = message
}, extractUrlBase:function(url) {
  var parts = url.split("/");
  parts.pop();
  return(parts.length < 1 ? "." : parts.join("/")) + "/"
}, initMaterials:function(materials, texturePath) {
  var array = [];
  for(var i = 0;i < materials.length;++i) {
    array[i] = THREE.Loader.prototype.createMaterial(materials[i], texturePath)
  }
  return array
}, needsTangents:function(materials) {
  for(var i = 0, il = materials.length;i < il;i++) {
    var m = materials[i];
    if(m instanceof THREE.ShaderMaterial) {
      return true
    }
  }
  return false
}, createMaterial:function(m, texturePath) {
  var _this = this;
  function is_pow2(n) {
    var l = Math.log(n) / Math.LN2;
    return Math.floor(l) == l
  }
  function nearest_pow2(n) {
    var l = Math.log(n) / Math.LN2;
    return Math.pow(2, Math.round(l))
  }
  function load_image(where, url) {
    var image = new Image;
    image.onload = function() {
      if(!is_pow2(this.width) || !is_pow2(this.height)) {
        var width = nearest_pow2(this.width);
        var height = nearest_pow2(this.height);
        where.image.width = width;
        where.image.height = height;
        where.image.getContext("2d").drawImage(this, 0, 0, width, height)
      }else {
        where.image = this
      }
      where.needsUpdate = true
    };
    image.crossOrigin = _this.crossOrigin;
    image.src = url
  }
  function create_texture(where, name, sourceFile, repeat, offset, wrap, anisotropy) {
    var isCompressed = sourceFile.toLowerCase().endsWith(".dds");
    var fullPath = texturePath + "/" + sourceFile;
    if(isCompressed) {
      var texture = THREE.ImageUtils.loadCompressedTexture(fullPath);
      where[name] = texture
    }else {
      var texture = document.createElement("canvas");
      where[name] = new THREE.Texture(texture)
    }
    where[name].sourceFile = sourceFile;
    if(repeat) {
      where[name].repeat.set(repeat[0], repeat[1]);
      if(repeat[0] !== 1) {
        where[name].wrapS = THREE.RepeatWrapping
      }
      if(repeat[1] !== 1) {
        where[name].wrapT = THREE.RepeatWrapping
      }
    }
    if(offset) {
      where[name].offset.set(offset[0], offset[1])
    }
    if(wrap) {
      var wrapMap = {"repeat":THREE.RepeatWrapping, "mirror":THREE.MirroredRepeatWrapping};
      if(wrapMap[wrap[0]] !== undefined) {
        where[name].wrapS = wrapMap[wrap[0]]
      }
      if(wrapMap[wrap[1]] !== undefined) {
        where[name].wrapT = wrapMap[wrap[1]]
      }
    }
    if(anisotropy) {
      where[name].anisotropy = anisotropy
    }
    if(!isCompressed) {
      load_image(where[name], fullPath)
    }
  }
  function rgb2hex(rgb) {
    return(rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255
  }
  var mtype = "MeshLambertMaterial";
  var mpars = {color:15658734, opacity:1, map:null, lightMap:null, normalMap:null, bumpMap:null, wireframe:false};
  if(m.shading) {
    var shading = m.shading.toLowerCase();
    if(shading === "phong") {
      mtype = "MeshPhongMaterial"
    }else {
      if(shading === "basic") {
        mtype = "MeshBasicMaterial"
      }
    }
  }
  if(m.blending !== undefined && THREE[m.blending] !== undefined) {
    mpars.blending = THREE[m.blending]
  }
  if(m.transparent !== undefined || m.opacity < 1) {
    mpars.transparent = m.transparent
  }
  if(m.depthTest !== undefined) {
    mpars.depthTest = m.depthTest
  }
  if(m.depthWrite !== undefined) {
    mpars.depthWrite = m.depthWrite
  }
  if(m.visible !== undefined) {
    mpars.visible = m.visible
  }
  if(m.flipSided !== undefined) {
    mpars.side = THREE.BackSide
  }
  if(m.doubleSided !== undefined) {
    mpars.side = THREE.DoubleSide
  }
  if(m.wireframe !== undefined) {
    mpars.wireframe = m.wireframe
  }
  if(m.vertexColors !== undefined) {
    if(m.vertexColors === "face") {
      mpars.vertexColors = THREE.FaceColors
    }else {
      if(m.vertexColors) {
        mpars.vertexColors = THREE.VertexColors
      }
    }
  }
  if(m.colorDiffuse) {
    mpars.color = rgb2hex(m.colorDiffuse)
  }else {
    if(m.DbgColor) {
      mpars.color = m.DbgColor
    }
  }
  if(m.colorSpecular) {
    mpars.specular = rgb2hex(m.colorSpecular)
  }
  if(m.colorAmbient) {
    mpars.ambient = rgb2hex(m.colorAmbient)
  }
  if(m.transparency) {
    mpars.opacity = m.transparency
  }
  if(m.specularCoef) {
    mpars.shininess = m.specularCoef
  }
  if(m.mapDiffuse && texturePath) {
    create_texture(mpars, "map", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy)
  }
  if(m.mapLight && texturePath) {
    create_texture(mpars, "lightMap", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy)
  }
  if(m.mapBump && texturePath) {
    create_texture(mpars, "bumpMap", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy)
  }
  if(m.mapNormal && texturePath) {
    create_texture(mpars, "normalMap", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy)
  }
  if(m.mapSpecular && texturePath) {
    create_texture(mpars, "specularMap", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy)
  }
  if(m.mapBumpScale) {
    mpars.bumpScale = m.mapBumpScale
  }
  if(m.mapNormal) {
    var shader = THREE.ShaderLib["normalmap"];
    var uniforms = THREE.UniformsUtils.clone(shader.uniforms);
    uniforms["tNormal"].value = mpars.normalMap;
    if(m.mapNormalFactor) {
      uniforms["uNormalScale"].value.set(m.mapNormalFactor, m.mapNormalFactor)
    }
    if(mpars.map) {
      uniforms["tDiffuse"].value = mpars.map;
      uniforms["enableDiffuse"].value = true
    }
    if(mpars.specularMap) {
      uniforms["tSpecular"].value = mpars.specularMap;
      uniforms["enableSpecular"].value = true
    }
    if(mpars.lightMap) {
      uniforms["tAO"].value = mpars.lightMap;
      uniforms["enableAO"].value = true
    }
    uniforms["uDiffuseColor"].value.setHex(mpars.color);
    uniforms["uSpecularColor"].value.setHex(mpars.specular);
    uniforms["uAmbientColor"].value.setHex(mpars.ambient);
    uniforms["uShininess"].value = mpars.shininess;
    if(mpars.opacity !== undefined) {
      uniforms["uOpacity"].value = mpars.opacity
    }
    var parameters = {fragmentShader:shader.fragmentShader, vertexShader:shader.vertexShader, uniforms:uniforms, lights:true, fog:true};
    var material = new THREE.ShaderMaterial(parameters);
    if(mpars.transparent) {
      material.transparent = true
    }
  }else {
    var material = new THREE[mtype](mpars)
  }
  if(m.DbgName !== undefined) {
    material.name = m.DbgName
  }
  return material
}};
THREE.ImageLoader = function() {
  THREE.EventDispatcher.call(this);
  this.crossOrigin = null
};
THREE.ImageLoader.prototype = {constructor:THREE.ImageLoader, load:function(url, image) {
  var scope = this;
  if(image === undefined) {
    image = new Image
  }
  image.addEventListener("load", function() {
    scope.dispatchEvent({type:"load", content:image})
  }, false);
  image.addEventListener("error", function() {
    scope.dispatchEvent({type:"error", message:"Couldn't load URL [" + url + "]"})
  }, false);
  if(scope.crossOrigin) {
    image.crossOrigin = scope.crossOrigin
  }
  image.src = url
}};
THREE.JSONLoader = function(showStatus) {
  THREE.Loader.call(this, showStatus);
  this.withCredentials = false
};
THREE.JSONLoader.prototype = Object.create(THREE.Loader.prototype);
THREE.JSONLoader.prototype.load = function(url, callback, texturePath) {
  var scope = this;
  texturePath = texturePath && typeof texturePath === "string" ? texturePath : this.extractUrlBase(url);
  this.onLoadStart();
  this.loadAjaxJSON(this, url, callback, texturePath)
};
THREE.JSONLoader.prototype.loadAjaxJSON = function(context, url, callback, texturePath, callbackProgress) {
  var xhr = new XMLHttpRequest;
  var length = 0;
  xhr.onreadystatechange = function() {
    if(xhr.readyState === xhr.DONE) {
      if(xhr.status === 200 || xhr.status === 0) {
        if(xhr.responseText) {
          var json = JSON.parse(xhr.responseText);
          context.createModel(json, callback, texturePath)
        }else {
          console.warn("THREE.JSONLoader: [" + url + "] seems to be unreachable or file there is empty")
        }
        context.onLoadComplete()
      }else {
        console.error("THREE.JSONLoader: Couldn't load [" + url + "] [" + xhr.status + "]")
      }
    }else {
      if(xhr.readyState === xhr.LOADING) {
        if(callbackProgress) {
          if(length === 0) {
            length = xhr.getResponseHeader("Content-Length")
          }
          callbackProgress({total:length, loaded:xhr.responseText.length})
        }
      }else {
        if(xhr.readyState === xhr.HEADERS_RECEIVED) {
          length = xhr.getResponseHeader("Content-Length")
        }
      }
    }
  };
  xhr.open("GET", url, true);
  xhr.withCredentials = this.withCredentials;
  xhr.send(null)
};
THREE.JSONLoader.prototype.createModel = function(json, callback, texturePath) {
  var scope = this, geometry = new THREE.Geometry, scale = json.scale !== undefined ? 1 / json.scale : 1;
  parseModel(scale);
  parseSkin();
  parseMorphing(scale);
  geometry.computeCentroids();
  geometry.computeFaceNormals();
  function parseModel(scale) {
    function isBitSet(value, position) {
      return value & 1 << position
    }
    var i, j, fi, offset, zLength, nVertices, colorIndex, normalIndex, uvIndex, materialIndex, type, isQuad, hasMaterial, hasFaceUv, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor, vertex, face, color, normal, uvLayer, uvs, u, v, faces = json.faces, vertices = json.vertices, normals = json.normals, colors = json.colors, nUvLayers = 0;
    for(i = 0;i < json.uvs.length;i++) {
      if(json.uvs[i].length) {
        nUvLayers++
      }
    }
    for(i = 0;i < nUvLayers;i++) {
      geometry.faceUvs[i] = [];
      geometry.faceVertexUvs[i] = []
    }
    offset = 0;
    zLength = vertices.length;
    while(offset < zLength) {
      vertex = new THREE.Vector3;
      vertex.x = vertices[offset++] * scale;
      vertex.y = vertices[offset++] * scale;
      vertex.z = vertices[offset++] * scale;
      geometry.vertices.push(vertex)
    }
    offset = 0;
    zLength = faces.length;
    while(offset < zLength) {
      type = faces[offset++];
      isQuad = isBitSet(type, 0);
      hasMaterial = isBitSet(type, 1);
      hasFaceUv = isBitSet(type, 2);
      hasFaceVertexUv = isBitSet(type, 3);
      hasFaceNormal = isBitSet(type, 4);
      hasFaceVertexNormal = isBitSet(type, 5);
      hasFaceColor = isBitSet(type, 6);
      hasFaceVertexColor = isBitSet(type, 7);
      if(isQuad) {
        face = new THREE.Face4;
        face.a = faces[offset++];
        face.b = faces[offset++];
        face.c = faces[offset++];
        face.d = faces[offset++];
        nVertices = 4
      }else {
        face = new THREE.Face3;
        face.a = faces[offset++];
        face.b = faces[offset++];
        face.c = faces[offset++];
        nVertices = 3
      }
      if(hasMaterial) {
        materialIndex = faces[offset++];
        face.materialIndex = materialIndex
      }
      fi = geometry.faces.length;
      if(hasFaceUv) {
        for(i = 0;i < nUvLayers;i++) {
          uvLayer = json.uvs[i];
          uvIndex = faces[offset++];
          u = uvLayer[uvIndex * 2];
          v = uvLayer[uvIndex * 2 + 1];
          geometry.faceUvs[i][fi] = new THREE.Vector2(u, v)
        }
      }
      if(hasFaceVertexUv) {
        for(i = 0;i < nUvLayers;i++) {
          uvLayer = json.uvs[i];
          uvs = [];
          for(j = 0;j < nVertices;j++) {
            uvIndex = faces[offset++];
            u = uvLayer[uvIndex * 2];
            v = uvLayer[uvIndex * 2 + 1];
            uvs[j] = new THREE.Vector2(u, v)
          }
          geometry.faceVertexUvs[i][fi] = uvs
        }
      }
      if(hasFaceNormal) {
        normalIndex = faces[offset++] * 3;
        normal = new THREE.Vector3;
        normal.x = normals[normalIndex++];
        normal.y = normals[normalIndex++];
        normal.z = normals[normalIndex];
        face.normal = normal
      }
      if(hasFaceVertexNormal) {
        for(i = 0;i < nVertices;i++) {
          normalIndex = faces[offset++] * 3;
          normal = new THREE.Vector3;
          normal.x = normals[normalIndex++];
          normal.y = normals[normalIndex++];
          normal.z = normals[normalIndex];
          face.vertexNormals.push(normal)
        }
      }
      if(hasFaceColor) {
        colorIndex = faces[offset++];
        color = new THREE.Color(colors[colorIndex]);
        face.color = color
      }
      if(hasFaceVertexColor) {
        for(i = 0;i < nVertices;i++) {
          colorIndex = faces[offset++];
          color = new THREE.Color(colors[colorIndex]);
          face.vertexColors.push(color)
        }
      }
      geometry.faces.push(face)
    }
  }
  function parseSkin() {
    var i, l, x, y, z, w, a, b, c, d;
    if(json.skinWeights) {
      for(i = 0, l = json.skinWeights.length;i < l;i += 2) {
        x = json.skinWeights[i];
        y = json.skinWeights[i + 1];
        z = 0;
        w = 0;
        geometry.skinWeights.push(new THREE.Vector4(x, y, z, w))
      }
    }
    if(json.skinIndices) {
      for(i = 0, l = json.skinIndices.length;i < l;i += 2) {
        a = json.skinIndices[i];
        b = json.skinIndices[i + 1];
        c = 0;
        d = 0;
        geometry.skinIndices.push(new THREE.Vector4(a, b, c, d))
      }
    }
    geometry.bones = json.bones;
    geometry.animation = json.animation
  }
  function parseMorphing(scale) {
    if(json.morphTargets !== undefined) {
      var i, l, v, vl, dstVertices, srcVertices;
      for(i = 0, l = json.morphTargets.length;i < l;i++) {
        geometry.morphTargets[i] = {};
        geometry.morphTargets[i].name = json.morphTargets[i].name;
        geometry.morphTargets[i].vertices = [];
        dstVertices = geometry.morphTargets[i].vertices;
        srcVertices = json.morphTargets[i].vertices;
        for(v = 0, vl = srcVertices.length;v < vl;v += 3) {
          var vertex = new THREE.Vector3;
          vertex.x = srcVertices[v] * scale;
          vertex.y = srcVertices[v + 1] * scale;
          vertex.z = srcVertices[v + 2] * scale;
          dstVertices.push(vertex)
        }
      }
    }
    if(json.morphColors !== undefined) {
      var i, l, c, cl, dstColors, srcColors, color;
      for(i = 0, l = json.morphColors.length;i < l;i++) {
        geometry.morphColors[i] = {};
        geometry.morphColors[i].name = json.morphColors[i].name;
        geometry.morphColors[i].colors = [];
        dstColors = geometry.morphColors[i].colors;
        srcColors = json.morphColors[i].colors;
        for(c = 0, cl = srcColors.length;c < cl;c += 3) {
          color = new THREE.Color(16755200);
          color.setRGB(srcColors[c], srcColors[c + 1], srcColors[c + 2]);
          dstColors.push(color)
        }
      }
    }
  }
  var materials = this.initMaterials(json.materials, texturePath);
  if(this.needsTangents(materials)) {
    geometry.computeTangents()
  }
  callback(geometry, materials)
};
THREE.LoadingMonitor = function() {
  THREE.EventDispatcher.call(this);
  var scope = this;
  var loaded = 0;
  var total = 0;
  var onLoad = function(event) {
    loaded++;
    scope.dispatchEvent({type:"progress", loaded:loaded, total:total});
    if(loaded === total) {
      scope.dispatchEvent({type:"load"})
    }
  };
  this.add = function(loader) {
    total++;
    loader.addEventListener("load", onLoad, false)
  }
};
THREE.SceneLoader = function() {
  this.onLoadStart = function() {
  };
  this.onLoadProgress = function() {
  };
  this.onLoadComplete = function() {
  };
  this.callbackSync = function() {
  };
  this.callbackProgress = function() {
  };
  this.geometryHandlerMap = {};
  this.hierarchyHandlerMap = {};
  this.addGeometryHandler("ascii", THREE.JSONLoader)
};
THREE.SceneLoader.prototype.constructor = THREE.SceneLoader;
THREE.SceneLoader.prototype.load = function(url, callbackFinished) {
  var scope = this;
  var xhr = new XMLHttpRequest;
  xhr.onreadystatechange = function() {
    if(xhr.readyState === 4) {
      if(xhr.status === 200 || xhr.status === 0) {
        var json = JSON.parse(xhr.responseText);
        scope.parse(json, callbackFinished, url)
      }else {
        console.error("THREE.SceneLoader: Couldn't load [" + url + "] [" + xhr.status + "]")
      }
    }
  };
  xhr.open("GET", url, true);
  xhr.send(null)
};
THREE.SceneLoader.prototype.addGeometryHandler = function(typeID, loaderClass) {
  this.geometryHandlerMap[typeID] = {"loaderClass":loaderClass}
};
THREE.SceneLoader.prototype.addHierarchyHandler = function(typeID, loaderClass) {
  this.hierarchyHandlerMap[typeID] = {"loaderClass":loaderClass}
};
THREE.SceneLoader.prototype.parse = function(json, callbackFinished, url) {
  var scope = this;
  var urlBase = THREE.Loader.prototype.extractUrlBase(url);
  var geometry, material, camera, fog, texture, images, color, light, hex, intensity, counter_models, counter_textures, total_models, total_textures, result;
  var target_array = [];
  var data = json;
  for(var typeID in this.geometryHandlerMap) {
    var loaderClass = this.geometryHandlerMap[typeID]["loaderClass"];
    this.geometryHandlerMap[typeID]["loaderObject"] = new loaderClass
  }
  for(var typeID in this.hierarchyHandlerMap) {
    var loaderClass = this.hierarchyHandlerMap[typeID]["loaderClass"];
    this.hierarchyHandlerMap[typeID]["loaderObject"] = new loaderClass
  }
  counter_models = 0;
  counter_textures = 0;
  result = {scene:new THREE.Scene, geometries:{}, face_materials:{}, materials:{}, textures:{}, objects:{}, cameras:{}, lights:{}, fogs:{}, empties:{}, groups:{}};
  if(data.transform) {
    var position = data.transform.position, rotation = data.transform.rotation, scale = data.transform.scale;
    if(position) {
      result.scene.position.set(position[0], position[1], position[2])
    }
    if(rotation) {
      result.scene.rotation.set(rotation[0], rotation[1], rotation[2])
    }
    if(scale) {
      result.scene.scale.set(scale[0], scale[1], scale[2])
    }
    if(position || rotation || scale) {
      result.scene.updateMatrix();
      result.scene.updateMatrixWorld()
    }
  }
  function get_url(source_url, url_type) {
    if(url_type == "relativeToHTML") {
      return source_url
    }else {
      return urlBase + "/" + source_url
    }
  }
  function handle_objects() {
    handle_children(result.scene, data.objects)
  }
  function handle_children(parent, children) {
    var mat, dst, pos, rot, scl, quat;
    for(var objID in children) {
      if(result.objects[objID] === undefined) {
        var objJSON = children[objID];
        var object = null;
        if(objJSON.type && objJSON.type in scope.hierarchyHandlerMap) {
          if(objJSON.loading === undefined) {
            var reservedTypes = {"type":1, "url":1, "material":1, "position":1, "rotation":1, "scale":1, "visible":1, "children":1, "properties":1, "skin":1, "morph":1, "mirroredLoop":1, "duration":1};
            var loaderParameters = {};
            for(var parType in objJSON) {
              if(!(parType in reservedTypes)) {
                loaderParameters[parType] = objJSON[parType]
              }
            }
            material = result.materials[objJSON.material];
            objJSON.loading = true;
            var loader = scope.hierarchyHandlerMap[objJSON.type]["loaderObject"];
            if(loader.options) {
              loader.load(get_url(objJSON.url, data.urlBaseType), create_callback_hierachy(objID, parent, material, objJSON))
            }else {
              loader.load(get_url(objJSON.url, data.urlBaseType), create_callback_hierachy(objID, parent, material, objJSON), loaderParameters)
            }
          }
        }else {
          if(objJSON.geometry !== undefined) {
            geometry = result.geometries[objJSON.geometry];
            if(geometry) {
              var needsTangents = false;
              material = result.materials[objJSON.material];
              needsTangents = material instanceof THREE.ShaderMaterial;
              pos = objJSON.position;
              rot = objJSON.rotation;
              scl = objJSON.scale;
              mat = objJSON.matrix;
              quat = objJSON.quaternion;
              if(!objJSON.material) {
                material = new THREE.MeshFaceMaterial(result.face_materials[objJSON.geometry])
              }
              if(material instanceof THREE.MeshFaceMaterial && material.materials.length === 0) {
                material = new THREE.MeshFaceMaterial(result.face_materials[objJSON.geometry])
              }
              if(material instanceof THREE.MeshFaceMaterial) {
                for(var i = 0;i < material.materials.length;i++) {
                  needsTangents = needsTangents || material.materials[i] instanceof THREE.ShaderMaterial
                }
              }
              if(needsTangents) {
                geometry.computeTangents()
              }
              if(objJSON.skin) {
                object = new THREE.SkinnedMesh(geometry, material)
              }else {
                if(objJSON.morph) {
                  object = new THREE.MorphAnimMesh(geometry, material);
                  if(objJSON.duration !== undefined) {
                    object.duration = objJSON.duration
                  }
                  if(objJSON.time !== undefined) {
                    object.time = objJSON.time
                  }
                  if(objJSON.mirroredLoop !== undefined) {
                    object.mirroredLoop = objJSON.mirroredLoop
                  }
                  if(material.morphNormals) {
                    geometry.computeMorphNormals()
                  }
                }else {
                  object = new THREE.Mesh(geometry, material)
                }
              }
              object.name = objID;
              if(mat) {
                object.matrixAutoUpdate = false;
                object.matrix.set(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15])
              }else {
                object.position.set(pos[0], pos[1], pos[2]);
                if(quat) {
                  object.quaternion.set(quat[0], quat[1], quat[2], quat[3]);
                  object.useQuaternion = true
                }else {
                  object.rotation.set(rot[0], rot[1], rot[2])
                }
                object.scale.set(scl[0], scl[1], scl[2])
              }
              object.visible = objJSON.visible;
              object.castShadow = objJSON.castShadow;
              object.receiveShadow = objJSON.receiveShadow;
              parent.add(object);
              result.objects[objID] = object
            }
          }else {
            if(objJSON.type === "DirectionalLight" || objJSON.type === "PointLight" || objJSON.type === "AmbientLight") {
              hex = objJSON.color !== undefined ? objJSON.color : 16777215;
              intensity = objJSON.intensity !== undefined ? objJSON.intensity : 1;
              if(objJSON.type === "DirectionalLight") {
                pos = objJSON.direction;
                light = new THREE.DirectionalLight(hex, intensity);
                light.position.set(pos[0], pos[1], pos[2]);
                if(objJSON.target) {
                  target_array.push({"object":light, "targetName":objJSON.target});
                  light.target = null
                }
              }else {
                if(objJSON.type === "PointLight") {
                  pos = objJSON.position;
                  dst = objJSON.distance;
                  light = new THREE.PointLight(hex, intensity, dst);
                  light.position.set(pos[0], pos[1], pos[2])
                }else {
                  if(objJSON.type === "AmbientLight") {
                    light = new THREE.AmbientLight(hex)
                  }
                }
              }
              parent.add(light);
              light.name = objID;
              result.lights[objID] = light;
              result.objects[objID] = light
            }else {
              if(objJSON.type === "PerspectiveCamera" || objJSON.type === "OrthographicCamera") {
                if(objJSON.type === "PerspectiveCamera") {
                  camera = new THREE.PerspectiveCamera(objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far)
                }else {
                  if(objJSON.type === "OrthographicCamera") {
                    camera = new THREE.OrthographicCamera(objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far)
                  }
                }
                pos = objJSON.position;
                camera.position.set(pos[0], pos[1], pos[2]);
                parent.add(camera);
                camera.name = objID;
                result.cameras[objID] = camera;
                result.objects[objID] = camera
              }else {
                pos = objJSON.position;
                rot = objJSON.rotation;
                scl = objJSON.scale;
                quat = objJSON.quaternion;
                object = new THREE.Object3D;
                object.name = objID;
                object.position.set(pos[0], pos[1], pos[2]);
                if(quat) {
                  object.quaternion.set(quat[0], quat[1], quat[2], quat[3]);
                  object.useQuaternion = true
                }else {
                  object.rotation.set(rot[0], rot[1], rot[2])
                }
                object.scale.set(scl[0], scl[1], scl[2]);
                object.visible = objJSON.visible !== undefined ? objJSON.visible : false;
                parent.add(object);
                result.objects[objID] = object;
                result.empties[objID] = object
              }
            }
          }
        }
        if(object) {
          if(objJSON.properties !== undefined) {
            for(var key in objJSON.properties) {
              var value = objJSON.properties[key];
              object.properties[key] = value
            }
          }
          if(objJSON.groups !== undefined) {
            for(var i = 0;i < objJSON.groups.length;i++) {
              var groupID = objJSON.groups[i];
              if(result.groups[groupID] === undefined) {
                result.groups[groupID] = []
              }
              result.groups[groupID].push(objID)
            }
          }
          if(objJSON.children !== undefined) {
            handle_children(object, objJSON.children)
          }
        }
      }
    }
  }
  function handle_mesh(geo, mat, id) {
    result.geometries[id] = geo;
    result.face_materials[id] = mat;
    handle_objects()
  }
  function handle_hierarchy(node, id, parent, material, obj) {
    var p = obj.position;
    var r = obj.rotation;
    var q = obj.quaternion;
    var s = obj.scale;
    node.position.set(p[0], p[1], p[2]);
    if(q) {
      node.quaternion.set(q[0], q[1], q[2], q[3]);
      node.useQuaternion = true
    }else {
      node.rotation.set(r[0], r[1], r[2])
    }
    node.scale.set(s[0], s[1], s[2]);
    if(material) {
      node.traverse(function(child) {
        child.material = material
      })
    }
    var visible = obj.visible !== undefined ? obj.visible : true;
    node.traverse(function(child) {
      child.visible = visible
    });
    parent.add(node);
    node.name = id;
    result.objects[id] = node;
    handle_objects()
  }
  function create_callback_geometry(id) {
    return function(geo, mat) {
      handle_mesh(geo, mat, id);
      counter_models -= 1;
      scope.onLoadComplete();
      async_callback_gate()
    }
  }
  function create_callback_hierachy(id, parent, material, obj) {
    return function(event) {
      var result;
      if(event.content) {
        result = event.content
      }else {
        if(event.dae) {
          result = event.scene
        }else {
          result = event
        }
      }
      handle_hierarchy(result, id, parent, material, obj);
      counter_models -= 1;
      scope.onLoadComplete();
      async_callback_gate()
    }
  }
  function create_callback_embed(id) {
    return function(geo, mat) {
      result.geometries[id] = geo;
      result.face_materials[id] = mat
    }
  }
  function async_callback_gate() {
    var progress = {totalModels:total_models, totalTextures:total_textures, loadedModels:total_models - counter_models, loadedTextures:total_textures - counter_textures};
    scope.callbackProgress(progress, result);
    scope.onLoadProgress();
    if(counter_models === 0 && counter_textures === 0) {
      finalize();
      callbackFinished(result)
    }
  }
  function finalize() {
    for(var i = 0;i < target_array.length;i++) {
      var ta = target_array[i];
      var target = result.objects[ta.targetName];
      if(target) {
        ta.object.target = target
      }else {
        ta.object.target = new THREE.Object3D;
        result.scene.add(ta.object.target)
      }
      ta.object.target.properties.targetInverse = ta.object
    }
  }
  var callbackTexture = function(count) {
    counter_textures -= count;
    async_callback_gate();
    scope.onLoadComplete()
  };
  var generateTextureCallback = function(count) {
    return function() {
      callbackTexture(count)
    }
  };
  var fogID, fogJSON;
  for(fogID in data.fogs) {
    fogJSON = data.fogs[fogID];
    if(fogJSON.type === "linear") {
      fog = new THREE.Fog(0, fogJSON.near, fogJSON.far)
    }else {
      if(fogJSON.type === "exp2") {
        fog = new THREE.FogExp2(0, fogJSON.density)
      }
    }
    color = fogJSON.color;
    fog.color.setRGB(color[0], color[1], color[2]);
    result.fogs[fogID] = fog
  }
  var geoID, geoJSON;
  for(geoID in data.geometries) {
    geoJSON = data.geometries[geoID];
    if(geoJSON.type in this.geometryHandlerMap) {
      counter_models += 1;
      scope.onLoadStart()
    }
  }
  var objID, objJSON;
  for(objID in data.objects) {
    objJSON = data.objects[objID];
    if(objJSON.type && objJSON.type in this.hierarchyHandlerMap) {
      counter_models += 1;
      scope.onLoadStart()
    }
  }
  total_models = counter_models;
  for(geoID in data.geometries) {
    geoJSON = data.geometries[geoID];
    if(geoJSON.type === "cube") {
      geometry = new THREE.CubeGeometry(geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments);
      result.geometries[geoID] = geometry
    }else {
      if(geoJSON.type === "plane") {
        geometry = new THREE.PlaneGeometry(geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments);
        result.geometries[geoID] = geometry
      }else {
        if(geoJSON.type === "sphere") {
          geometry = new THREE.SphereGeometry(geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments);
          result.geometries[geoID] = geometry
        }else {
          if(geoJSON.type === "cylinder") {
            geometry = new THREE.CylinderGeometry(geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs);
            result.geometries[geoID] = geometry
          }else {
            if(geoJSON.type === "torus") {
              geometry = new THREE.TorusGeometry(geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT);
              result.geometries[geoID] = geometry
            }else {
              if(geoJSON.type === "icosahedron") {
                geometry = new THREE.IcosahedronGeometry(geoJSON.radius, geoJSON.subdivisions);
                result.geometries[geoID] = geometry
              }else {
                if(geoJSON.type in this.geometryHandlerMap) {
                  var loaderParameters = {};
                  for(var parType in geoJSON) {
                    if(parType !== "type" && parType !== "url") {
                      loaderParameters[parType] = geoJSON[parType]
                    }
                  }
                  var loader = this.geometryHandlerMap[geoJSON.type]["loaderObject"];
                  loader.load(get_url(geoJSON.url, data.urlBaseType), create_callback_geometry(geoID), loaderParameters)
                }else {
                  if(geoJSON.type === "embedded") {
                    var modelJson = data.embeds[geoJSON.id], texture_path = "";
                    modelJson.metadata = data.metadata;
                    if(modelJson) {
                      var jsonLoader = this.geometryHandlerMap["ascii"]["loaderObject"];
                      jsonLoader.createModel(modelJson, create_callback_embed(geoID), texture_path)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  var textureID, textureJSON;
  for(textureID in data.textures) {
    textureJSON = data.textures[textureID];
    if(textureJSON.url instanceof Array) {
      counter_textures += textureJSON.url.length;
      for(var n = 0;n < textureJSON.url.length;n++) {
        scope.onLoadStart()
      }
    }else {
      counter_textures += 1;
      scope.onLoadStart()
    }
  }
  total_textures = counter_textures;
  for(textureID in data.textures) {
    textureJSON = data.textures[textureID];
    if(textureJSON.mapping !== undefined && THREE[textureJSON.mapping] !== undefined) {
      textureJSON.mapping = new THREE[textureJSON.mapping]
    }
    if(textureJSON.url instanceof Array) {
      var count = textureJSON.url.length;
      var url_array = [];
      for(var i = 0;i < count;i++) {
        url_array[i] = get_url(textureJSON.url[i], data.urlBaseType)
      }
      var isCompressed = url_array[0].endsWith(".dds");
      if(isCompressed) {
        texture = THREE.ImageUtils.loadCompressedTextureCube(url_array, textureJSON.mapping, generateTextureCallback(count))
      }else {
        texture = THREE.ImageUtils.loadTextureCube(url_array, textureJSON.mapping, generateTextureCallback(count))
      }
    }else {
      var isCompressed = textureJSON.url.toLowerCase().endsWith(".dds");
      var fullUrl = get_url(textureJSON.url, data.urlBaseType);
      var textureCallback = generateTextureCallback(1);
      if(isCompressed) {
        texture = THREE.ImageUtils.loadCompressedTexture(fullUrl, textureJSON.mapping, textureCallback)
      }else {
        texture = THREE.ImageUtils.loadTexture(fullUrl, textureJSON.mapping, textureCallback)
      }
      if(THREE[textureJSON.minFilter] !== undefined) {
        texture.minFilter = THREE[textureJSON.minFilter]
      }
      if(THREE[textureJSON.magFilter] !== undefined) {
        texture.magFilter = THREE[textureJSON.magFilter]
      }
      if(textureJSON.anisotropy) {
        texture.anisotropy = textureJSON.anisotropy
      }
      if(textureJSON.repeat) {
        texture.repeat.set(textureJSON.repeat[0], textureJSON.repeat[1]);
        if(textureJSON.repeat[0] !== 1) {
          texture.wrapS = THREE.RepeatWrapping
        }
        if(textureJSON.repeat[1] !== 1) {
          texture.wrapT = THREE.RepeatWrapping
        }
      }
      if(textureJSON.offset) {
        texture.offset.set(textureJSON.offset[0], textureJSON.offset[1])
      }
      if(textureJSON.wrap) {
        var wrapMap = {"repeat":THREE.RepeatWrapping, "mirror":THREE.MirroredRepeatWrapping};
        if(wrapMap[textureJSON.wrap[0]] !== undefined) {
          texture.wrapS = wrapMap[textureJSON.wrap[0]]
        }
        if(wrapMap[textureJSON.wrap[1]] !== undefined) {
          texture.wrapT = wrapMap[textureJSON.wrap[1]]
        }
      }
    }
    result.textures[textureID] = texture
  }
  var matID, matJSON;
  var parID;
  for(matID in data.materials) {
    matJSON = data.materials[matID];
    for(parID in matJSON.parameters) {
      if(parID === "envMap" || parID === "map" || parID === "lightMap" || parID === "bumpMap") {
        matJSON.parameters[parID] = result.textures[matJSON.parameters[parID]]
      }else {
        if(parID === "shading") {
          matJSON.parameters[parID] = matJSON.parameters[parID] === "flat" ? THREE.FlatShading : THREE.SmoothShading
        }else {
          if(parID === "side") {
            if(matJSON.parameters[parID] == "double") {
              matJSON.parameters[parID] = THREE.DoubleSide
            }else {
              if(matJSON.parameters[parID] == "back") {
                matJSON.parameters[parID] = THREE.BackSide
              }else {
                matJSON.parameters[parID] = THREE.FrontSide
              }
            }
          }else {
            if(parID === "blending") {
              matJSON.parameters[parID] = matJSON.parameters[parID] in THREE ? THREE[matJSON.parameters[parID]] : THREE.NormalBlending
            }else {
              if(parID === "combine") {
                matJSON.parameters[parID] = matJSON.parameters[parID] in THREE ? THREE[matJSON.parameters[parID]] : THREE.MultiplyOperation
              }else {
                if(parID === "vertexColors") {
                  if(matJSON.parameters[parID] == "face") {
                    matJSON.parameters[parID] = THREE.FaceColors
                  }else {
                    if(matJSON.parameters[parID]) {
                      matJSON.parameters[parID] = THREE.VertexColors
                    }
                  }
                }else {
                  if(parID === "wrapRGB") {
                    var v3 = matJSON.parameters[parID];
                    matJSON.parameters[parID] = new THREE.Vector3(v3[0], v3[1], v3[2])
                  }
                }
              }
            }
          }
        }
      }
    }
    if(matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1) {
      matJSON.parameters.transparent = true
    }
    if(matJSON.parameters.normalMap) {
      var shader = THREE.ShaderLib["normalmap"];
      var uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      var diffuse = matJSON.parameters.color;
      var specular = matJSON.parameters.specular;
      var ambient = matJSON.parameters.ambient;
      var shininess = matJSON.parameters.shininess;
      uniforms["tNormal"].value = result.textures[matJSON.parameters.normalMap];
      if(matJSON.parameters.normalScale) {
        uniforms["uNormalScale"].value.set(matJSON.parameters.normalScale[0], matJSON.parameters.normalScale[1])
      }
      if(matJSON.parameters.map) {
        uniforms["tDiffuse"].value = matJSON.parameters.map;
        uniforms["enableDiffuse"].value = true
      }
      if(matJSON.parameters.envMap) {
        uniforms["tCube"].value = matJSON.parameters.envMap;
        uniforms["enableReflection"].value = true;
        uniforms["uReflectivity"].value = matJSON.parameters.reflectivity
      }
      if(matJSON.parameters.lightMap) {
        uniforms["tAO"].value = matJSON.parameters.lightMap;
        uniforms["enableAO"].value = true
      }
      if(matJSON.parameters.specularMap) {
        uniforms["tSpecular"].value = result.textures[matJSON.parameters.specularMap];
        uniforms["enableSpecular"].value = true
      }
      if(matJSON.parameters.displacementMap) {
        uniforms["tDisplacement"].value = result.textures[matJSON.parameters.displacementMap];
        uniforms["enableDisplacement"].value = true;
        uniforms["uDisplacementBias"].value = matJSON.parameters.displacementBias;
        uniforms["uDisplacementScale"].value = matJSON.parameters.displacementScale
      }
      uniforms["uDiffuseColor"].value.setHex(diffuse);
      uniforms["uSpecularColor"].value.setHex(specular);
      uniforms["uAmbientColor"].value.setHex(ambient);
      uniforms["uShininess"].value = shininess;
      if(matJSON.parameters.opacity) {
        uniforms["uOpacity"].value = matJSON.parameters.opacity
      }
      var parameters = {fragmentShader:shader.fragmentShader, vertexShader:shader.vertexShader, uniforms:uniforms, lights:true, fog:true};
      material = new THREE.ShaderMaterial(parameters)
    }else {
      material = new THREE[matJSON.type](matJSON.parameters)
    }
    result.materials[matID] = material
  }
  for(matID in data.materials) {
    matJSON = data.materials[matID];
    if(matJSON.parameters.materials) {
      var materialArray = [];
      for(var i = 0;i < matJSON.parameters.materials.length;i++) {
        var label = matJSON.parameters.materials[i];
        materialArray.push(result.materials[label])
      }
      result.materials[matID].materials = materialArray
    }
  }
  handle_objects();
  if(result.cameras && data.defaults.camera) {
    result.currentCamera = result.cameras[data.defaults.camera]
  }
  if(result.fogs && data.defaults.fog) {
    result.scene.fog = result.fogs[data.defaults.fog]
  }
  scope.callbackSync(result);
  async_callback_gate()
};
THREE.TextureLoader = function() {
  THREE.EventDispatcher.call(this);
  this.crossOrigin = null
};
THREE.TextureLoader.prototype = {constructor:THREE.TextureLoader, load:function(url) {
  var scope = this;
  var image = new Image;
  image.addEventListener("load", function() {
    var texture = new THREE.Texture(image);
    texture.needsUpdate = true;
    scope.dispatchEvent({type:"load", content:texture})
  }, false);
  image.addEventListener("error", function() {
    scope.dispatchEvent({type:"error", message:"Couldn't load URL [" + url + "]"})
  }, false);
  if(scope.crossOrigin) {
    image.crossOrigin = scope.crossOrigin
  }
  image.src = url
}};
THREE.Material = function() {
  THREE.EventDispatcher.call(this);
  this.id = THREE.MaterialIdCount++;
  this.name = "";
  this.side = THREE.FrontSide;
  this.opacity = 1;
  this.transparent = false;
  this.blending = THREE.NormalBlending;
  this.blendSrc = THREE.SrcAlphaFactor;
  this.blendDst = THREE.OneMinusSrcAlphaFactor;
  this.blendEquation = THREE.AddEquation;
  this.depthTest = true;
  this.depthWrite = true;
  this.polygonOffset = false;
  this.polygonOffsetFactor = 0;
  this.polygonOffsetUnits = 0;
  this.alphaTest = 0;
  this.overdraw = false;
  this.visible = true;
  this.needsUpdate = true
};
THREE.Material.prototype.setValues = function(values) {
  if(values === undefined) {
    return
  }
  for(var key in values) {
    var newValue = values[key];
    if(newValue === undefined) {
      console.warn("THREE.Material: '" + key + "' parameter is undefined.");
      continue
    }
    if(key in this) {
      var currentValue = this[key];
      if(currentValue instanceof THREE.Color && newValue instanceof THREE.Color) {
        currentValue.copy(newValue)
      }else {
        if(currentValue instanceof THREE.Color) {
          currentValue.set(newValue)
        }else {
          if(currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3) {
            currentValue.copy(newValue)
          }else {
            this[key] = newValue
          }
        }
      }
    }
  }
};
THREE.Material.prototype.clone = function(material) {
  if(material === undefined) {
    material = new THREE.Material
  }
  material.name = this.name;
  material.side = this.side;
  material.opacity = this.opacity;
  material.transparent = this.transparent;
  material.blending = this.blending;
  material.blendSrc = this.blendSrc;
  material.blendDst = this.blendDst;
  material.blendEquation = this.blendEquation;
  material.depthTest = this.depthTest;
  material.depthWrite = this.depthWrite;
  material.polygonOffset = this.polygonOffset;
  material.polygonOffsetFactor = this.polygonOffsetFactor;
  material.polygonOffsetUnits = this.polygonOffsetUnits;
  material.alphaTest = this.alphaTest;
  material.overdraw = this.overdraw;
  material.visible = this.visible;
  return material
};
THREE.Material.prototype.dispose = function() {
  this.dispatchEvent({type:"dispose"})
};
THREE.MaterialIdCount = 0;
THREE.LineBasicMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.linewidth = 1;
  this.linecap = "round";
  this.linejoin = "round";
  this.vertexColors = false;
  this.fog = true;
  this.setValues(parameters)
};
THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone = function() {
  var material = new THREE.LineBasicMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.linewidth = this.linewidth;
  material.linecap = this.linecap;
  material.linejoin = this.linejoin;
  material.vertexColors = this.vertexColors;
  material.fog = this.fog;
  return material
};
THREE.LineDashedMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.linewidth = 1;
  this.scale = 1;
  this.dashSize = 3;
  this.gapSize = 1;
  this.vertexColors = false;
  this.fog = true;
  this.setValues(parameters)
};
THREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.clone = function() {
  var material = new THREE.LineDashedMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.linewidth = this.linewidth;
  material.scale = this.scale;
  material.dashSize = this.dashSize;
  material.gapSize = this.gapSize;
  material.vertexColors = this.vertexColors;
  material.fog = this.fog;
  return material
};
THREE.MeshBasicMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.map = null;
  this.lightMap = null;
  this.specularMap = null;
  this.envMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.fog = true;
  this.shading = THREE.SmoothShading;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.vertexColors = THREE.NoColors;
  this.skinning = false;
  this.morphTargets = false;
  this.setValues(parameters)
};
THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone = function() {
  var material = new THREE.MeshBasicMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.map = this.map;
  material.lightMap = this.lightMap;
  material.specularMap = this.specularMap;
  material.envMap = this.envMap;
  material.combine = this.combine;
  material.reflectivity = this.reflectivity;
  material.refractionRatio = this.refractionRatio;
  material.fog = this.fog;
  material.shading = this.shading;
  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.wireframeLinecap = this.wireframeLinecap;
  material.wireframeLinejoin = this.wireframeLinejoin;
  material.vertexColors = this.vertexColors;
  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;
  return material
};
THREE.MeshLambertMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.ambient = new THREE.Color(16777215);
  this.emissive = new THREE.Color(0);
  this.wrapAround = false;
  this.wrapRGB = new THREE.Vector3(1, 1, 1);
  this.map = null;
  this.lightMap = null;
  this.specularMap = null;
  this.envMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.fog = true;
  this.shading = THREE.SmoothShading;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.vertexColors = THREE.NoColors;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters)
};
THREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone = function() {
  var material = new THREE.MeshLambertMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.ambient.copy(this.ambient);
  material.emissive.copy(this.emissive);
  material.wrapAround = this.wrapAround;
  material.wrapRGB.copy(this.wrapRGB);
  material.map = this.map;
  material.lightMap = this.lightMap;
  material.specularMap = this.specularMap;
  material.envMap = this.envMap;
  material.combine = this.combine;
  material.reflectivity = this.reflectivity;
  material.refractionRatio = this.refractionRatio;
  material.fog = this.fog;
  material.shading = this.shading;
  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.wireframeLinecap = this.wireframeLinecap;
  material.wireframeLinejoin = this.wireframeLinejoin;
  material.vertexColors = this.vertexColors;
  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;
  material.morphNormals = this.morphNormals;
  return material
};
THREE.MeshPhongMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.ambient = new THREE.Color(16777215);
  this.emissive = new THREE.Color(0);
  this.specular = new THREE.Color(1118481);
  this.shininess = 30;
  this.metal = false;
  this.perPixel = true;
  this.wrapAround = false;
  this.wrapRGB = new THREE.Vector3(1, 1, 1);
  this.map = null;
  this.lightMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalScale = new THREE.Vector2(1, 1);
  this.specularMap = null;
  this.envMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.fog = true;
  this.shading = THREE.SmoothShading;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.vertexColors = THREE.NoColors;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters)
};
THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone = function() {
  var material = new THREE.MeshPhongMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.ambient.copy(this.ambient);
  material.emissive.copy(this.emissive);
  material.specular.copy(this.specular);
  material.shininess = this.shininess;
  material.metal = this.metal;
  material.perPixel = this.perPixel;
  material.wrapAround = this.wrapAround;
  material.wrapRGB.copy(this.wrapRGB);
  material.map = this.map;
  material.lightMap = this.lightMap;
  material.bumpMap = this.bumpMap;
  material.bumpScale = this.bumpScale;
  material.normalMap = this.normalMap;
  material.normalScale.copy(this.normalScale);
  material.specularMap = this.specularMap;
  material.envMap = this.envMap;
  material.combine = this.combine;
  material.reflectivity = this.reflectivity;
  material.refractionRatio = this.refractionRatio;
  material.fog = this.fog;
  material.shading = this.shading;
  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.wireframeLinecap = this.wireframeLinecap;
  material.wireframeLinejoin = this.wireframeLinejoin;
  material.vertexColors = this.vertexColors;
  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;
  material.morphNormals = this.morphNormals;
  return material
};
THREE.MeshDepthMaterial = function(parameters) {
  THREE.Material.call(this);
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.setValues(parameters)
};
THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshDepthMaterial.prototype.clone = function() {
  var material = new THREE.LineBasicMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  return material
};
THREE.MeshNormalMaterial = function(parameters) {
  THREE.Material.call(this, parameters);
  this.shading = THREE.FlatShading;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.setValues(parameters)
};
THREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshNormalMaterial.prototype.clone = function() {
  var material = new THREE.MeshNormalMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.shading = this.shading;
  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  return material
};
THREE.MeshFaceMaterial = function(materials) {
  this.materials = materials instanceof Array ? materials : []
};
THREE.MeshFaceMaterial.prototype.clone = function() {
  return new THREE.MeshFaceMaterial(this.materials.slice(0))
};
THREE.ParticleBasicMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.map = null;
  this.size = 1;
  this.sizeAttenuation = true;
  this.vertexColors = false;
  this.fog = true;
  this.setValues(parameters)
};
THREE.ParticleBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone = function() {
  var material = new THREE.ParticleBasicMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.map = this.map;
  material.size = this.size;
  material.sizeAttenuation = this.sizeAttenuation;
  material.vertexColors = this.vertexColors;
  material.fog = this.fog;
  return material
};
THREE.ParticleCanvasMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.program = function(context, color) {
  };
  this.setValues(parameters)
};
THREE.ParticleCanvasMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.ParticleCanvasMaterial.prototype.clone = function() {
  var material = new THREE.ParticleCanvasMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.program = this.program;
  return material
};
THREE.ShaderMaterial = function(parameters) {
  THREE.Material.call(this);
  this.fragmentShader = "void main() {}";
  this.vertexShader = "void main() {}";
  this.uniforms = {};
  this.defines = {};
  this.attributes = null;
  this.shading = THREE.SmoothShading;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.lights = false;
  this.vertexColors = THREE.NoColors;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters)
};
THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone = function() {
  var material = new THREE.ShaderMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.fragmentShader = this.fragmentShader;
  material.vertexShader = this.vertexShader;
  material.uniforms = THREE.UniformsUtils.clone(this.uniforms);
  material.attributes = this.attributes;
  material.defines = this.defines;
  material.shading = this.shading;
  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.fog = this.fog;
  material.lights = this.lights;
  material.vertexColors = this.vertexColors;
  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;
  material.morphNormals = this.morphNormals;
  return material
};
THREE.SpriteMaterial = function(parameters) {
  THREE.Material.call(this);
  this.color = new THREE.Color(16777215);
  this.map = new THREE.Texture;
  this.useScreenCoordinates = true;
  this.depthTest = !this.useScreenCoordinates;
  this.sizeAttenuation = !this.useScreenCoordinates;
  this.scaleByViewport = !this.sizeAttenuation;
  this.alignment = THREE.SpriteAlignment.center.clone();
  this.fog = false;
  this.uvOffset = new THREE.Vector2(0, 0);
  this.uvScale = new THREE.Vector2(1, 1);
  this.setValues(parameters);
  parameters = parameters || {};
  if(parameters.depthTest === undefined) {
    this.depthTest = !this.useScreenCoordinates
  }
  if(parameters.sizeAttenuation === undefined) {
    this.sizeAttenuation = !this.useScreenCoordinates
  }
  if(parameters.scaleByViewport === undefined) {
    this.scaleByViewport = !this.sizeAttenuation
  }
};
THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.clone = function() {
  var material = new THREE.SpriteMaterial;
  THREE.Material.prototype.clone.call(this, material);
  material.color.copy(this.color);
  material.map = this.map;
  material.useScreenCoordinates = this.useScreenCoordinates;
  material.sizeAttenuation = this.sizeAttenuation;
  material.scaleByViewport = this.scaleByViewport;
  material.alignment.copy(this.alignment);
  material.uvOffset.copy(this.uvOffset);
  material.uvScale.copy(this.uvScale);
  material.fog = this.fog;
  return material
};
THREE.SpriteAlignment = {};
THREE.SpriteAlignment.topLeft = new THREE.Vector2(1, -1);
THREE.SpriteAlignment.topCenter = new THREE.Vector2(0, -1);
THREE.SpriteAlignment.topRight = new THREE.Vector2(-1, -1);
THREE.SpriteAlignment.centerLeft = new THREE.Vector2(1, 0);
THREE.SpriteAlignment.center = new THREE.Vector2(0, 0);
THREE.SpriteAlignment.centerRight = new THREE.Vector2(-1, 0);
THREE.SpriteAlignment.bottomLeft = new THREE.Vector2(1, 1);
THREE.SpriteAlignment.bottomCenter = new THREE.Vector2(0, 1);
THREE.SpriteAlignment.bottomRight = new THREE.Vector2(-1, 1);
THREE.Texture = function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  THREE.EventDispatcher.call(this);
  this.id = THREE.TextureIdCount++;
  this.name = "";
  this.image = image;
  this.mipmaps = [];
  this.mapping = mapping !== undefined ? mapping : new THREE.UVMapping;
  this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
  this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;
  this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
  this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;
  this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
  this.format = format !== undefined ? format : THREE.RGBAFormat;
  this.type = type !== undefined ? type : THREE.UnsignedByteType;
  this.offset = new THREE.Vector2(0, 0);
  this.repeat = new THREE.Vector2(1, 1);
  this.generateMipmaps = true;
  this.premultiplyAlpha = false;
  this.flipY = true;
  this.unpackAlignment = 4;
  this.needsUpdate = false;
  this.onUpdate = null
};
THREE.Texture.prototype = {constructor:THREE.Texture, clone:function(texture) {
  if(texture === undefined) {
    texture = new THREE.Texture
  }
  texture.image = this.image;
  texture.mipmaps = this.mipmaps.slice(0);
  texture.mapping = this.mapping;
  texture.wrapS = this.wrapS;
  texture.wrapT = this.wrapT;
  texture.magFilter = this.magFilter;
  texture.minFilter = this.minFilter;
  texture.anisotropy = this.anisotropy;
  texture.format = this.format;
  texture.type = this.type;
  texture.offset.copy(this.offset);
  texture.repeat.copy(this.repeat);
  texture.generateMipmaps = this.generateMipmaps;
  texture.premultiplyAlpha = this.premultiplyAlpha;
  texture.flipY = this.flipY;
  texture.unpackAlignment = this.unpackAlignment;
  return texture
}, dispose:function() {
  this.dispatchEvent({type:"dispose"})
}};
THREE.TextureIdCount = 0;
THREE.CompressedTexture = function(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {
  THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.image = {width:width, height:height};
  this.mipmaps = mipmaps;
  this.generateMipmaps = false
};
THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.clone = function() {
  var texture = new THREE.CompressedTexture;
  THREE.Texture.prototype.clone.call(this, texture);
  return texture
};
THREE.DataTexture = function(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {
  THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.image = {data:data, width:width, height:height}
};
THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.DataTexture.prototype.clone = function() {
  var texture = new THREE.DataTexture;
  THREE.Texture.prototype.clone.call(this, texture);
  return texture
};
THREE.Particle = function(material) {
  THREE.Object3D.call(this);
  this.material = material
};
THREE.Particle.prototype = Object.create(THREE.Object3D.prototype);
THREE.Particle.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.Particle(this.material)
  }
  THREE.Object3D.prototype.clone.call(this, object);
  return object
};
THREE.ParticleSystem = function(geometry, material) {
  THREE.Object3D.call(this);
  this.geometry = geometry;
  this.material = material !== undefined ? material : new THREE.ParticleBasicMaterial({color:Math.random() * 16777215});
  this.sortParticles = false;
  if(this.geometry) {
    if(this.geometry.boundingSphere === null) {
      this.geometry.computeBoundingSphere()
    }
  }
  this.frustumCulled = false
};
THREE.ParticleSystem.prototype = Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.ParticleSystem(this.geometry, this.material)
  }
  object.sortParticles = this.sortParticles;
  THREE.Object3D.prototype.clone.call(this, object);
  return object
};
THREE.Line = function(geometry, material, type) {
  THREE.Object3D.call(this);
  this.geometry = geometry;
  this.material = material !== undefined ? material : new THREE.LineBasicMaterial({color:Math.random() * 16777215});
  this.type = type !== undefined ? type : THREE.LineStrip;
  if(this.geometry) {
    if(!this.geometry.boundingSphere) {
      this.geometry.computeBoundingSphere()
    }
  }
};
THREE.LineStrip = 0;
THREE.LinePieces = 1;
THREE.Line.prototype = Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.Line(this.geometry, this.material, this.type)
  }
  THREE.Object3D.prototype.clone.call(this, object);
  return object
};
THREE.Mesh = function(geometry, material) {
  THREE.Object3D.call(this);
  this.geometry = geometry;
  this.material = material !== undefined ? material : new THREE.MeshBasicMaterial({color:Math.random() * 16777215, wireframe:true});
  if(this.geometry !== undefined) {
    if(this.geometry.boundingSphere === null) {
      this.geometry.computeBoundingSphere()
    }
    this.updateMorphTargets()
  }
};
THREE.Mesh.prototype = Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets = function() {
  if(this.geometry.morphTargets.length > 0) {
    this.morphTargetBase = -1;
    this.morphTargetForcedOrder = [];
    this.morphTargetInfluences = [];
    this.morphTargetDictionary = {};
    for(var m = 0, ml = this.geometry.morphTargets.length;m < ml;m++) {
      this.morphTargetInfluences.push(0);
      this.morphTargetDictionary[this.geometry.morphTargets[m].name] = m
    }
  }
};
THREE.Mesh.prototype.getMorphTargetIndexByName = function(name) {
  if(this.morphTargetDictionary[name] !== undefined) {
    return this.morphTargetDictionary[name]
  }
  console.log("THREE.Mesh.getMorphTargetIndexByName: morph target " + name + " does not exist. Returning 0.");
  return 0
};
THREE.Mesh.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.Mesh(this.geometry, this.material)
  }
  THREE.Object3D.prototype.clone.call(this, object);
  return object
};
THREE.Bone = function(belongsToSkin) {
  THREE.Object3D.call(this);
  this.skin = belongsToSkin;
  this.skinMatrix = new THREE.Matrix4
};
THREE.Bone.prototype = Object.create(THREE.Object3D.prototype);
THREE.Bone.prototype.update = function(parentSkinMatrix, forceUpdate) {
  if(this.matrixAutoUpdate) {
    forceUpdate |= this.updateMatrix()
  }
  if(forceUpdate || this.matrixWorldNeedsUpdate) {
    if(parentSkinMatrix) {
      this.skinMatrix.multiplyMatrices(parentSkinMatrix, this.matrix)
    }else {
      this.skinMatrix.copy(this.matrix)
    }
    this.matrixWorldNeedsUpdate = false;
    forceUpdate = true
  }
  var child, i, l = this.children.length;
  for(i = 0;i < l;i++) {
    this.children[i].update(this.skinMatrix, forceUpdate)
  }
};
THREE.SkinnedMesh = function(geometry, material, useVertexTexture) {
  THREE.Mesh.call(this, geometry, material);
  this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;
  this.identityMatrix = new THREE.Matrix4;
  this.bones = [];
  this.boneMatrices = [];
  var b, bone, gbone, p, q, s;
  if(this.geometry && this.geometry.bones !== undefined) {
    for(b = 0;b < this.geometry.bones.length;b++) {
      gbone = this.geometry.bones[b];
      p = gbone.pos;
      q = gbone.rotq;
      s = gbone.scl;
      bone = this.addBone();
      bone.name = gbone.name;
      bone.position.set(p[0], p[1], p[2]);
      bone.quaternion.set(q[0], q[1], q[2], q[3]);
      bone.useQuaternion = true;
      if(s !== undefined) {
        bone.scale.set(s[0], s[1], s[2])
      }else {
        bone.scale.set(1, 1, 1)
      }
    }
    for(b = 0;b < this.bones.length;b++) {
      gbone = this.geometry.bones[b];
      bone = this.bones[b];
      if(gbone.parent === -1) {
        this.add(bone)
      }else {
        this.bones[gbone.parent].add(bone)
      }
    }
    var nBones = this.bones.length;
    if(this.useVertexTexture) {
      var size;
      if(nBones > 256) {
        size = 64
      }else {
        if(nBones > 64) {
          size = 32
        }else {
          if(nBones > 16) {
            size = 16
          }else {
            size = 8
          }
        }
      }
      this.boneTextureWidth = size;
      this.boneTextureHeight = size;
      this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4);
      this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType);
      this.boneTexture.minFilter = THREE.NearestFilter;
      this.boneTexture.magFilter = THREE.NearestFilter;
      this.boneTexture.generateMipmaps = false;
      this.boneTexture.flipY = false
    }else {
      this.boneMatrices = new Float32Array(16 * nBones)
    }
    this.pose()
  }
};
THREE.SkinnedMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.SkinnedMesh.prototype.addBone = function(bone) {
  if(bone === undefined) {
    bone = new THREE.Bone(this)
  }
  this.bones.push(bone);
  return bone
};
THREE.SkinnedMesh.prototype.updateMatrixWorld = function(force) {
  this.matrixAutoUpdate && this.updateMatrix();
  if(this.matrixWorldNeedsUpdate || force) {
    if(this.parent) {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)
    }else {
      this.matrixWorld.copy(this.matrix)
    }
    this.matrixWorldNeedsUpdate = false;
    force = true
  }
  for(var i = 0, l = this.children.length;i < l;i++) {
    var child = this.children[i];
    if(child instanceof THREE.Bone) {
      child.update(this.identityMatrix, false)
    }else {
      child.updateMatrixWorld(true)
    }
  }
  if(this.boneInverses == undefined) {
    this.boneInverses = [];
    for(var b = 0, bl = this.bones.length;b < bl;b++) {
      var inverse = new THREE.Matrix4;
      inverse.getInverse(this.bones[b].skinMatrix);
      this.boneInverses.push(inverse)
    }
  }
  for(var b = 0, bl = this.bones.length;b < bl;b++) {
    THREE.SkinnedMesh.offsetMatrix.multiplyMatrices(this.bones[b].skinMatrix, this.boneInverses[b]);
    THREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset(this.boneMatrices, b * 16)
  }
  if(this.useVertexTexture) {
    this.boneTexture.needsUpdate = true
  }
};
THREE.SkinnedMesh.prototype.pose = function() {
  this.updateMatrixWorld(true);
  for(var i = 0;i < this.geometry.skinIndices.length;i++) {
    var sw = this.geometry.skinWeights[i];
    var scale = 1 / sw.lengthManhattan();
    if(scale !== Infinity) {
      sw.multiplyScalar(scale)
    }else {
      sw.set(1)
    }
  }
};
THREE.SkinnedMesh.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.SkinnedMesh(this.geometry, this.material, this.useVertexTexture)
  }
  THREE.Mesh.prototype.clone.call(this, object);
  return object
};
THREE.SkinnedMesh.offsetMatrix = new THREE.Matrix4;
THREE.MorphAnimMesh = function(geometry, material) {
  THREE.Mesh.call(this, geometry, material);
  this.duration = 1E3;
  this.mirroredLoop = false;
  this.time = 0;
  this.lastKeyframe = 0;
  this.currentKeyframe = 0;
  this.direction = 1;
  this.directionBackwards = false;
  this.setFrameRange(0, this.geometry.morphTargets.length - 1)
};
THREE.MorphAnimMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.MorphAnimMesh.prototype.setFrameRange = function(start, end) {
  this.startKeyframe = start;
  this.endKeyframe = end;
  this.length = this.endKeyframe - this.startKeyframe + 1
};
THREE.MorphAnimMesh.prototype.setDirectionForward = function() {
  this.direction = 1;
  this.directionBackwards = false
};
THREE.MorphAnimMesh.prototype.setDirectionBackward = function() {
  this.direction = -1;
  this.directionBackwards = true
};
THREE.MorphAnimMesh.prototype.parseAnimations = function() {
  var geometry = this.geometry;
  if(!geometry.animations) {
    geometry.animations = {}
  }
  var firstAnimation, animations = geometry.animations;
  var pattern = /([a-z]+)(\d+)/;
  for(var i = 0, il = geometry.morphTargets.length;i < il;i++) {
    var morph = geometry.morphTargets[i];
    var parts = morph.name.match(pattern);
    if(parts && parts.length > 1) {
      var label = parts[1];
      var num = parts[2];
      if(!animations[label]) {
        animations[label] = {start:Infinity, end:-Infinity}
      }
      var animation = animations[label];
      if(i < animation.start) {
        animation.start = i
      }
      if(i > animation.end) {
        animation.end = i
      }
      if(!firstAnimation) {
        firstAnimation = label
      }
    }
  }
  geometry.firstAnimation = firstAnimation
};
THREE.MorphAnimMesh.prototype.setAnimationLabel = function(label, start, end) {
  if(!this.geometry.animations) {
    this.geometry.animations = {}
  }
  this.geometry.animations[label] = {start:start, end:end}
};
THREE.MorphAnimMesh.prototype.playAnimation = function(label, fps) {
  var animation = this.geometry.animations[label];
  if(animation) {
    this.setFrameRange(animation.start, animation.end);
    this.duration = 1E3 * ((animation.end - animation.start) / fps);
    this.time = 0
  }else {
    console.warn("animation[" + label + "] undefined")
  }
};
THREE.MorphAnimMesh.prototype.updateAnimation = function(delta) {
  var frameTime = this.duration / this.length;
  this.time += this.direction * delta;
  if(this.mirroredLoop) {
    if(this.time > this.duration || this.time < 0) {
      this.direction *= -1;
      if(this.time > this.duration) {
        this.time = this.duration;
        this.directionBackwards = true
      }
      if(this.time < 0) {
        this.time = 0;
        this.directionBackwards = false
      }
    }
  }else {
    this.time = this.time % this.duration;
    if(this.time < 0) {
      this.time += this.duration
    }
  }
  var keyframe = this.startKeyframe + THREE.Math.clamp(Math.floor(this.time / frameTime), 0, this.length - 1);
  if(keyframe !== this.currentKeyframe) {
    this.morphTargetInfluences[this.lastKeyframe] = 0;
    this.morphTargetInfluences[this.currentKeyframe] = 1;
    this.morphTargetInfluences[keyframe] = 0;
    this.lastKeyframe = this.currentKeyframe;
    this.currentKeyframe = keyframe
  }
  var mix = this.time % frameTime / frameTime;
  if(this.directionBackwards) {
    mix = 1 - mix
  }
  this.morphTargetInfluences[this.currentKeyframe] = mix;
  this.morphTargetInfluences[this.lastKeyframe] = 1 - mix
};
THREE.MorphAnimMesh.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.MorphAnimMesh(this.geometry, this.material)
  }
  object.duration = this.duration;
  object.mirroredLoop = this.mirroredLoop;
  object.time = this.time;
  object.lastKeyframe = this.lastKeyframe;
  object.currentKeyframe = this.currentKeyframe;
  object.direction = this.direction;
  object.directionBackwards = this.directionBackwards;
  THREE.Mesh.prototype.clone.call(this, object);
  return object
};
THREE.Ribbon = function(geometry, material) {
  THREE.Object3D.call(this);
  this.geometry = geometry;
  this.material = material
};
THREE.Ribbon.prototype = Object.create(THREE.Object3D.prototype);
THREE.Ribbon.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.Ribbon(this.geometry, this.material)
  }
  THREE.Object3D.prototype.clone.call(this, object);
  return object
};
THREE.LOD = function() {
  THREE.Object3D.call(this);
  this.LODs = []
};
THREE.LOD.prototype = Object.create(THREE.Object3D.prototype);
THREE.LOD.prototype.addLevel = function(object3D, visibleAtDistance) {
  if(visibleAtDistance === undefined) {
    visibleAtDistance = 0
  }
  visibleAtDistance = Math.abs(visibleAtDistance);
  for(var l = 0;l < this.LODs.length;l++) {
    if(visibleAtDistance < this.LODs[l].visibleAtDistance) {
      break
    }
  }
  this.LODs.splice(l, 0, {visibleAtDistance:visibleAtDistance, object3D:object3D});
  this.add(object3D)
};
THREE.LOD.prototype.update = function(camera) {
  if(this.LODs.length > 1) {
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
    var inverse = camera.matrixWorldInverse;
    var distance = -(inverse.elements[2] * this.matrixWorld.elements[12] + inverse.elements[6] * this.matrixWorld.elements[13] + inverse.elements[10] * this.matrixWorld.elements[14] + inverse.elements[14]);
    this.LODs[0].object3D.visible = true;
    for(var l = 1;l < this.LODs.length;l++) {
      if(distance >= this.LODs[l].visibleAtDistance) {
        this.LODs[l - 1].object3D.visible = false;
        this.LODs[l].object3D.visible = true
      }else {
        break
      }
    }
    for(;l < this.LODs.length;l++) {
      this.LODs[l].object3D.visible = false
    }
  }
};
THREE.LOD.prototype.clone = function() {
};
THREE.Sprite = function(material) {
  THREE.Object3D.call(this);
  this.material = material !== undefined ? material : new THREE.SpriteMaterial;
  this.rotation3d = this.rotation;
  this.rotation = 0
};
THREE.Sprite.prototype = Object.create(THREE.Object3D.prototype);
THREE.Sprite.prototype.updateMatrix = function() {
  this.matrix.setPosition(this.position);
  this.rotation3d.set(0, 0, this.rotation);
  this.matrix.setRotationFromEuler(this.rotation3d);
  if(this.scale.x !== 1 || this.scale.y !== 1) {
    this.matrix.scale(this.scale)
  }
  this.matrixWorldNeedsUpdate = true
};
THREE.Sprite.prototype.clone = function(object) {
  if(object === undefined) {
    object = new THREE.Sprite(this.material)
  }
  THREE.Object3D.prototype.clone.call(this, object);
  return object
};
THREE.Scene = function() {
  THREE.Object3D.call(this);
  this.fog = null;
  this.overrideMaterial = null;
  this.matrixAutoUpdate = false;
  this.__objects = [];
  this.__lights = [];
  this.__objectsAdded = [];
  this.__objectsRemoved = []
};
THREE.Scene.prototype = Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject = function(object) {
  if(object instanceof THREE.Light) {
    if(this.__lights.indexOf(object) === -1) {
      this.__lights.push(object)
    }
    if(object.target && object.target.parent === undefined) {
      this.add(object.target)
    }
  }else {
    if(!(object instanceof THREE.Camera || object instanceof THREE.Bone)) {
      if(this.__objects.indexOf(object) === -1) {
        this.__objects.push(object);
        this.__objectsAdded.push(object);
        var i = this.__objectsRemoved.indexOf(object);
        if(i !== -1) {
          this.__objectsRemoved.splice(i, 1)
        }
      }
    }
  }
  for(var c = 0;c < object.children.length;c++) {
    this.__addObject(object.children[c])
  }
};
THREE.Scene.prototype.__removeObject = function(object) {
  if(object instanceof THREE.Light) {
    var i = this.__lights.indexOf(object);
    if(i !== -1) {
      this.__lights.splice(i, 1)
    }
  }else {
    if(!(object instanceof THREE.Camera)) {
      var i = this.__objects.indexOf(object);
      if(i !== -1) {
        this.__objects.splice(i, 1);
        this.__objectsRemoved.push(object);
        var ai = this.__objectsAdded.indexOf(object);
        if(ai !== -1) {
          this.__objectsAdded.splice(ai, 1)
        }
      }
    }
  }
  for(var c = 0;c < object.children.length;c++) {
    this.__removeObject(object.children[c])
  }
};
THREE.Fog = function(hex, near, far) {
  this.name = "";
  this.color = new THREE.Color(hex);
  this.near = near !== undefined ? near : 1;
  this.far = far !== undefined ? far : 1E3
};
THREE.Fog.prototype.clone = function() {
  return new THREE.Fog(this.color.getHex(), this.near, this.far)
};
THREE.FogExp2 = function(hex, density) {
  this.name = "";
  this.color = new THREE.Color(hex);
  this.density = density !== undefined ? density : 2.5E-4
};
THREE.FogExp2.prototype.clone = function() {
  return new THREE.FogExp2(this.color.getHex(), this.density)
};
THREE.CanvasRenderer = function(parameters) {
  console.log("THREE.CanvasRenderer", THREE.REVISION);
  parameters = parameters || {};
  var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector, _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement("canvas"), _canvasWidth, _canvasHeight, _canvasWidthHalf, _canvasHeightHalf, _context = _canvas.getContext("2d"), _clearColor = new THREE.Color(0), _clearOpacity = 0, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = 
  null, _contextLineJoin = null, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex, _v6 = new THREE.RenderableVertex, _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color, _color1 = new THREE.Color, _color2 = new THREE.Color, _color3 = new THREE.Color, _color4 = new THREE.Color, _diffuseColor = new THREE.Color, _emissiveColor = new THREE.Color, _lightColor = new THREE.Color, _patterns = {}, _imagedatas = {}, _near, _far, _image, _uvs, _uv1x, _uv1y, _uv2x, 
  _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2, _clearBox = new THREE.Box2, _elemBox = new THREE.Box2, _enableLighting = false, _ambientLight = new THREE.Color, _directionalLights = new THREE.Color, _pointLights = new THREE.Color, _pi2 = Math.PI * 2, _vector3 = new THREE.Vector3, _pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData, _gradientMap, _gradientMapContext, _gradientMapQuality = 16;
  _pixelMap = document.createElement("canvas");
  _pixelMap.width = _pixelMap.height = 2;
  _pixelMapContext = _pixelMap.getContext("2d");
  _pixelMapContext.fillStyle = "rgba(0,0,0,1)";
  _pixelMapContext.fillRect(0, 0, 2, 2);
  _pixelMapImage = _pixelMapContext.getImageData(0, 0, 2, 2);
  _pixelMapData = _pixelMapImage.data;
  _gradientMap = document.createElement("canvas");
  _gradientMap.width = _gradientMap.height = _gradientMapQuality;
  _gradientMapContext = _gradientMap.getContext("2d");
  _gradientMapContext.translate(-_gradientMapQuality / 2, -_gradientMapQuality / 2);
  _gradientMapContext.scale(_gradientMapQuality, _gradientMapQuality);
  _gradientMapQuality--;
  this.domElement = _canvas;
  this.devicePixelRatio = parameters.devicePixelRatio !== undefined ? parameters.devicePixelRatio : window.devicePixelRatio !== undefined ? window.devicePixelRatio : 1;
  this.autoClear = true;
  this.sortObjects = true;
  this.sortElements = true;
  this.info = {render:{vertices:0, faces:0}};
  this.supportsVertexTextures = function() {
  };
  this.setFaceCulling = function() {
  };
  this.setSize = function(width, height) {
    _canvasWidth = width * this.devicePixelRatio;
    _canvasHeight = height * this.devicePixelRatio;
    _canvasWidthHalf = Math.floor(_canvasWidth / 2);
    _canvasHeightHalf = Math.floor(_canvasHeight / 2);
    _canvas.width = _canvasWidth;
    _canvas.height = _canvasHeight;
    _canvas.style.width = width + "px";
    _canvas.style.height = height + "px";
    _clipBox.set(new THREE.Vector2(-_canvasWidthHalf, -_canvasHeightHalf), new THREE.Vector2(_canvasWidthHalf, _canvasHeightHalf));
    _clearBox.set(new THREE.Vector2(-_canvasWidthHalf, -_canvasHeightHalf), new THREE.Vector2(_canvasWidthHalf, _canvasHeightHalf));
    _contextGlobalAlpha = 1;
    _contextGlobalCompositeOperation = 0;
    _contextStrokeStyle = null;
    _contextFillStyle = null;
    _contextLineWidth = null;
    _contextLineCap = null;
    _contextLineJoin = null
  };
  this.setClearColor = function(color, opacity) {
    _clearColor.copy(color);
    _clearOpacity = opacity !== undefined ? opacity : 1;
    _clearBox.set(new THREE.Vector2(-_canvasWidthHalf, -_canvasHeightHalf), new THREE.Vector2(_canvasWidthHalf, _canvasHeightHalf))
  };
  this.setClearColorHex = function(hex, opacity) {
    _clearColor.setHex(hex);
    _clearOpacity = opacity !== undefined ? opacity : 1;
    _clearBox.set(new THREE.Vector2(-_canvasWidthHalf, -_canvasHeightHalf), new THREE.Vector2(_canvasWidthHalf, _canvasHeightHalf))
  };
  this.getMaxAnisotropy = function() {
    return 0
  };
  this.clear = function() {
    _context.setTransform(1, 0, 0, -1, _canvasWidthHalf, _canvasHeightHalf);
    if(_clearBox.empty() === false) {
      _clearBox.intersect(_clipBox);
      _clearBox.expandByScalar(2);
      if(_clearOpacity < 1) {
        _context.clearRect(_clearBox.min.x | 0, _clearBox.min.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.max.y - _clearBox.min.y | 0)
      }
      if(_clearOpacity > 0) {
        setBlending(THREE.NormalBlending);
        setOpacity(1);
        setFillStyle("rgba(" + Math.floor(_clearColor.r * 255) + "," + Math.floor(_clearColor.g * 255) + "," + Math.floor(_clearColor.b * 255) + "," + _clearOpacity + ")");
        _context.fillRect(_clearBox.min.x | 0, _clearBox.min.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.max.y - _clearBox.min.y | 0)
      }
      _clearBox.makeEmpty()
    }
  };
  this.render = function(scene, camera) {
    if(camera instanceof THREE.Camera === false) {
      console.error("THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.");
      return
    }
    if(this.autoClear === true) {
      this.clear()
    }
    _context.setTransform(1, 0, 0, -1, _canvasWidthHalf, _canvasHeightHalf);
    _this.info.render.vertices = 0;
    _this.info.render.faces = 0;
    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);
    _elements = _renderData.elements;
    _lights = _renderData.lights;
    _enableLighting = _lights.length > 0;
    if(_enableLighting === true) {
      calculateLights()
    }
    for(var e = 0, el = _elements.length;e < el;e++) {
      var element = _elements[e];
      var material = element.material;
      if(material === undefined || material.visible === false) {
        continue
      }
      _elemBox.makeEmpty();
      if(element instanceof THREE.RenderableParticle) {
        _v1 = element;
        _v1.x *= _canvasWidthHalf;
        _v1.y *= _canvasHeightHalf;
        renderParticle(_v1, element, material, scene)
      }else {
        if(element instanceof THREE.RenderableLine) {
          _v1 = element.v1;
          _v2 = element.v2;
          _v1.positionScreen.x *= _canvasWidthHalf;
          _v1.positionScreen.y *= _canvasHeightHalf;
          _v2.positionScreen.x *= _canvasWidthHalf;
          _v2.positionScreen.y *= _canvasHeightHalf;
          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);
          if(_clipBox.isIntersectionBox(_elemBox) === true) {
            renderLine(_v1, _v2, element, material, scene)
          }
        }else {
          if(element instanceof THREE.RenderableFace3) {
            _v1 = element.v1;
            _v2 = element.v2;
            _v3 = element.v3;
            if(_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) {
              continue
            }
            if(_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) {
              continue
            }
            if(_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) {
              continue
            }
            _v1.positionScreen.x *= _canvasWidthHalf;
            _v1.positionScreen.y *= _canvasHeightHalf;
            _v2.positionScreen.x *= _canvasWidthHalf;
            _v2.positionScreen.y *= _canvasHeightHalf;
            _v3.positionScreen.x *= _canvasWidthHalf;
            _v3.positionScreen.y *= _canvasHeightHalf;
            if(material.overdraw === true) {
              expand(_v1.positionScreen, _v2.positionScreen);
              expand(_v2.positionScreen, _v3.positionScreen);
              expand(_v3.positionScreen, _v1.positionScreen)
            }
            _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);
            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material, scene)
          }else {
            if(element instanceof THREE.RenderableFace4) {
              _v1 = element.v1;
              _v2 = element.v2;
              _v3 = element.v3;
              _v4 = element.v4;
              if(_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) {
                continue
              }
              if(_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) {
                continue
              }
              if(_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) {
                continue
              }
              if(_v4.positionScreen.z < -1 || _v4.positionScreen.z > 1) {
                continue
              }
              _v1.positionScreen.x *= _canvasWidthHalf;
              _v1.positionScreen.y *= _canvasHeightHalf;
              _v2.positionScreen.x *= _canvasWidthHalf;
              _v2.positionScreen.y *= _canvasHeightHalf;
              _v3.positionScreen.x *= _canvasWidthHalf;
              _v3.positionScreen.y *= _canvasHeightHalf;
              _v4.positionScreen.x *= _canvasWidthHalf;
              _v4.positionScreen.y *= _canvasHeightHalf;
              _v5.positionScreen.copy(_v2.positionScreen);
              _v6.positionScreen.copy(_v4.positionScreen);
              if(material.overdraw === true) {
                expand(_v1.positionScreen, _v2.positionScreen);
                expand(_v2.positionScreen, _v4.positionScreen);
                expand(_v4.positionScreen, _v1.positionScreen);
                expand(_v3.positionScreen, _v5.positionScreen);
                expand(_v3.positionScreen, _v6.positionScreen)
              }
              _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen, _v4.positionScreen]);
              renderFace4(_v1, _v2, _v3, _v4, _v5, _v6, element, material, scene)
            }
          }
        }
      }
      _clearBox.union(_elemBox)
    }
    _context.setTransform(1, 0, 0, 1, 0, 0);
    function calculateLights() {
      _ambientLight.setRGB(0, 0, 0);
      _directionalLights.setRGB(0, 0, 0);
      _pointLights.setRGB(0, 0, 0);
      for(var l = 0, ll = _lights.length;l < ll;l++) {
        var light = _lights[l];
        var lightColor = light.color;
        if(light instanceof THREE.AmbientLight) {
          _ambientLight.add(lightColor)
        }else {
          if(light instanceof THREE.DirectionalLight) {
            _directionalLights.add(lightColor)
          }else {
            if(light instanceof THREE.PointLight) {
              _pointLights.add(lightColor)
            }
          }
        }
      }
    }
    function calculateLight(position, normal, color) {
      for(var l = 0, ll = _lights.length;l < ll;l++) {
        var light = _lights[l];
        _lightColor.copy(light.color);
        if(light instanceof THREE.DirectionalLight) {
          var lightPosition = light.matrixWorld.getPosition().normalize();
          var amount = normal.dot(lightPosition);
          if(amount <= 0) {
            continue
          }
          amount *= light.intensity;
          color.add(_lightColor.multiplyScalar(amount))
        }else {
          if(light instanceof THREE.PointLight) {
            var lightPosition = light.matrixWorld.getPosition();
            var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());
            if(amount <= 0) {
              continue
            }
            amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);
            if(amount == 0) {
              continue
            }
            amount *= light.intensity;
            color.add(_lightColor.multiplyScalar(amount))
          }
        }
      }
    }
    function renderParticle(v1, element, material, scene) {
      setOpacity(material.opacity);
      setBlending(material.blending);
      var width, height, scaleX, scaleY, bitmap, bitmapWidth, bitmapHeight;
      if(material instanceof THREE.ParticleBasicMaterial) {
        if(material.map === null) {
          scaleX = element.object.scale.x;
          scaleY = element.object.scale.y;
          scaleX *= element.scale.x * _canvasWidthHalf;
          scaleY *= element.scale.y * _canvasHeightHalf;
          _elemBox.min.set(v1.x - scaleX, v1.y - scaleY);
          _elemBox.max.set(v1.x + scaleX, v1.y + scaleY);
          if(_clipBox.isIntersectionBox(_elemBox) === false) {
            return
          }
          setFillStyle(material.color.getStyle());
          _context.save();
          _context.translate(v1.x, v1.y);
          _context.rotate(-element.rotation);
          _context.scale(scaleX, scaleY);
          _context.fillRect(-1, -1, 2, 2);
          _context.restore()
        }else {
          bitmap = material.map.image;
          bitmapWidth = bitmap.width >> 1;
          bitmapHeight = bitmap.height >> 1;
          scaleX = element.scale.x * _canvasWidthHalf;
          scaleY = element.scale.y * _canvasHeightHalf;
          width = scaleX * bitmapWidth;
          height = scaleY * bitmapHeight;
          _elemBox.min.set(v1.x - width, v1.y - height);
          _elemBox.max.set(v1.x + width, v1.y + height);
          if(_clipBox.isIntersectionBox(_elemBox) === false) {
            return
          }
          _context.save();
          _context.translate(v1.x, v1.y);
          _context.rotate(-element.rotation);
          _context.scale(scaleX, -scaleY);
          _context.translate(-bitmapWidth, -bitmapHeight);
          _context.drawImage(bitmap, 0, 0);
          _context.restore()
        }
      }else {
        if(material instanceof THREE.ParticleCanvasMaterial) {
          width = element.scale.x * _canvasWidthHalf;
          height = element.scale.y * _canvasHeightHalf;
          _elemBox.min.set(v1.x - width, v1.y - height);
          _elemBox.max.set(v1.x + width, v1.y + height);
          if(_clipBox.isIntersectionBox(_elemBox) === false) {
            return
          }
          setStrokeStyle(material.color.getStyle());
          setFillStyle(material.color.getStyle());
          _context.save();
          _context.translate(v1.x, v1.y);
          _context.rotate(-element.rotation);
          _context.scale(width, height);
          material.program(_context);
          _context.restore()
        }
      }
    }
    function renderLine(v1, v2, element, material, scene) {
      setOpacity(material.opacity);
      setBlending(material.blending);
      _context.beginPath();
      _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);
      _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);
      if(material instanceof THREE.LineBasicMaterial) {
        setLineWidth(material.linewidth);
        setLineCap(material.linecap);
        setLineJoin(material.linejoin);
        setStrokeStyle(material.color.getStyle());
        _context.stroke();
        _elemBox.expandByScalar(material.linewidth * 2)
      }
    }
    function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material, scene) {
      _this.info.render.vertices += 3;
      _this.info.render.faces++;
      setOpacity(material.opacity);
      setBlending(material.blending);
      _v1x = v1.positionScreen.x;
      _v1y = v1.positionScreen.y;
      _v2x = v2.positionScreen.x;
      _v2y = v2.positionScreen.y;
      _v3x = v3.positionScreen.x;
      _v3y = v3.positionScreen.y;
      drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);
      if((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null && material.map === null) {
        _diffuseColor.copy(material.color);
        _emissiveColor.copy(material.emissive);
        if(material.vertexColors === THREE.FaceColors) {
          _diffuseColor.multiply(element.color)
        }
        if(_enableLighting === true) {
          if(material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 3) {
            _color1.copy(_ambientLight);
            _color2.copy(_ambientLight);
            _color3.copy(_ambientLight);
            calculateLight(element.v1.positionWorld, element.vertexNormalsModel[0], _color1);
            calculateLight(element.v2.positionWorld, element.vertexNormalsModel[1], _color2);
            calculateLight(element.v3.positionWorld, element.vertexNormalsModel[2], _color3);
            _color1.multiply(_diffuseColor).add(_emissiveColor);
            _color2.multiply(_diffuseColor).add(_emissiveColor);
            _color3.multiply(_diffuseColor).add(_emissiveColor);
            _color4.addColors(_color2, _color3).multiplyScalar(0.5);
            _image = getGradientTexture(_color1, _color2, _color3, _color4);
            clipImage(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image)
          }else {
            _color.copy(_ambientLight);
            calculateLight(element.centroidModel, element.normalModel, _color);
            _color.multiply(_diffuseColor).add(_emissiveColor);
            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
          }
        }else {
          material.wireframe === true ? strokePath(material.color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(material.color)
        }
      }else {
        if(material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {
          if(material.map !== null) {
            if(material.map.mapping instanceof THREE.UVMapping) {
              _uvs = element.uvs[0];
              patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map)
            }
          }else {
            if(material.envMap !== null) {
              if(material.envMap.mapping instanceof THREE.SphericalReflectionMapping) {
                _vector3.copy(element.vertexNormalsModelView[uv1]);
                _uv1x = 0.5 * _vector3.x + 0.5;
                _uv1y = 0.5 * _vector3.y + 0.5;
                _vector3.copy(element.vertexNormalsModelView[uv2]);
                _uv2x = 0.5 * _vector3.x + 0.5;
                _uv2y = 0.5 * _vector3.y + 0.5;
                _vector3.copy(element.vertexNormalsModelView[uv3]);
                _uv3x = 0.5 * _vector3.x + 0.5;
                _uv3y = 0.5 * _vector3.y + 0.5;
                patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap)
              }
            }else {
              _color.copy(material.color);
              if(material.vertexColors === THREE.FaceColors) {
                _color.multiply(element.color)
              }
              material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
            }
          }
        }else {
          if(material instanceof THREE.MeshDepthMaterial) {
            _near = camera.near;
            _far = camera.far;
            var depth;
            depth = 1 - smoothstep(v1.positionScreen.z * v1.positionScreen.w, _near, _far);
            _color1.setRGB(depth, depth, depth);
            depth = 1 - smoothstep(v2.positionScreen.z * v2.positionScreen.w, _near, _far);
            _color2.setRGB(depth, depth, depth);
            depth = 1 - smoothstep(v3.positionScreen.z * v3.positionScreen.w, _near, _far);
            _color3.setRGB(depth, depth, depth);
            _color4.addColors(_color2, _color3).multiplyScalar(0.5);
            _image = getGradientTexture(_color1, _color2, _color3, _color4);
            clipImage(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image)
          }else {
            if(material instanceof THREE.MeshNormalMaterial) {
              var normal;
              if(material.shading == THREE.FlatShading) {
                normal = element.normalModelView;
                _color.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
              }else {
                if(material.shading == THREE.SmoothShading) {
                  normal = element.vertexNormalsModelView[uv1];
                  _color1.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                  normal = element.vertexNormalsModelView[uv2];
                  _color2.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                  normal = element.vertexNormalsModelView[uv3];
                  _color3.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                  _color4.addColors(_color2, _color3).multiplyScalar(0.5);
                  _image = getGradientTexture(_color1, _color2, _color3, _color4);
                  clipImage(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image)
                }
              }
            }
          }
        }
      }
    }
    function renderFace4(v1, v2, v3, v4, v5, v6, element, material, scene) {
      _this.info.render.vertices += 4;
      _this.info.render.faces++;
      setOpacity(material.opacity);
      setBlending(material.blending);
      if(material.map !== undefined && material.map !== null || material.envMap !== undefined && material.envMap !== null) {
        renderFace3(v1, v2, v4, 0, 1, 3, element, material, scene);
        renderFace3(v5, v3, v6, 1, 2, 3, element, material, scene);
        return
      }
      _v1x = v1.positionScreen.x;
      _v1y = v1.positionScreen.y;
      _v2x = v2.positionScreen.x;
      _v2y = v2.positionScreen.y;
      _v3x = v3.positionScreen.x;
      _v3y = v3.positionScreen.y;
      _v4x = v4.positionScreen.x;
      _v4y = v4.positionScreen.y;
      _v5x = v5.positionScreen.x;
      _v5y = v5.positionScreen.y;
      _v6x = v6.positionScreen.x;
      _v6y = v6.positionScreen.y;
      if(material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {
        _diffuseColor.copy(material.color);
        _emissiveColor.copy(material.emissive);
        if(material.vertexColors === THREE.FaceColors) {
          _diffuseColor.multiply(element.color)
        }
        if(_enableLighting === true) {
          if(material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 4) {
            _color1.copy(_ambientLight);
            _color2.copy(_ambientLight);
            _color3.copy(_ambientLight);
            _color4.copy(_ambientLight);
            calculateLight(element.v1.positionWorld, element.vertexNormalsModel[0], _color1);
            calculateLight(element.v2.positionWorld, element.vertexNormalsModel[1], _color2);
            calculateLight(element.v4.positionWorld, element.vertexNormalsModel[3], _color3);
            calculateLight(element.v3.positionWorld, element.vertexNormalsModel[2], _color4);
            _color1.multiply(_diffuseColor).add(_emissiveColor);
            _color2.multiply(_diffuseColor).add(_emissiveColor);
            _color3.multiply(_diffuseColor).add(_emissiveColor);
            _color4.multiply(_diffuseColor).add(_emissiveColor);
            _image = getGradientTexture(_color1, _color2, _color3, _color4);
            drawTriangle(_v1x, _v1y, _v2x, _v2y, _v4x, _v4y);
            clipImage(_v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image);
            drawTriangle(_v5x, _v5y, _v3x, _v3y, _v6x, _v6y);
            clipImage(_v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image)
          }else {
            _color.copy(_ambientLight);
            calculateLight(element.centroidModel, element.normalModel, _color);
            _color.multiply(_diffuseColor).add(_emissiveColor);
            drawQuad(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y);
            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
          }
        }else {
          _color.addColors(_diffuseColor, _emissiveColor);
          drawQuad(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y);
          material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
        }
      }else {
        if(material instanceof THREE.MeshBasicMaterial) {
          _color.copy(material.color);
          if(material.vertexColors === THREE.FaceColors) {
            _color.multiply(element.color)
          }
          drawQuad(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y);
          material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
        }else {
          if(material instanceof THREE.MeshNormalMaterial) {
            var normal;
            if(material.shading == THREE.FlatShading) {
              normal = element.normalModelView;
              _color.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
              drawQuad(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y);
              material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color)
            }else {
              if(material.shading == THREE.SmoothShading) {
                normal = element.vertexNormalsModelView[0];
                _color1.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                normal = element.vertexNormalsModelView[1];
                _color2.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                normal = element.vertexNormalsModelView[3];
                _color3.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                normal = element.vertexNormalsModelView[2];
                _color4.setRGB(normal.x, normal.y, normal.z).multiplyScalar(0.5).addScalar(0.5);
                _image = getGradientTexture(_color1, _color2, _color3, _color4);
                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v4x, _v4y);
                clipImage(_v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image);
                drawTriangle(_v5x, _v5y, _v3x, _v3y, _v6x, _v6y);
                clipImage(_v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image)
              }
            }
          }else {
            if(material instanceof THREE.MeshDepthMaterial) {
              _near = camera.near;
              _far = camera.far;
              _color1.r = _color1.g = _color1.b = 1 - smoothstep(v1.positionScreen.z * v1.positionScreen.w, _near, _far);
              _color2.r = _color2.g = _color2.b = 1 - smoothstep(v2.positionScreen.z * v2.positionScreen.w, _near, _far);
              _color3.r = _color3.g = _color3.b = 1 - smoothstep(v4.positionScreen.z * v4.positionScreen.w, _near, _far);
              _color4.r = _color4.g = _color4.b = 1 - smoothstep(v3.positionScreen.z * v3.positionScreen.w, _near, _far);
              _image = getGradientTexture(_color1, _color2, _color3, _color4);
              drawTriangle(_v1x, _v1y, _v2x, _v2y, _v4x, _v4y);
              clipImage(_v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image);
              drawTriangle(_v5x, _v5y, _v3x, _v3y, _v6x, _v6y);
              clipImage(_v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image)
            }
          }
        }
      }
    }
    function drawTriangle(x0, y0, x1, y1, x2, y2) {
      _context.beginPath();
      _context.moveTo(x0, y0);
      _context.lineTo(x1, y1);
      _context.lineTo(x2, y2);
      _context.closePath()
    }
    function drawQuad(x0, y0, x1, y1, x2, y2, x3, y3) {
      _context.beginPath();
      _context.moveTo(x0, y0);
      _context.lineTo(x1, y1);
      _context.lineTo(x2, y2);
      _context.lineTo(x3, y3);
      _context.closePath()
    }
    function strokePath(color, linewidth, linecap, linejoin) {
      setLineWidth(linewidth);
      setLineCap(linecap);
      setLineJoin(linejoin);
      setStrokeStyle(color.getStyle());
      _context.stroke();
      _elemBox.expandByScalar(linewidth * 2)
    }
    function fillPath(color) {
      setFillStyle(color.getStyle());
      _context.fill()
    }
    function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {
      if(texture instanceof THREE.DataTexture || texture.image === undefined || texture.image.width == 0) {
        return
      }
      if(texture.needsUpdate === true) {
        var repeatX = texture.wrapS == THREE.RepeatWrapping;
        var repeatY = texture.wrapT == THREE.RepeatWrapping;
        _patterns[texture.id] = _context.createPattern(texture.image, repeatX === true && repeatY === true ? "repeat" : repeatX === true && repeatY === false ? "repeat-x" : repeatX === false && repeatY === true ? "repeat-y" : "no-repeat");
        texture.needsUpdate = false
      }
      _patterns[texture.id] === undefined ? setFillStyle("rgba(0,0,0,1)") : setFillStyle(_patterns[texture.id]);
      var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;
      u0 = (u0 + offsetX) * width;
      v0 = (1 - v0 + offsetY) * height;
      u1 = (u1 + offsetX) * width;
      v1 = (1 - v1 + offsetY) * height;
      u2 = (u2 + offsetX) * width;
      v2 = (1 - v2 + offsetY) * height;
      x1 -= x0;
      y1 -= y0;
      x2 -= x0;
      y2 -= y0;
      u1 -= u0;
      v1 -= v0;
      u2 -= u0;
      v2 -= v0;
      det = u1 * v2 - u2 * v1;
      if(det === 0) {
        if(_imagedatas[texture.id] === undefined) {
          var canvas = document.createElement("canvas");
          canvas.width = texture.image.width;
          canvas.height = texture.image.height;
          var context = canvas.getContext("2d");
          context.drawImage(texture.image, 0, 0);
          _imagedatas[texture.id] = context.getImageData(0, 0, texture.image.width, texture.image.height).data
        }
        var data = _imagedatas[texture.id];
        var index = (Math.floor(u0) + Math.floor(v0) * texture.image.width) * 4;
        _color.setRGB(data[index] / 255, data[index + 1] / 255, data[index + 2] / 255);
        fillPath(_color);
        return
      }
      idet = 1 / det;
      a = (v2 * x1 - v1 * x2) * idet;
      b = (v2 * y1 - v1 * y2) * idet;
      c = (u1 * x2 - u2 * x1) * idet;
      d = (u1 * y2 - u2 * y1) * idet;
      e = x0 - a * u0 - c * v0;
      f = y0 - b * u0 - d * v0;
      _context.save();
      _context.transform(a, b, c, d, e, f);
      _context.fill();
      _context.restore()
    }
    function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {
      var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;
      u0 *= width;
      v0 *= height;
      u1 *= width;
      v1 *= height;
      u2 *= width;
      v2 *= height;
      x1 -= x0;
      y1 -= y0;
      x2 -= x0;
      y2 -= y0;
      u1 -= u0;
      v1 -= v0;
      u2 -= u0;
      v2 -= v0;
      det = u1 * v2 - u2 * v1;
      idet = 1 / det;
      a = (v2 * x1 - v1 * x2) * idet;
      b = (v2 * y1 - v1 * y2) * idet;
      c = (u1 * x2 - u2 * x1) * idet;
      d = (u1 * y2 - u2 * y1) * idet;
      e = x0 - a * u0 - c * v0;
      f = y0 - b * u0 - d * v0;
      _context.save();
      _context.transform(a, b, c, d, e, f);
      _context.clip();
      _context.drawImage(image, 0, 0);
      _context.restore()
    }
    function getGradientTexture(color1, color2, color3, color4) {
      _pixelMapData[0] = color1.r * 255 | 0;
      _pixelMapData[1] = color1.g * 255 | 0;
      _pixelMapData[2] = color1.b * 255 | 0;
      _pixelMapData[4] = color2.r * 255 | 0;
      _pixelMapData[5] = color2.g * 255 | 0;
      _pixelMapData[6] = color2.b * 255 | 0;
      _pixelMapData[8] = color3.r * 255 | 0;
      _pixelMapData[9] = color3.g * 255 | 0;
      _pixelMapData[10] = color3.b * 255 | 0;
      _pixelMapData[12] = color4.r * 255 | 0;
      _pixelMapData[13] = color4.g * 255 | 0;
      _pixelMapData[14] = color4.b * 255 | 0;
      _pixelMapContext.putImageData(_pixelMapImage, 0, 0);
      _gradientMapContext.drawImage(_pixelMap, 0, 0);
      return _gradientMap
    }
    function smoothstep(value, min, max) {
      var x = (value - min) / (max - min);
      return x * x * (3 - 2 * x)
    }
    function expand(v1, v2) {
      var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;
      if(det === 0) {
        return
      }
      idet = 1 / Math.sqrt(det);
      x *= idet;
      y *= idet;
      v2.x += x;
      v2.y += y;
      v1.x -= x;
      v1.y -= y
    }
  };
  function setOpacity(value) {
    if(_contextGlobalAlpha !== value) {
      _context.globalAlpha = value;
      _contextGlobalAlpha = value
    }
  }
  function setBlending(value) {
    if(_contextGlobalCompositeOperation !== value) {
      if(value === THREE.NormalBlending) {
        _context.globalCompositeOperation = "source-over"
      }else {
        if(value === THREE.AdditiveBlending) {
          _context.globalCompositeOperation = "lighter"
        }else {
          if(value === THREE.SubtractiveBlending) {
            _context.globalCompositeOperation = "darker"
          }
        }
      }
      _contextGlobalCompositeOperation = value
    }
  }
  function setLineWidth(value) {
    if(_contextLineWidth !== value) {
      _context.lineWidth = value;
      _contextLineWidth = value
    }
  }
  function setLineCap(value) {
    if(_contextLineCap !== value) {
      _context.lineCap = value;
      _contextLineCap = value
    }
  }
  function setLineJoin(value) {
    if(_contextLineJoin !== value) {
      _context.lineJoin = value;
      _contextLineJoin = value
    }
  }
  function setStrokeStyle(value) {
    if(_contextStrokeStyle !== value) {
      _context.strokeStyle = value;
      _contextStrokeStyle = value
    }
  }
  function setFillStyle(value) {
    if(_contextFillStyle !== value) {
      _context.fillStyle = value;
      _contextFillStyle = value
    }
  }
};
THREE.ShaderChunk = {fog_pars_fragment:["#ifdef USE_FOG", "uniform vec3 fogColor;", "#ifdef FOG_EXP2", "uniform float fogDensity;", "#else", "uniform float fogNear;", "uniform float fogFar;", "#endif", "#endif"].join("\n"), fog_fragment:["#ifdef USE_FOG", "float depth \x3d gl_FragCoord.z / gl_FragCoord.w;", "#ifdef FOG_EXP2", "const float LOG2 \x3d 1.442695;", "float fogFactor \x3d exp2( - fogDensity * fogDensity * depth * depth * LOG2 );", "fogFactor \x3d 1.0 - clamp( fogFactor, 0.0, 1.0 );", "#else", 
"float fogFactor \x3d smoothstep( fogNear, fogFar, depth );", "#endif", "gl_FragColor \x3d mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );", "#endif"].join("\n"), envmap_pars_fragment:["#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "uniform bool useRefract;", "uniform float refractionRatio;", "#else", "varying vec3 vReflect;", "#endif", 
"#endif"].join("\n"), envmap_fragment:["#ifdef USE_ENVMAP", "vec3 reflectVec;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "vec3 cameraToVertex \x3d normalize( vWorldPosition - cameraPosition );", "if ( useRefract ) {", "reflectVec \x3d refract( cameraToVertex, normal, refractionRatio );", "} else { ", "reflectVec \x3d reflect( cameraToVertex, normal );", "}", "#else", "reflectVec \x3d vReflect;", "#endif", "#ifdef DOUBLE_SIDED", "float flipNormal \x3d ( -1.0 + 2.0 * float( gl_FrontFacing ) );", 
"vec4 cubeColor \x3d textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 cubeColor \x3d textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "#ifdef GAMMA_INPUT", "cubeColor.xyz *\x3d cubeColor.xyz;", "#endif", "if ( combine \x3d\x3d 1 ) {", "gl_FragColor.xyz \x3d mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );", "} else if ( combine \x3d\x3d 2 ) {", "gl_FragColor.xyz +\x3d cubeColor.xyz * specularStrength * reflectivity;", 
"} else {", "gl_FragColor.xyz \x3d mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );", "}", "#endif"].join("\n"), envmap_pars_vertex:["#if defined( USE_ENVMAP ) \x26\x26 ! defined( USE_BUMPMAP ) \x26\x26 ! defined( USE_NORMALMAP )", "varying vec3 vReflect;", "uniform float refractionRatio;", "uniform bool useRefract;", "#endif"].join("\n"), worldpos_vertex:["#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )", 
"#ifdef USE_SKINNING", "vec4 worldPosition \x3d modelMatrix * skinned;", "#endif", "#if defined( USE_MORPHTARGETS ) \x26\x26 ! defined( USE_SKINNING )", "vec4 worldPosition \x3d modelMatrix * vec4( morphed, 1.0 );", "#endif", "#if ! defined( USE_MORPHTARGETS ) \x26\x26 ! defined( USE_SKINNING )", "vec4 worldPosition \x3d modelMatrix * vec4( position, 1.0 );", "#endif", "#endif"].join("\n"), envmap_vertex:["#if defined( USE_ENVMAP ) \x26\x26 ! defined( USE_BUMPMAP ) \x26\x26 ! defined( USE_NORMALMAP )", 
"vec3 worldNormal \x3d mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "worldNormal \x3d normalize( worldNormal );", "vec3 cameraToVertex \x3d normalize( worldPosition.xyz - cameraPosition );", "if ( useRefract ) {", "vReflect \x3d refract( cameraToVertex, worldNormal, refractionRatio );", "} else {", "vReflect \x3d reflect( cameraToVertex, worldNormal );", "}", "#endif"].join("\n"), map_particle_pars_fragment:["#ifdef USE_MAP", "uniform sampler2D map;", 
"#endif"].join("\n"), map_particle_fragment:["#ifdef USE_MAP", "gl_FragColor \x3d gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );", "#endif"].join("\n"), map_pars_vertex:["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "uniform vec4 offsetRepeat;", "#endif"].join("\n"), map_pars_fragment:["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", 
"varying vec2 vUv;", "#endif", "#ifdef USE_MAP", "uniform sampler2D map;", "#endif"].join("\n"), map_vertex:["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "vUv \x3d uv * offsetRepeat.zw + offsetRepeat.xy;", "#endif"].join("\n"), map_fragment:["#ifdef USE_MAP", "vec4 texelColor \x3d texture2D( map, vUv );", "#ifdef GAMMA_INPUT", "texelColor.xyz *\x3d texelColor.xyz;", "#endif", "gl_FragColor \x3d gl_FragColor * texelColor;", "#endif"].join("\n"), 
lightmap_pars_fragment:["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "uniform sampler2D lightMap;", "#endif"].join("\n"), lightmap_pars_vertex:["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "#endif"].join("\n"), lightmap_fragment:["#ifdef USE_LIGHTMAP", "gl_FragColor \x3d gl_FragColor * texture2D( lightMap, vUv2 );", "#endif"].join("\n"), lightmap_vertex:["#ifdef USE_LIGHTMAP", "vUv2 \x3d uv2;", "#endif"].join("\n"), bumpmap_pars_fragment:["#ifdef USE_BUMPMAP", "uniform sampler2D bumpMap;", "uniform float bumpScale;", 
"vec2 dHdxy_fwd() {", "vec2 dSTdx \x3d dFdx( vUv );", "vec2 dSTdy \x3d dFdy( vUv );", "float Hll \x3d bumpScale * texture2D( bumpMap, vUv ).x;", "float dBx \x3d bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;", "float dBy \x3d bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;", "return vec2( dBx, dBy );", "}", "vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {", "vec3 vSigmaX \x3d dFdx( surf_pos );", "vec3 vSigmaY \x3d dFdy( surf_pos );", "vec3 vN \x3d surf_norm;", 
"vec3 R1 \x3d cross( vSigmaY, vN );", "vec3 R2 \x3d cross( vN, vSigmaX );", "float fDet \x3d dot( vSigmaX, R1 );", "vec3 vGrad \x3d sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );", "return normalize( abs( fDet ) * surf_norm - vGrad );", "}", "#endif"].join("\n"), normalmap_pars_fragment:["#ifdef USE_NORMALMAP", "uniform sampler2D normalMap;", "uniform vec2 normalScale;", "vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {", "vec3 q0 \x3d dFdx( eye_pos.xyz );", "vec3 q1 \x3d dFdy( eye_pos.xyz );", 
"vec2 st0 \x3d dFdx( vUv.st );", "vec2 st1 \x3d dFdy( vUv.st );", "vec3 S \x3d normalize(  q0 * st1.t - q1 * st0.t );", "vec3 T \x3d normalize( -q0 * st1.s + q1 * st0.s );", "vec3 N \x3d normalize( surf_norm );", "vec3 mapN \x3d texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;", "mapN.xy \x3d normalScale * mapN.xy;", "mat3 tsn \x3d mat3( S, T, N );", "return normalize( tsn * mapN );", "}", "#endif"].join("\n"), specularmap_pars_fragment:["#ifdef USE_SPECULARMAP", "uniform sampler2D specularMap;", "#endif"].join("\n"), 
specularmap_fragment:["float specularStrength;", "#ifdef USE_SPECULARMAP", "vec4 texelSpecular \x3d texture2D( specularMap, vUv );", "specularStrength \x3d texelSpecular.r;", "#else", "specularStrength \x3d 1.0;", "#endif"].join("\n"), lights_lambert_pars_vertex:["uniform vec3 ambient;", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS \x3e 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", 
"#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS \x3e 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", 
"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif"].join("\n"), lights_lambert_vertex:["vLightFront \x3d vec3( 0.0 );", "#ifdef DOUBLE_SIDED", "vLightBack \x3d vec3( 0.0 );", "#endif", "transformedNormal \x3d normalize( transformedNormal );", 
"#if MAX_DIR_LIGHTS \x3e 0", "for( int i \x3d 0; i \x3c MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection \x3d viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector \x3d normalize( lDirection.xyz );", "float dotProduct \x3d dot( transformedNormal, dirVector );", "vec3 directionalLightWeighting \x3d vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 directionalLightWeightingBack \x3d vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalfBack \x3d vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", 
"#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalf \x3d vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "directionalLightWeighting \x3d mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "directionalLightWeightingBack \x3d mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront +\x3d directionalLightColor[ i ] * directionalLightWeighting;", "#ifdef DOUBLE_SIDED", "vLightBack +\x3d directionalLightColor[ i ] * directionalLightWeightingBack;", 
"#endif", "}", "#endif", "#if MAX_POINT_LIGHTS \x3e 0", "for( int i \x3d 0; i \x3c MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition \x3d viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector \x3d lPosition.xyz - mvPosition.xyz;", "float lDistance \x3d 1.0;", "if ( pointLightDistance[ i ] \x3e 0.0 )", "lDistance \x3d 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector \x3d normalize( lVector );", "float dotProduct \x3d dot( transformedNormal, lVector );", "vec3 pointLightWeighting \x3d vec3( max( dotProduct, 0.0 ) );", 
"#ifdef DOUBLE_SIDED", "vec3 pointLightWeightingBack \x3d vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalfBack \x3d vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalf \x3d vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "pointLightWeighting \x3d mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "pointLightWeightingBack \x3d mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );", 
"#endif", "#endif", "vLightFront +\x3d pointLightColor[ i ] * pointLightWeighting * lDistance;", "#ifdef DOUBLE_SIDED", "vLightBack +\x3d pointLightColor[ i ] * pointLightWeightingBack * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "for( int i \x3d 0; i \x3c MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition \x3d viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector \x3d lPosition.xyz - mvPosition.xyz;", "float spotEffect \x3d dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );", 
"if ( spotEffect \x3e spotLightAngleCos[ i ] ) {", "spotEffect \x3d max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float lDistance \x3d 1.0;", "if ( spotLightDistance[ i ] \x3e 0.0 )", "lDistance \x3d 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector \x3d normalize( lVector );", "float dotProduct \x3d dot( transformedNormal, lVector );", "vec3 spotLightWeighting \x3d vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 spotLightWeightingBack \x3d vec3( max( -dotProduct, 0.0 ) );", 
"#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalfBack \x3d vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalf \x3d vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "spotLightWeighting \x3d mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "spotLightWeightingBack \x3d mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront +\x3d spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;", 
"#ifdef DOUBLE_SIDED", "vLightBack +\x3d spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "for( int i \x3d 0; i \x3c MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection \x3d viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector \x3d normalize( lDirection.xyz );", "float dotProduct \x3d dot( transformedNormal, lVector );", "float hemiDiffuseWeight \x3d 0.5 * dotProduct + 0.5;", "float hemiDiffuseWeightBack \x3d -0.5 * dotProduct + 0.5;", 
"vLightFront +\x3d mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "#ifdef DOUBLE_SIDED", "vLightBack +\x3d mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );", "#endif", "}", "#endif", "vLightFront \x3d vLightFront * diffuse + ambient * ambientLightColor + emissive;", "#ifdef DOUBLE_SIDED", "vLightBack \x3d vLightBack * diffuse + ambient * ambientLightColor + emissive;", "#endif"].join("\n"), lights_phong_pars_vertex:["#ifndef PHONG_PER_PIXEL", 
"#if MAX_POINT_LIGHTS \x3e 0", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif"].join("\n"), 
lights_phong_vertex:["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS \x3e 0", "for( int i \x3d 0; i \x3c MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition \x3d viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector \x3d lPosition.xyz - mvPosition.xyz;", "float lDistance \x3d 1.0;", "if ( pointLightDistance[ i ] \x3e 0.0 )", "lDistance \x3d 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "vPointLight[ i ] \x3d vec4( lVector, lDistance );", "}", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", 
"for( int i \x3d 0; i \x3c MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition \x3d viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector \x3d lPosition.xyz - mvPosition.xyz;", "float lDistance \x3d 1.0;", "if ( spotLightDistance[ i ] \x3e 0.0 )", "lDistance \x3d 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "vSpotLight[ i ] \x3d vec4( lVector, lDistance );", "}", "#endif", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0 || defined( USE_BUMPMAP )", "vWorldPosition \x3d worldPosition.xyz;", 
"#endif"].join("\n"), lights_phong_pars_fragment:["uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS \x3e 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS \x3e 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", 
"#ifdef PHONG_PER_PIXEL", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#else", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", 
"#ifdef PHONG_PER_PIXEL", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "#else", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif", "varying vec3 vViewPosition;", "varying vec3 vNormal;"].join("\n"), lights_phong_fragment:["vec3 normal \x3d normalize( vNormal );", "vec3 viewPosition \x3d normalize( vViewPosition );", "#ifdef DOUBLE_SIDED", 
"normal \x3d normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "#endif", "#ifdef USE_NORMALMAP", "normal \x3d perturbNormal2Arb( -viewPosition, normal );", "#elif defined( USE_BUMPMAP )", "normal \x3d perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );", "#endif", "#if MAX_POINT_LIGHTS \x3e 0", "vec3 pointDiffuse  \x3d vec3( 0.0 );", "vec3 pointSpecular \x3d vec3( 0.0 );", "for ( int i \x3d 0; i \x3c MAX_POINT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition \x3d viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", 
"vec3 lVector \x3d lPosition.xyz + vViewPosition.xyz;", "float lDistance \x3d 1.0;", "if ( pointLightDistance[ i ] \x3e 0.0 )", "lDistance \x3d 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector \x3d normalize( lVector );", "#else", "vec3 lVector \x3d normalize( vPointLight[ i ].xyz );", "float lDistance \x3d vPointLight[ i ].w;", "#endif", "float dotProduct \x3d dot( normal, lVector );", "#ifdef WRAP_AROUND", "float pointDiffuseWeightFull \x3d max( dotProduct, 0.0 );", 
"float pointDiffuseWeightHalf \x3d max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 pointDiffuseWeight \x3d mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );", "#else", "float pointDiffuseWeight \x3d max( dotProduct, 0.0 );", "#endif", "pointDiffuse  +\x3d diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;", "vec3 pointHalfVector \x3d normalize( lVector + viewPosition );", "float pointDotNormalHalf \x3d max( dot( normal, pointHalfVector ), 0.0 );", "float pointSpecularWeight \x3d specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );", 
"#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization \x3d ( shininess + 2.0001 ) / 8.0;", "vec3 schlick \x3d specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );", "pointSpecular +\x3d schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;", "#else", "pointSpecular +\x3d specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", 
"vec3 spotDiffuse  \x3d vec3( 0.0 );", "vec3 spotSpecular \x3d vec3( 0.0 );", "for ( int i \x3d 0; i \x3c MAX_SPOT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition \x3d viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector \x3d lPosition.xyz + vViewPosition.xyz;", "float lDistance \x3d 1.0;", "if ( spotLightDistance[ i ] \x3e 0.0 )", "lDistance \x3d 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector \x3d normalize( lVector );", "#else", "vec3 lVector \x3d normalize( vSpotLight[ i ].xyz );", 
"float lDistance \x3d vSpotLight[ i ].w;", "#endif", "float spotEffect \x3d dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );", "if ( spotEffect \x3e spotLightAngleCos[ i ] ) {", "spotEffect \x3d max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float dotProduct \x3d dot( normal, lVector );", "#ifdef WRAP_AROUND", "float spotDiffuseWeightFull \x3d max( dotProduct, 0.0 );", "float spotDiffuseWeightHalf \x3d max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 spotDiffuseWeight \x3d mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );", 
"#else", "float spotDiffuseWeight \x3d max( dotProduct, 0.0 );", "#endif", "spotDiffuse +\x3d diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;", "vec3 spotHalfVector \x3d normalize( lVector + viewPosition );", "float spotDotNormalHalf \x3d max( dot( normal, spotHalfVector ), 0.0 );", "float spotSpecularWeight \x3d specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization \x3d ( shininess + 2.0001 ) / 8.0;", 
"vec3 schlick \x3d specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );", "spotSpecular +\x3d schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;", "#else", "spotSpecular +\x3d specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_DIR_LIGHTS \x3e 0", "vec3 dirDiffuse  \x3d vec3( 0.0 );", "vec3 dirSpecular \x3d vec3( 0.0 );", 
"for( int i \x3d 0; i \x3c MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection \x3d viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector \x3d normalize( lDirection.xyz );", "float dotProduct \x3d dot( normal, dirVector );", "#ifdef WRAP_AROUND", "float dirDiffuseWeightFull \x3d max( dotProduct, 0.0 );", "float dirDiffuseWeightHalf \x3d max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 dirDiffuseWeight \x3d mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );", "#else", 
"float dirDiffuseWeight \x3d max( dotProduct, 0.0 );", "#endif", "dirDiffuse  +\x3d diffuse * directionalLightColor[ i ] * dirDiffuseWeight;", "vec3 dirHalfVector \x3d normalize( dirVector + viewPosition );", "float dirDotNormalHalf \x3d max( dot( normal, dirHalfVector ), 0.0 );", "float dirSpecularWeight \x3d specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization \x3d ( shininess + 2.0001 ) / 8.0;", "vec3 schlick \x3d specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );", 
"dirSpecular +\x3d schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;", "#else", "dirSpecular +\x3d specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;", "#endif", "}", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "vec3 hemiDiffuse  \x3d vec3( 0.0 );", "vec3 hemiSpecular \x3d vec3( 0.0 );", "for( int i \x3d 0; i \x3c MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection \x3d viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector \x3d normalize( lDirection.xyz );", 
"float dotProduct \x3d dot( normal, lVector );", "float hemiDiffuseWeight \x3d 0.5 * dotProduct + 0.5;", "vec3 hemiColor \x3d mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "hemiDiffuse +\x3d diffuse * hemiColor;", "vec3 hemiHalfVectorSky \x3d normalize( lVector + viewPosition );", "float hemiDotNormalHalfSky \x3d 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;", "float hemiSpecularWeightSky \x3d specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );", 
"vec3 lVectorGround \x3d -lVector;", "vec3 hemiHalfVectorGround \x3d normalize( lVectorGround + viewPosition );", "float hemiDotNormalHalfGround \x3d 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;", "float hemiSpecularWeightGround \x3d specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float dotProductGround \x3d dot( normal, lVectorGround );", "float specularNormalization \x3d ( shininess + 2.0001 ) / 8.0;", "vec3 schlickSky \x3d specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );", 
"vec3 schlickGround \x3d specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );", "hemiSpecular +\x3d hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );", "#else", "hemiSpecular +\x3d specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;", "#endif", "}", "#endif", "vec3 totalDiffuse \x3d vec3( 0.0 );", 
"vec3 totalSpecular \x3d vec3( 0.0 );", "#if MAX_DIR_LIGHTS \x3e 0", "totalDiffuse +\x3d dirDiffuse;", "totalSpecular +\x3d dirSpecular;", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "totalDiffuse +\x3d hemiDiffuse;", "totalSpecular +\x3d hemiSpecular;", "#endif", "#if MAX_POINT_LIGHTS \x3e 0", "totalDiffuse +\x3d pointDiffuse;", "totalSpecular +\x3d pointSpecular;", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "totalDiffuse +\x3d spotDiffuse;", "totalSpecular +\x3d spotSpecular;", "#endif", "#ifdef METAL", 
"gl_FragColor.xyz \x3d gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );", "#else", "gl_FragColor.xyz \x3d gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;", "#endif"].join("\n"), color_pars_fragment:["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"].join("\n"), color_fragment:["#ifdef USE_COLOR", "gl_FragColor \x3d gl_FragColor * vec4( vColor, opacity );", "#endif"].join("\n"), color_pars_vertex:["#ifdef USE_COLOR", 
"varying vec3 vColor;", "#endif"].join("\n"), color_vertex:["#ifdef USE_COLOR", "#ifdef GAMMA_INPUT", "vColor \x3d color * color;", "#else", "vColor \x3d color;", "#endif", "#endif"].join("\n"), skinning_pars_vertex:["#ifdef USE_SKINNING", "#ifdef BONE_TEXTURE", "uniform sampler2D boneTexture;", "mat4 getBoneMatrix( const in float i ) {", "float j \x3d i * 4.0;", "float x \x3d mod( j, N_BONE_PIXEL_X );", "float y \x3d floor( j / N_BONE_PIXEL_X );", "const float dx \x3d 1.0 / N_BONE_PIXEL_X;", "const float dy \x3d 1.0 / N_BONE_PIXEL_Y;", 
"y \x3d dy * ( y + 0.5 );", "vec4 v1 \x3d texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );", "vec4 v2 \x3d texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );", "vec4 v3 \x3d texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );", "vec4 v4 \x3d texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );", "mat4 bone \x3d mat4( v1, v2, v3, v4 );", "return bone;", "}", "#else", "uniform mat4 boneGlobalMatrices[ MAX_BONES ];", "mat4 getBoneMatrix( const in float i ) {", "mat4 bone \x3d boneGlobalMatrices[ int(i) ];", 
"return bone;", "}", "#endif", "#endif"].join("\n"), skinbase_vertex:["#ifdef USE_SKINNING", "mat4 boneMatX \x3d getBoneMatrix( skinIndex.x );", "mat4 boneMatY \x3d getBoneMatrix( skinIndex.y );", "#endif"].join("\n"), skinning_vertex:["#ifdef USE_SKINNING", "#ifdef USE_MORPHTARGETS", "vec4 skinVertex \x3d vec4( morphed, 1.0 );", "#else", "vec4 skinVertex \x3d vec4( position, 1.0 );", "#endif", "vec4 skinned  \x3d boneMatX * skinVertex * skinWeight.x;", "skinned \t  +\x3d boneMatY * skinVertex * skinWeight.y;", 
"#endif"].join("\n"), morphtarget_pars_vertex:["#ifdef USE_MORPHTARGETS", "#ifndef USE_MORPHNORMALS", "uniform float morphTargetInfluences[ 8 ];", "#else", "uniform float morphTargetInfluences[ 4 ];", "#endif", "#endif"].join("\n"), morphtarget_vertex:["#ifdef USE_MORPHTARGETS", "vec3 morphed \x3d vec3( 0.0 );", "morphed +\x3d ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];", "morphed +\x3d ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];", "morphed +\x3d ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];", 
"morphed +\x3d ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];", "#ifndef USE_MORPHNORMALS", "morphed +\x3d ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];", "morphed +\x3d ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];", "morphed +\x3d ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];", "morphed +\x3d ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];", "#endif", "morphed +\x3d position;", "#endif"].join("\n"), default_vertex:["vec4 mvPosition;", "#ifdef USE_SKINNING", 
"mvPosition \x3d modelViewMatrix * skinned;", "#endif", "#if !defined( USE_SKINNING ) \x26\x26 defined( USE_MORPHTARGETS )", "mvPosition \x3d modelViewMatrix * vec4( morphed, 1.0 );", "#endif", "#if !defined( USE_SKINNING ) \x26\x26 ! defined( USE_MORPHTARGETS )", "mvPosition \x3d modelViewMatrix * vec4( position, 1.0 );", "#endif", "gl_Position \x3d projectionMatrix * mvPosition;"].join("\n"), morphnormal_vertex:["#ifdef USE_MORPHNORMALS", "vec3 morphedNormal \x3d vec3( 0.0 );", "morphedNormal +\x3d  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];", 
"morphedNormal +\x3d  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];", "morphedNormal +\x3d  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];", "morphedNormal +\x3d  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];", "morphedNormal +\x3d normal;", "#endif"].join("\n"), skinnormal_vertex:["#ifdef USE_SKINNING", "mat4 skinMatrix \x3d skinWeight.x * boneMatX;", "skinMatrix \t+\x3d skinWeight.y * boneMatY;", "#ifdef USE_MORPHNORMALS", "vec4 skinnedNormal \x3d skinMatrix * vec4( morphedNormal, 0.0 );", 
"#else", "vec4 skinnedNormal \x3d skinMatrix * vec4( normal, 0.0 );", "#endif", "#endif"].join("\n"), defaultnormal_vertex:["vec3 objectNormal;", "#ifdef USE_SKINNING", "objectNormal \x3d skinnedNormal.xyz;", "#endif", "#if !defined( USE_SKINNING ) \x26\x26 defined( USE_MORPHNORMALS )", "objectNormal \x3d morphedNormal;", "#endif", "#if !defined( USE_SKINNING ) \x26\x26 ! defined( USE_MORPHNORMALS )", "objectNormal \x3d normal;", "#endif", "#ifdef FLIP_SIDED", "objectNormal \x3d -objectNormal;", 
"#endif", "vec3 transformedNormal \x3d normalMatrix * objectNormal;"].join("\n"), shadowmap_pars_fragment:["#ifdef USE_SHADOWMAP", "uniform sampler2D shadowMap[ MAX_SHADOWS ];", "uniform vec2 shadowMapSize[ MAX_SHADOWS ];", "uniform float shadowDarkness[ MAX_SHADOWS ];", "uniform float shadowBias[ MAX_SHADOWS ];", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift \x3d vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", 
"float depth \x3d dot( rgba_depth, bit_shift );", "return depth;", "}", "#endif"].join("\n"), shadowmap_fragment:["#ifdef USE_SHADOWMAP", "#ifdef SHADOWMAP_DEBUG", "vec3 frustumColors[3];", "frustumColors[0] \x3d vec3( 1.0, 0.5, 0.0 );", "frustumColors[1] \x3d vec3( 0.0, 1.0, 0.8 );", "frustumColors[2] \x3d vec3( 0.0, 0.5, 1.0 );", "#endif", "#ifdef SHADOWMAP_CASCADE", "int inFrustumCount \x3d 0;", "#endif", "float fDepth;", "vec3 shadowColor \x3d vec3( 1.0 );", "for( int i \x3d 0; i \x3c MAX_SHADOWS; i ++ ) {", 
"vec3 shadowCoord \x3d vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;", "bvec4 inFrustumVec \x3d bvec4 ( shadowCoord.x \x3e\x3d 0.0, shadowCoord.x \x3c\x3d 1.0, shadowCoord.y \x3e\x3d 0.0, shadowCoord.y \x3c\x3d 1.0 );", "bool inFrustum \x3d all( inFrustumVec );", "#ifdef SHADOWMAP_CASCADE", "inFrustumCount +\x3d int( inFrustum );", "bvec3 frustumTestVec \x3d bvec3( inFrustum, inFrustumCount \x3d\x3d 1, shadowCoord.z \x3c\x3d 1.0 );", "#else", "bvec2 frustumTestVec \x3d bvec2( inFrustum, shadowCoord.z \x3c\x3d 1.0 );", 
"#endif", "bool frustumTest \x3d all( frustumTestVec );", "if ( frustumTest ) {", "shadowCoord.z +\x3d shadowBias[ i ];", "#if defined( SHADOWMAP_TYPE_PCF )", "float shadow \x3d 0.0;", "const float shadowDelta \x3d 1.0 / 9.0;", "float xPixelOffset \x3d 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset \x3d 1.0 / shadowMapSize[ i ].y;", "float dx0 \x3d -1.25 * xPixelOffset;", "float dy0 \x3d -1.25 * yPixelOffset;", "float dx1 \x3d 1.25 * xPixelOffset;", "float dy1 \x3d 1.25 * yPixelOffset;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", 
"if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", 
"fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", 
"if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "fDepth \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( fDepth \x3c shadowCoord.z ) shadow +\x3d shadowDelta;", "shadowColor \x3d shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#elif defined( SHADOWMAP_TYPE_PCF_SOFT )", "float shadow \x3d 0.0;", "float xPixelOffset \x3d 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset \x3d 1.0 / shadowMapSize[ i ].y;", "float dx0 \x3d -1.0 * xPixelOffset;", 
"float dy0 \x3d -1.0 * yPixelOffset;", "float dx1 \x3d 1.0 * xPixelOffset;", "float dy1 \x3d 1.0 * yPixelOffset;", "mat3 shadowKernel;", "mat3 depthKernel;", "depthKernel[0][0] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( depthKernel[0][0] \x3c shadowCoord.z ) shadowKernel[0][0] \x3d 0.25;", "else shadowKernel[0][0] \x3d 0.0;", "depthKernel[0][1] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( depthKernel[0][1] \x3c shadowCoord.z ) shadowKernel[0][1] \x3d 0.25;", 
"else shadowKernel[0][1] \x3d 0.0;", "depthKernel[0][2] \x3d unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( depthKernel[0][2] \x3c shadowCoord.z ) shadowKernel[0][2] \x3d 0.25;", "else shadowKernel[0][2] \x3d 0.0;", "depthKernel[1][0] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( depthKernel[1][0] \x3c shadowCoord.z ) shadowKernel[1][0] \x3d 0.25;", "else shadowKernel[1][0] \x3d 0.0;", "depthKernel[1][1] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", 
"if ( depthKernel[1][1] \x3c shadowCoord.z ) shadowKernel[1][1] \x3d 0.25;", "else shadowKernel[1][1] \x3d 0.0;", "depthKernel[1][2] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( depthKernel[1][2] \x3c shadowCoord.z ) shadowKernel[1][2] \x3d 0.25;", "else shadowKernel[1][2] \x3d 0.0;", "depthKernel[2][0] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( depthKernel[2][0] \x3c shadowCoord.z ) shadowKernel[2][0] \x3d 0.25;", 
"else shadowKernel[2][0] \x3d 0.0;", "depthKernel[2][1] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( depthKernel[2][1] \x3c shadowCoord.z ) shadowKernel[2][1] \x3d 0.25;", "else shadowKernel[2][1] \x3d 0.0;", "depthKernel[2][2] \x3d unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( depthKernel[2][2] \x3c shadowCoord.z ) shadowKernel[2][2] \x3d 0.25;", "else shadowKernel[2][2] \x3d 0.0;", "vec2 fractionalCoord \x3d 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );", 
"shadowKernel[0] \x3d mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );", "shadowKernel[1] \x3d mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );", "vec4 shadowValues;", "shadowValues.x \x3d mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );", "shadowValues.y \x3d mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );", "shadowValues.z \x3d mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );", "shadowValues.w \x3d mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );", 
"shadow \x3d dot( shadowValues, vec4( 1.0 ) );", "shadowColor \x3d shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#else", "vec4 rgbaDepth \x3d texture2D( shadowMap[ i ], shadowCoord.xy );", "float fDepth \x3d unpackDepth( rgbaDepth );", "if ( fDepth \x3c shadowCoord.z )", "shadowColor \x3d shadowColor * vec3( 1.0 - shadowDarkness[ i ] );", "#endif", "}", "#ifdef SHADOWMAP_DEBUG", "#ifdef SHADOWMAP_CASCADE", "if ( inFrustum \x26\x26 inFrustumCount \x3d\x3d 1 ) gl_FragColor.xyz *\x3d frustumColors[ i ];", 
"#else", "if ( inFrustum ) gl_FragColor.xyz *\x3d frustumColors[ i ];", "#endif", "#endif", "}", "#ifdef GAMMA_OUTPUT", "shadowColor *\x3d shadowColor;", "#endif", "gl_FragColor.xyz \x3d gl_FragColor.xyz * shadowColor;", "#endif"].join("\n"), shadowmap_pars_vertex:["#ifdef USE_SHADOWMAP", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "uniform mat4 shadowMatrix[ MAX_SHADOWS ];", "#endif"].join("\n"), shadowmap_vertex:["#ifdef USE_SHADOWMAP", "for( int i \x3d 0; i \x3c MAX_SHADOWS; i ++ ) {", "vShadowCoord[ i ] \x3d shadowMatrix[ i ] * worldPosition;", 
"}", "#endif"].join("\n"), alphatest_fragment:["#ifdef ALPHATEST", "if ( gl_FragColor.a \x3c ALPHATEST ) discard;", "#endif"].join("\n"), linear_to_gamma_fragment:["#ifdef GAMMA_OUTPUT", "gl_FragColor.xyz \x3d sqrt( gl_FragColor.xyz );", "#endif"].join("\n")};
THREE.UniformsUtils = {merge:function(uniforms) {
  var u, p, tmp, merged = {};
  for(u = 0;u < uniforms.length;u++) {
    tmp = this.clone(uniforms[u]);
    for(p in tmp) {
      merged[p] = tmp[p]
    }
  }
  return merged
}, clone:function(uniforms_src) {
  var u, p, parameter, parameter_src, uniforms_dst = {};
  for(u in uniforms_src) {
    uniforms_dst[u] = {};
    for(p in uniforms_src[u]) {
      parameter_src = uniforms_src[u][p];
      if(parameter_src instanceof THREE.Color || parameter_src instanceof THREE.Vector2 || parameter_src instanceof THREE.Vector3 || parameter_src instanceof THREE.Vector4 || parameter_src instanceof THREE.Matrix4 || parameter_src instanceof THREE.Texture) {
        uniforms_dst[u][p] = parameter_src.clone()
      }else {
        if(parameter_src instanceof Array) {
          uniforms_dst[u][p] = parameter_src.slice()
        }else {
          uniforms_dst[u][p] = parameter_src
        }
      }
    }
  }
  return uniforms_dst
}};
THREE.UniformsLib = {common:{"diffuse":{type:"c", value:new THREE.Color(15658734)}, "opacity":{type:"f", value:1}, "map":{type:"t", value:null}, "offsetRepeat":{type:"v4", value:new THREE.Vector4(0, 0, 1, 1)}, "lightMap":{type:"t", value:null}, "specularMap":{type:"t", value:null}, "envMap":{type:"t", value:null}, "flipEnvMap":{type:"f", value:-1}, "useRefract":{type:"i", value:0}, "reflectivity":{type:"f", value:1}, "refractionRatio":{type:"f", value:0.98}, "combine":{type:"i", value:0}, "morphTargetInfluences":{type:"f", 
value:0}}, bump:{"bumpMap":{type:"t", value:null}, "bumpScale":{type:"f", value:1}}, normalmap:{"normalMap":{type:"t", value:null}, "normalScale":{type:"v2", value:new THREE.Vector2(1, 1)}}, fog:{"fogDensity":{type:"f", value:2.5E-4}, "fogNear":{type:"f", value:1}, "fogFar":{type:"f", value:2E3}, "fogColor":{type:"c", value:new THREE.Color(16777215)}}, lights:{"ambientLightColor":{type:"fv", value:[]}, "directionalLightDirection":{type:"fv", value:[]}, "directionalLightColor":{type:"fv", value:[]}, 
"hemisphereLightDirection":{type:"fv", value:[]}, "hemisphereLightSkyColor":{type:"fv", value:[]}, "hemisphereLightGroundColor":{type:"fv", value:[]}, "pointLightColor":{type:"fv", value:[]}, "pointLightPosition":{type:"fv", value:[]}, "pointLightDistance":{type:"fv1", value:[]}, "spotLightColor":{type:"fv", value:[]}, "spotLightPosition":{type:"fv", value:[]}, "spotLightDirection":{type:"fv", value:[]}, "spotLightDistance":{type:"fv1", value:[]}, "spotLightAngleCos":{type:"fv1", value:[]}, "spotLightExponent":{type:"fv1", 
value:[]}}, particle:{"psColor":{type:"c", value:new THREE.Color(15658734)}, "opacity":{type:"f", value:1}, "size":{type:"f", value:1}, "scale":{type:"f", value:1}, "map":{type:"t", value:null}, "fogDensity":{type:"f", value:2.5E-4}, "fogNear":{type:"f", value:1}, "fogFar":{type:"f", value:2E3}, "fogColor":{type:"c", value:new THREE.Color(16777215)}}, shadowmap:{"shadowMap":{type:"tv", value:[]}, "shadowMapSize":{type:"v2v", value:[]}, "shadowBias":{type:"fv1", value:[]}, "shadowDarkness":{type:"fv1", 
value:[]}, "shadowMatrix":{type:"m4v", value:[]}}};
THREE.ShaderLib = {"basic":{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib["common"], THREE.UniformsLib["fog"], THREE.UniformsLib["shadowmap"]]), vertexShader:[THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], THREE.ShaderChunk["envmap_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", THREE.ShaderChunk["map_vertex"], 
THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["skinbase_vertex"], "#ifdef USE_ENVMAP", THREE.ShaderChunk["morphnormal_vertex"], THREE.ShaderChunk["skinnormal_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], "#endif", THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["envmap_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n"), 
fragmentShader:["uniform vec3 diffuse;", "uniform float opacity;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["envmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], THREE.ShaderChunk["specularmap_pars_fragment"], "void main() {", "gl_FragColor \x3d vec4( diffuse, opacity );", THREE.ShaderChunk["map_fragment"], THREE.ShaderChunk["alphatest_fragment"], 
THREE.ShaderChunk["specularmap_fragment"], THREE.ShaderChunk["lightmap_fragment"], THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["envmap_fragment"], THREE.ShaderChunk["shadowmap_fragment"], THREE.ShaderChunk["linear_to_gamma_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n")}, "lambert":{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib["common"], THREE.UniformsLib["fog"], THREE.UniformsLib["lights"], THREE.UniformsLib["shadowmap"], {"ambient":{type:"c", value:new THREE.Color(16777215)}, 
"emissive":{type:"c", value:new THREE.Color(0)}, "wrapRGB":{type:"v3", value:new THREE.Vector3(1, 1, 1)}}]), vertexShader:["#define LAMBERT", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], THREE.ShaderChunk["envmap_pars_vertex"], THREE.ShaderChunk["lights_lambert_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], 
THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", THREE.ShaderChunk["map_vertex"], THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["morphnormal_vertex"], THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["skinnormal_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["envmap_vertex"], 
THREE.ShaderChunk["lights_lambert_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n"), fragmentShader:["uniform float opacity;", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["envmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], THREE.ShaderChunk["specularmap_pars_fragment"], 
"void main() {", "gl_FragColor \x3d vec4( vec3 ( 1.0 ), opacity );", THREE.ShaderChunk["map_fragment"], THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["specularmap_fragment"], "#ifdef DOUBLE_SIDED", "if ( gl_FrontFacing )", "gl_FragColor.xyz *\x3d vLightFront;", "else", "gl_FragColor.xyz *\x3d vLightBack;", "#else", "gl_FragColor.xyz *\x3d vLightFront;", "#endif", THREE.ShaderChunk["lightmap_fragment"], THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["envmap_fragment"], THREE.ShaderChunk["shadowmap_fragment"], 
THREE.ShaderChunk["linear_to_gamma_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n")}, "phong":{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib["common"], THREE.UniformsLib["bump"], THREE.UniformsLib["normalmap"], THREE.UniformsLib["fog"], THREE.UniformsLib["lights"], THREE.UniformsLib["shadowmap"], {"ambient":{type:"c", value:new THREE.Color(16777215)}, "emissive":{type:"c", value:new THREE.Color(0)}, "specular":{type:"c", value:new THREE.Color(1118481)}, "shininess":{type:"f", 
value:30}, "wrapRGB":{type:"v3", value:new THREE.Vector3(1, 1, 1)}}]), vertexShader:["#define PHONG", "varying vec3 vViewPosition;", "varying vec3 vNormal;", THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], THREE.ShaderChunk["envmap_pars_vertex"], THREE.ShaderChunk["lights_phong_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", 
THREE.ShaderChunk["map_vertex"], THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["morphnormal_vertex"], THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["skinnormal_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], "vNormal \x3d normalize( transformedNormal );", THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], "vViewPosition \x3d -mvPosition.xyz;", THREE.ShaderChunk["worldpos_vertex"], 
THREE.ShaderChunk["envmap_vertex"], THREE.ShaderChunk["lights_phong_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n"), fragmentShader:["uniform vec3 diffuse;", "uniform float opacity;", "uniform vec3 ambient;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["envmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], 
THREE.ShaderChunk["lights_phong_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], THREE.ShaderChunk["bumpmap_pars_fragment"], THREE.ShaderChunk["normalmap_pars_fragment"], THREE.ShaderChunk["specularmap_pars_fragment"], "void main() {", "gl_FragColor \x3d vec4( vec3 ( 1.0 ), opacity );", THREE.ShaderChunk["map_fragment"], THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["specularmap_fragment"], THREE.ShaderChunk["lights_phong_fragment"], THREE.ShaderChunk["lightmap_fragment"], 
THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["envmap_fragment"], THREE.ShaderChunk["shadowmap_fragment"], THREE.ShaderChunk["linear_to_gamma_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n")}, "particle_basic":{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib["particle"], THREE.UniformsLib["shadowmap"]]), vertexShader:["uniform float size;", "uniform float scale;", THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", THREE.ShaderChunk["color_vertex"], 
"vec4 mvPosition \x3d modelViewMatrix * vec4( position, 1.0 );", "#ifdef USE_SIZEATTENUATION", "gl_PointSize \x3d size * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize \x3d size;", "#endif", "gl_Position \x3d projectionMatrix * mvPosition;", THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n"), fragmentShader:["uniform vec3 psColor;", "uniform float opacity;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_particle_pars_fragment"], 
THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], "void main() {", "gl_FragColor \x3d vec4( psColor, opacity );", THREE.ShaderChunk["map_particle_fragment"], THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["shadowmap_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n")}, "dashed":{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib["common"], THREE.UniformsLib["fog"], {"scale":{type:"f", value:1}, "dashSize":{type:"f", 
value:1}, "totalSize":{type:"f", value:2}}]), vertexShader:["uniform float scale;", "attribute float lineDistance;", "varying float vLineDistance;", THREE.ShaderChunk["color_pars_vertex"], "void main() {", THREE.ShaderChunk["color_vertex"], "vLineDistance \x3d scale * lineDistance;", "vec4 mvPosition \x3d modelViewMatrix * vec4( position, 1.0 );", "gl_Position \x3d projectionMatrix * mvPosition;", "}"].join("\n"), fragmentShader:["uniform vec3 diffuse;", "uniform float opacity;", "uniform float dashSize;", 
"uniform float totalSize;", "varying float vLineDistance;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], "void main() {", "if ( mod( vLineDistance, totalSize ) \x3e dashSize ) {", "discard;", "}", "gl_FragColor \x3d vec4( diffuse, opacity );", THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n")}, "depth":{uniforms:{"mNear":{type:"f", value:1}, "mFar":{type:"f", value:2E3}, "opacity":{type:"f", value:1}}, vertexShader:["void main() {", 
"gl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader:["uniform float mNear;", "uniform float mFar;", "uniform float opacity;", "void main() {", "float depth \x3d gl_FragCoord.z / gl_FragCoord.w;", "float color \x3d 1.0 - smoothstep( mNear, mFar, depth );", "gl_FragColor \x3d vec4( vec3( color ), opacity );", "}"].join("\n")}, "normal":{uniforms:{"opacity":{type:"f", value:1}}, vertexShader:["varying vec3 vNormal;", "void main() {", "vec4 mvPosition \x3d modelViewMatrix * vec4( position, 1.0 );", 
"vNormal \x3d normalize( normalMatrix * normal );", "gl_Position \x3d projectionMatrix * mvPosition;", "}"].join("\n"), fragmentShader:["uniform float opacity;", "varying vec3 vNormal;", "void main() {", "gl_FragColor \x3d vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", "}"].join("\n")}, "normalmap":{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib["fog"], THREE.UniformsLib["lights"], THREE.UniformsLib["shadowmap"], {"enableAO":{type:"i", value:0}, "enableDiffuse":{type:"i", value:0}, "enableSpecular":{type:"i", 
value:0}, "enableReflection":{type:"i", value:0}, "enableDisplacement":{type:"i", value:0}, "tDisplacement":{type:"t", value:null}, "tDiffuse":{type:"t", value:null}, "tCube":{type:"t", value:null}, "tNormal":{type:"t", value:null}, "tSpecular":{type:"t", value:null}, "tAO":{type:"t", value:null}, "uNormalScale":{type:"v2", value:new THREE.Vector2(1, 1)}, "uDisplacementBias":{type:"f", value:0}, "uDisplacementScale":{type:"f", value:1}, "uDiffuseColor":{type:"c", value:new THREE.Color(16777215)}, 
"uSpecularColor":{type:"c", value:new THREE.Color(1118481)}, "uAmbientColor":{type:"c", value:new THREE.Color(16777215)}, "uShininess":{type:"f", value:30}, "uOpacity":{type:"f", value:1}, "useRefract":{type:"i", value:0}, "uRefractionRatio":{type:"f", value:0.98}, "uReflectivity":{type:"f", value:0.5}, "uOffset":{type:"v2", value:new THREE.Vector2(0, 0)}, "uRepeat":{type:"v2", value:new THREE.Vector2(1, 1)}, "wrapRGB":{type:"v3", value:new THREE.Vector3(1, 1, 1)}}]), fragmentShader:["uniform vec3 uAmbientColor;", 
"uniform vec3 uDiffuseColor;", "uniform vec3 uSpecularColor;", "uniform float uShininess;", "uniform float uOpacity;", "uniform bool enableDiffuse;", "uniform bool enableSpecular;", "uniform bool enableAO;", "uniform bool enableReflection;", "uniform sampler2D tDiffuse;", "uniform sampler2D tNormal;", "uniform sampler2D tSpecular;", "uniform sampler2D tAO;", "uniform samplerCube tCube;", "uniform vec2 uNormalScale;", "uniform bool useRefract;", "uniform float uRefractionRatio;", "uniform float uReflectivity;", 
"varying vec3 vTangent;", "varying vec3 vBinormal;", "varying vec3 vNormal;", "varying vec2 vUv;", "uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS \x3e 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", 
"#endif", "#if MAX_POINT_LIGHTS \x3e 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", 
"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif", "varying vec3 vWorldPosition;", "varying vec3 vViewPosition;", THREE.ShaderChunk["shadowmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], "void main() {", "gl_FragColor \x3d vec4( vec3( 1.0 ), uOpacity );", "vec3 specularTex \x3d vec3( 1.0 );", "vec3 normalTex \x3d texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;", "normalTex.xy *\x3d uNormalScale;", "normalTex \x3d normalize( normalTex );", 
"if( enableDiffuse ) {", "#ifdef GAMMA_INPUT", "vec4 texelColor \x3d texture2D( tDiffuse, vUv );", "texelColor.xyz *\x3d texelColor.xyz;", "gl_FragColor \x3d gl_FragColor * texelColor;", "#else", "gl_FragColor \x3d gl_FragColor * texture2D( tDiffuse, vUv );", "#endif", "}", "if( enableAO ) {", "#ifdef GAMMA_INPUT", "vec4 aoColor \x3d texture2D( tAO, vUv );", "aoColor.xyz *\x3d aoColor.xyz;", "gl_FragColor.xyz \x3d gl_FragColor.xyz * aoColor.xyz;", "#else", "gl_FragColor.xyz \x3d gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;", 
"#endif", "}", "if( enableSpecular )", "specularTex \x3d texture2D( tSpecular, vUv ).xyz;", "mat3 tsb \x3d mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );", "vec3 finalNormal \x3d tsb * normalTex;", "#ifdef FLIP_SIDED", "finalNormal \x3d -finalNormal;", "#endif", "vec3 normal \x3d normalize( finalNormal );", "vec3 viewPosition \x3d normalize( vViewPosition );", "#if MAX_POINT_LIGHTS \x3e 0", "vec3 pointDiffuse \x3d vec3( 0.0 );", "vec3 pointSpecular \x3d vec3( 0.0 );", 
"for ( int i \x3d 0; i \x3c MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition \x3d viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 pointVector \x3d lPosition.xyz + vViewPosition.xyz;", "float pointDistance \x3d 1.0;", "if ( pointLightDistance[ i ] \x3e 0.0 )", "pointDistance \x3d 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );", "pointVector \x3d normalize( pointVector );", "#ifdef WRAP_AROUND", "float pointDiffuseWeightFull \x3d max( dot( normal, pointVector ), 0.0 );", 
"float pointDiffuseWeightHalf \x3d max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );", "vec3 pointDiffuseWeight \x3d mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );", "#else", "float pointDiffuseWeight \x3d max( dot( normal, pointVector ), 0.0 );", "#endif", "pointDiffuse +\x3d pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;", "vec3 pointHalfVector \x3d normalize( pointVector + viewPosition );", "float pointDotNormalHalf \x3d max( dot( normal, pointHalfVector ), 0.0 );", 
"float pointSpecularWeight \x3d specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization \x3d ( uShininess + 2.0001 ) / 8.0;", "vec3 schlick \x3d uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );", "pointSpecular +\x3d schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;", "#else", "pointSpecular +\x3d pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;", 
"#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "vec3 spotDiffuse \x3d vec3( 0.0 );", "vec3 spotSpecular \x3d vec3( 0.0 );", "for ( int i \x3d 0; i \x3c MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition \x3d viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 spotVector \x3d lPosition.xyz + vViewPosition.xyz;", "float spotDistance \x3d 1.0;", "if ( spotLightDistance[ i ] \x3e 0.0 )", "spotDistance \x3d 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );", "spotVector \x3d normalize( spotVector );", 
"float spotEffect \x3d dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );", "if ( spotEffect \x3e spotLightAngleCos[ i ] ) {", "spotEffect \x3d max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "#ifdef WRAP_AROUND", "float spotDiffuseWeightFull \x3d max( dot( normal, spotVector ), 0.0 );", "float spotDiffuseWeightHalf \x3d max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );", "vec3 spotDiffuseWeight \x3d mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );", 
"#else", "float spotDiffuseWeight \x3d max( dot( normal, spotVector ), 0.0 );", "#endif", "spotDiffuse +\x3d spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;", "vec3 spotHalfVector \x3d normalize( spotVector + viewPosition );", "float spotDotNormalHalf \x3d max( dot( normal, spotHalfVector ), 0.0 );", "float spotSpecularWeight \x3d specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization \x3d ( uShininess + 2.0001 ) / 8.0;", 
"vec3 schlick \x3d uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );", "spotSpecular +\x3d schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;", "#else", "spotSpecular +\x3d spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_DIR_LIGHTS \x3e 0", "vec3 dirDiffuse \x3d vec3( 0.0 );", 
"vec3 dirSpecular \x3d vec3( 0.0 );", "for( int i \x3d 0; i \x3c MAX_DIR_LIGHTS; i++ ) {", "vec4 lDirection \x3d viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector \x3d normalize( lDirection.xyz );", "#ifdef WRAP_AROUND", "float directionalLightWeightingFull \x3d max( dot( normal, dirVector ), 0.0 );", "float directionalLightWeightingHalf \x3d max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );", "vec3 dirDiffuseWeight \x3d mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );", 
"#else", "float dirDiffuseWeight \x3d max( dot( normal, dirVector ), 0.0 );", "#endif", "dirDiffuse +\x3d directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;", "vec3 dirHalfVector \x3d normalize( dirVector + viewPosition );", "float dirDotNormalHalf \x3d max( dot( normal, dirHalfVector ), 0.0 );", "float dirSpecularWeight \x3d specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization \x3d ( uShininess + 2.0001 ) / 8.0;", 
"vec3 schlick \x3d uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );", "dirSpecular +\x3d schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;", "#else", "dirSpecular +\x3d directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;", "#endif", "}", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "vec3 hemiDiffuse  \x3d vec3( 0.0 );", "vec3 hemiSpecular \x3d vec3( 0.0 );", "for( int i \x3d 0; i \x3c MAX_HEMI_LIGHTS; i ++ ) {", 
"vec4 lDirection \x3d viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector \x3d normalize( lDirection.xyz );", "float dotProduct \x3d dot( normal, lVector );", "float hemiDiffuseWeight \x3d 0.5 * dotProduct + 0.5;", "vec3 hemiColor \x3d mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "hemiDiffuse +\x3d uDiffuseColor * hemiColor;", "vec3 hemiHalfVectorSky \x3d normalize( lVector + viewPosition );", "float hemiDotNormalHalfSky \x3d 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;", 
"float hemiSpecularWeightSky \x3d specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );", "vec3 lVectorGround \x3d -lVector;", "vec3 hemiHalfVectorGround \x3d normalize( lVectorGround + viewPosition );", "float hemiDotNormalHalfGround \x3d 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;", "float hemiSpecularWeightGround \x3d specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float dotProductGround \x3d dot( normal, lVectorGround );", 
"float specularNormalization \x3d ( uShininess + 2.0001 ) / 8.0;", "vec3 schlickSky \x3d uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );", "vec3 schlickGround \x3d uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );", "hemiSpecular +\x3d hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );", 
"#else", "hemiSpecular +\x3d uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;", "#endif", "}", "#endif", "vec3 totalDiffuse \x3d vec3( 0.0 );", "vec3 totalSpecular \x3d vec3( 0.0 );", "#if MAX_DIR_LIGHTS \x3e 0", "totalDiffuse +\x3d dirDiffuse;", "totalSpecular +\x3d dirSpecular;", "#endif", "#if MAX_HEMI_LIGHTS \x3e 0", "totalDiffuse +\x3d hemiDiffuse;", "totalSpecular +\x3d hemiSpecular;", "#endif", "#if MAX_POINT_LIGHTS \x3e 0", "totalDiffuse +\x3d pointDiffuse;", 
"totalSpecular +\x3d pointSpecular;", "#endif", "#if MAX_SPOT_LIGHTS \x3e 0", "totalDiffuse +\x3d spotDiffuse;", "totalSpecular +\x3d spotSpecular;", "#endif", "#ifdef METAL", "gl_FragColor.xyz \x3d gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );", "#else", "gl_FragColor.xyz \x3d gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;", "#endif", "if ( enableReflection ) {", "vec3 vReflect;", "vec3 cameraToVertex \x3d normalize( vWorldPosition - cameraPosition );", 
"if ( useRefract ) {", "vReflect \x3d refract( cameraToVertex, normal, uRefractionRatio );", "} else {", "vReflect \x3d reflect( cameraToVertex, normal );", "}", "vec4 cubeColor \x3d textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );", "#ifdef GAMMA_INPUT", "cubeColor.xyz *\x3d cubeColor.xyz;", "#endif", "gl_FragColor.xyz \x3d mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );", "}", THREE.ShaderChunk["shadowmap_fragment"], THREE.ShaderChunk["linear_to_gamma_fragment"], THREE.ShaderChunk["fog_fragment"], 
"}"].join("\n"), vertexShader:["attribute vec4 tangent;", "uniform vec2 uOffset;", "uniform vec2 uRepeat;", "uniform bool enableDisplacement;", "#ifdef VERTEX_TEXTURES", "uniform sampler2D tDisplacement;", "uniform float uDisplacementScale;", "uniform float uDisplacementBias;", "#endif", "varying vec3 vTangent;", "varying vec3 vBinormal;", "varying vec3 vNormal;", "varying vec2 vUv;", "varying vec3 vWorldPosition;", "varying vec3 vViewPosition;", THREE.ShaderChunk["skinning_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], 
"void main() {", THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["skinnormal_vertex"], "#ifdef USE_SKINNING", "vNormal \x3d normalize( normalMatrix * skinnedNormal.xyz );", "vec4 skinnedTangent \x3d skinMatrix * vec4( tangent.xyz, 0.0 );", "vTangent \x3d normalize( normalMatrix * skinnedTangent.xyz );", "#else", "vNormal \x3d normalize( normalMatrix * normal );", "vTangent \x3d normalize( normalMatrix * tangent.xyz );", "#endif", "vBinormal \x3d normalize( cross( vNormal, vTangent ) * tangent.w );", 
"vUv \x3d uv * uRepeat + uOffset;", "vec3 displacedPosition;", "#ifdef VERTEX_TEXTURES", "if ( enableDisplacement ) {", "vec3 dv \x3d texture2D( tDisplacement, uv ).xyz;", "float df \x3d uDisplacementScale * dv.x + uDisplacementBias;", "displacedPosition \x3d position + normalize( normal ) * df;", "} else {", "#ifdef USE_SKINNING", "vec4 skinVertex \x3d vec4( position, 1.0 );", "vec4 skinned  \x3d boneMatX * skinVertex * skinWeight.x;", "skinned \t  +\x3d boneMatY * skinVertex * skinWeight.y;", "displacedPosition  \x3d skinned.xyz;", 
"#else", "displacedPosition \x3d position;", "#endif", "}", "#else", "#ifdef USE_SKINNING", "vec4 skinVertex \x3d vec4( position, 1.0 );", "vec4 skinned  \x3d boneMatX * skinVertex * skinWeight.x;", "skinned \t  +\x3d boneMatY * skinVertex * skinWeight.y;", "displacedPosition  \x3d skinned.xyz;", "#else", "displacedPosition \x3d position;", "#endif", "#endif", "vec4 mvPosition \x3d modelViewMatrix * vec4( displacedPosition, 1.0 );", "vec4 worldPosition \x3d modelMatrix * vec4( displacedPosition, 1.0 );", 
"gl_Position \x3d projectionMatrix * mvPosition;", "vWorldPosition \x3d worldPosition.xyz;", "vViewPosition \x3d -mvPosition.xyz;", "#ifdef USE_SHADOWMAP", "for( int i \x3d 0; i \x3c MAX_SHADOWS; i ++ ) {", "vShadowCoord[ i ] \x3d shadowMatrix[ i ] * worldPosition;", "}", "#endif", "}"].join("\n")}, "cube":{uniforms:{"tCube":{type:"t", value:null}, "tFlip":{type:"f", value:-1}}, vertexShader:["varying vec3 vWorldPosition;", "void main() {", "vec4 worldPosition \x3d modelMatrix * vec4( position, 1.0 );", 
"vWorldPosition \x3d worldPosition.xyz;", "gl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader:["uniform samplerCube tCube;", "uniform float tFlip;", "varying vec3 vWorldPosition;", "void main() {", "gl_FragColor \x3d textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );", "}"].join("\n")}, "depthRGBA":{uniforms:{}, vertexShader:[THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], 
"void main() {", THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], "}"].join("\n"), fragmentShader:["vec4 pack_depth( const in float depth ) {", "const vec4 bit_shift \x3d vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );", "const vec4 bit_mask  \x3d vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );", "vec4 res \x3d fract( depth * bit_shift );", "res -\x3d res.xxyz * bit_mask;", "return res;", 
"}", "void main() {", "gl_FragData[ 0 ] \x3d pack_depth( gl_FragCoord.z );", "}"].join("\n")}};
THREE.WebGLRenderer = function(parameters) {
  console.log("THREE.WebGLRenderer", THREE.REVISION);
  parameters = parameters || {};
  var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement("canvas"), _precision = parameters.precision !== undefined ? parameters.precision : "highp", _alpha = parameters.alpha !== undefined ? parameters.alpha : true, _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true, _antialias = parameters.antialias !== undefined ? parameters.antialias : false, _stencil = parameters.stencil !== undefined ? parameters.stencil : 
  true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false, _clearColor = parameters.clearColor !== undefined ? new THREE.Color(parameters.clearColor) : new THREE.Color(0), _clearAlpha = parameters.clearAlpha !== undefined ? parameters.clearAlpha : 0;
  this.domElement = _canvas;
  this.context = null;
  this.devicePixelRatio = parameters.devicePixelRatio !== undefined ? parameters.devicePixelRatio : window.devicePixelRatio !== undefined ? window.devicePixelRatio : 1;
  this.autoClear = true;
  this.autoClearColor = true;
  this.autoClearDepth = true;
  this.autoClearStencil = true;
  this.sortObjects = true;
  this.autoUpdateObjects = true;
  this.autoUpdateScene = true;
  this.gammaInput = false;
  this.gammaOutput = false;
  this.physicallyBasedShading = false;
  this.shadowMapEnabled = false;
  this.shadowMapAutoUpdate = true;
  this.shadowMapType = THREE.PCFShadowMap;
  this.shadowMapCullFace = THREE.CullFaceFront;
  this.shadowMapDebug = false;
  this.shadowMapCascade = false;
  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4;
  this.autoScaleCubemaps = true;
  this.renderPluginsPre = [];
  this.renderPluginsPost = [];
  this.info = {memory:{programs:0, geometries:0, textures:0}, render:{calls:0, vertices:0, faces:0, points:0}};
  var _this = this, _programs = [], _programs_counter = 0, _currentProgram = null, _currentFramebuffer = null, _currentMaterialId = -1, _currentGeometryGroupHash = null, _currentCamera = null, _geometryGroupCounter = 0, _usedTextureUnits = 0, _oldDoubleSided = -1, _oldFlipSided = -1, _oldBlending = -1, _oldBlendEquation = -1, _oldBlendSrc = -1, _oldBlendDst = -1, _oldDepthTest = -1, _oldDepthWrite = -1, _oldPolygonOffset = null, _oldPolygonOffsetFactor = null, _oldPolygonOffsetUnits = null, _oldLineWidth = 
  null, _viewportX = 0, _viewportY = 0, _viewportWidth = 0, _viewportHeight = 0, _currentWidth = 0, _currentHeight = 0, _enabledAttributes = {}, _frustum = new THREE.Frustum, _projScreenMatrix = new THREE.Matrix4, _projScreenMatrixPS = new THREE.Matrix4, _vector3 = new THREE.Vector3, _direction = new THREE.Vector3, _lightsNeedUpdate = true, _lights = {ambient:[0, 0, 0], directional:{length:0, colors:new Array, positions:new Array}, point:{length:0, colors:new Array, positions:new Array, distances:new Array}, 
  spot:{length:0, colors:new Array, positions:new Array, distances:new Array, directions:new Array, anglesCos:new Array, exponents:new Array}, hemi:{length:0, skyColors:new Array, groundColors:new Array, positions:new Array}};
  var _gl;
  var _glExtensionTextureFloat;
  var _glExtensionStandardDerivatives;
  var _glExtensionTextureFilterAnisotropic;
  var _glExtensionCompressedTextureS3TC;
  initGL();
  setDefaultGLState();
  this.context = _gl;
  var _maxTextures = _gl.getParameter(_gl.MAX_TEXTURE_IMAGE_UNITS);
  var _maxVertexTextures = _gl.getParameter(_gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  var _maxTextureSize = _gl.getParameter(_gl.MAX_TEXTURE_SIZE);
  var _maxCubemapSize = _gl.getParameter(_gl.MAX_CUBE_MAP_TEXTURE_SIZE);
  var _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter(_glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
  var _supportsVertexTextures = _maxVertexTextures > 0;
  var _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;
  var _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter(_gl.COMPRESSED_TEXTURE_FORMATS) : [];
  var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat(_gl.VERTEX_SHADER, _gl.HIGH_FLOAT);
  var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat(_gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT);
  var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat(_gl.VERTEX_SHADER, _gl.LOW_FLOAT);
  var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat(_gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT);
  var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat(_gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT);
  var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat(_gl.FRAGMENT_SHADER, _gl.LOW_FLOAT);
  var _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat(_gl.VERTEX_SHADER, _gl.HIGH_INT);
  var _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat(_gl.VERTEX_SHADER, _gl.MEDIUM_INT);
  var _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat(_gl.VERTEX_SHADER, _gl.LOW_INT);
  var _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat(_gl.FRAGMENT_SHADER, _gl.HIGH_INT);
  var _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat(_gl.FRAGMENT_SHADER, _gl.MEDIUM_INT);
  var _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat(_gl.FRAGMENT_SHADER, _gl.LOW_INT);
  var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;
  var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;
  if(_precision === "highp" && !highpAvailable) {
    if(mediumpAvailable) {
      _precision = "mediump";
      console.warn("WebGLRenderer: highp not supported, using mediump")
    }else {
      _precision = "lowp";
      console.warn("WebGLRenderer: highp and mediump not supported, using lowp")
    }
  }
  if(_precision === "mediump" && !mediumpAvailable) {
    _precision = "lowp";
    console.warn("WebGLRenderer: mediump not supported, using lowp")
  }
  this.getContext = function() {
    return _gl
  };
  this.supportsVertexTextures = function() {
    return _supportsVertexTextures
  };
  this.supportsFloatTextures = function() {
    return _glExtensionTextureFloat
  };
  this.supportsStandardDerivatives = function() {
    return _glExtensionStandardDerivatives
  };
  this.supportsCompressedTextureS3TC = function() {
    return _glExtensionCompressedTextureS3TC
  };
  this.getMaxAnisotropy = function() {
    return _maxAnisotropy
  };
  this.getPrecision = function() {
    return _precision
  };
  this.setSize = function(width, height) {
    _canvas.width = width * this.devicePixelRatio;
    _canvas.height = height * this.devicePixelRatio;
    _canvas.style.width = width + "px";
    _canvas.style.height = height + "px";
    this.setViewport(0, 0, _canvas.width, _canvas.height)
  };
  this.setViewport = function(x, y, width, height) {
    _viewportX = x !== undefined ? x : 0;
    _viewportY = y !== undefined ? y : 0;
    _viewportWidth = width !== undefined ? width : _canvas.width;
    _viewportHeight = height !== undefined ? height : _canvas.height;
    _gl.viewport(_viewportX, _viewportY, _viewportWidth, _viewportHeight)
  };
  this.setScissor = function(x, y, width, height) {
    _gl.scissor(x, y, width, height)
  };
  this.enableScissorTest = function(enable) {
    enable ? _gl.enable(_gl.SCISSOR_TEST) : _gl.disable(_gl.SCISSOR_TEST)
  };
  this.setClearColorHex = function(hex, alpha) {
    _clearColor.setHex(hex);
    _clearAlpha = alpha;
    _gl.clearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha)
  };
  this.setClearColor = function(color, alpha) {
    _clearColor.copy(color);
    _clearAlpha = alpha;
    _gl.clearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha)
  };
  this.getClearColor = function() {
    return _clearColor
  };
  this.getClearAlpha = function() {
    return _clearAlpha
  };
  this.clear = function(color, depth, stencil) {
    var bits = 0;
    if(color === undefined || color) {
      bits |= _gl.COLOR_BUFFER_BIT
    }
    if(depth === undefined || depth) {
      bits |= _gl.DEPTH_BUFFER_BIT
    }
    if(stencil === undefined || stencil) {
      bits |= _gl.STENCIL_BUFFER_BIT
    }
    _gl.clear(bits)
  };
  this.clearTarget = function(renderTarget, color, depth, stencil) {
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil)
  };
  this.addPostPlugin = function(plugin) {
    plugin.init(this);
    this.renderPluginsPost.push(plugin)
  };
  this.addPrePlugin = function(plugin) {
    plugin.init(this);
    this.renderPluginsPre.push(plugin)
  };
  this.updateShadowMap = function(scene, camera) {
    _currentProgram = null;
    _oldBlending = -1;
    _oldDepthTest = -1;
    _oldDepthWrite = -1;
    _currentGeometryGroupHash = -1;
    _currentMaterialId = -1;
    _lightsNeedUpdate = true;
    _oldDoubleSided = -1;
    _oldFlipSided = -1;
    this.shadowMapPlugin.update(scene, camera)
  };
  function createParticleBuffers(geometry) {
    geometry.__webglVertexBuffer = _gl.createBuffer();
    geometry.__webglColorBuffer = _gl.createBuffer();
    _this.info.memory.geometries++
  }
  function createLineBuffers(geometry) {
    geometry.__webglVertexBuffer = _gl.createBuffer();
    geometry.__webglColorBuffer = _gl.createBuffer();
    geometry.__webglLineDistanceBuffer = _gl.createBuffer();
    _this.info.memory.geometries++
  }
  function createRibbonBuffers(geometry) {
    geometry.__webglVertexBuffer = _gl.createBuffer();
    geometry.__webglColorBuffer = _gl.createBuffer();
    geometry.__webglNormalBuffer = _gl.createBuffer();
    _this.info.memory.geometries++
  }
  function createMeshBuffers(geometryGroup) {
    geometryGroup.__webglVertexBuffer = _gl.createBuffer();
    geometryGroup.__webglNormalBuffer = _gl.createBuffer();
    geometryGroup.__webglTangentBuffer = _gl.createBuffer();
    geometryGroup.__webglColorBuffer = _gl.createBuffer();
    geometryGroup.__webglUVBuffer = _gl.createBuffer();
    geometryGroup.__webglUV2Buffer = _gl.createBuffer();
    geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();
    geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();
    geometryGroup.__webglFaceBuffer = _gl.createBuffer();
    geometryGroup.__webglLineBuffer = _gl.createBuffer();
    var m, ml;
    if(geometryGroup.numMorphTargets) {
      geometryGroup.__webglMorphTargetsBuffers = [];
      for(m = 0, ml = geometryGroup.numMorphTargets;m < ml;m++) {
        geometryGroup.__webglMorphTargetsBuffers.push(_gl.createBuffer())
      }
    }
    if(geometryGroup.numMorphNormals) {
      geometryGroup.__webglMorphNormalsBuffers = [];
      for(m = 0, ml = geometryGroup.numMorphNormals;m < ml;m++) {
        geometryGroup.__webglMorphNormalsBuffers.push(_gl.createBuffer())
      }
    }
    _this.info.memory.geometries++
  }
  var onGeometryDispose = function(event) {
    var geometry = event.target;
    geometry.removeEventListener("dispose", onGeometryDispose);
    deallocateGeometry(geometry);
    _this.info.memory.geometries--
  };
  var onTextureDispose = function(event) {
    var texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    deallocateTexture(texture);
    _this.info.memory.textures--
  };
  var onRenderTargetDispose = function(event) {
    var renderTarget = event.target;
    renderTarget.removeEventListener("dispose", onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
    _this.info.memory.textures--
  };
  var onMaterialDispose = function(event) {
    var material = event.target;
    material.removeEventListener("dispose", onMaterialDispose);
    deallocateMaterial(material)
  };
  var deallocateGeometry = function(geometry) {
    geometry.__webglInit = undefined;
    if(geometry.__webglVertexBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglVertexBuffer)
    }
    if(geometry.__webglNormalBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglNormalBuffer)
    }
    if(geometry.__webglTangentBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglTangentBuffer)
    }
    if(geometry.__webglColorBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglColorBuffer)
    }
    if(geometry.__webglUVBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglUVBuffer)
    }
    if(geometry.__webglUV2Buffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglUV2Buffer)
    }
    if(geometry.__webglSkinIndicesBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglSkinIndicesBuffer)
    }
    if(geometry.__webglSkinWeightsBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglSkinWeightsBuffer)
    }
    if(geometry.__webglFaceBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglFaceBuffer)
    }
    if(geometry.__webglLineBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglLineBuffer)
    }
    if(geometry.__webglLineDistanceBuffer !== undefined) {
      _gl.deleteBuffer(geometry.__webglLineDistanceBuffer)
    }
    if(geometry.geometryGroups !== undefined) {
      for(var g in geometry.geometryGroups) {
        var geometryGroup = geometry.geometryGroups[g];
        if(geometryGroup.numMorphTargets !== undefined) {
          for(var m = 0, ml = geometryGroup.numMorphTargets;m < ml;m++) {
            _gl.deleteBuffer(geometryGroup.__webglMorphTargetsBuffers[m])
          }
        }
        if(geometryGroup.numMorphNormals !== undefined) {
          for(var m = 0, ml = geometryGroup.numMorphNormals;m < ml;m++) {
            _gl.deleteBuffer(geometryGroup.__webglMorphNormalsBuffers[m])
          }
        }
        deleteCustomAttributesBuffers(geometryGroup)
      }
    }
    deleteCustomAttributesBuffers(geometry)
  };
  var deallocateTexture = function(texture) {
    if(texture.image && texture.image.__webglTextureCube) {
      _gl.deleteTexture(texture.image.__webglTextureCube)
    }else {
      if(!texture.__webglInit) {
        return
      }
      texture.__webglInit = false;
      _gl.deleteTexture(texture.__webglTexture)
    }
  };
  var deallocateRenderTarget = function(renderTarget) {
    if(!renderTarget || !renderTarget.__webglTexture) {
      return
    }
    _gl.deleteTexture(renderTarget.__webglTexture);
    if(renderTarget instanceof THREE.WebGLRenderTargetCube) {
      for(var i = 0;i < 6;i++) {
        _gl.deleteFramebuffer(renderTarget.__webglFramebuffer[i]);
        _gl.deleteRenderbuffer(renderTarget.__webglRenderbuffer[i])
      }
    }else {
      _gl.deleteFramebuffer(renderTarget.__webglFramebuffer);
      _gl.deleteRenderbuffer(renderTarget.__webglRenderbuffer)
    }
  };
  var deallocateMaterial = function(material) {
    var program = material.program;
    if(program === undefined) {
      return
    }
    material.program = undefined;
    var i, il, programInfo;
    var deleteProgram = false;
    for(i = 0, il = _programs.length;i < il;i++) {
      programInfo = _programs[i];
      if(programInfo.program === program) {
        programInfo.usedTimes--;
        if(programInfo.usedTimes === 0) {
          deleteProgram = true
        }
        break
      }
    }
    if(deleteProgram === true) {
      var newPrograms = [];
      for(i = 0, il = _programs.length;i < il;i++) {
        programInfo = _programs[i];
        if(programInfo.program !== program) {
          newPrograms.push(programInfo)
        }
      }
      _programs = newPrograms;
      _gl.deleteProgram(program);
      _this.info.memory.programs--
    }
  };
  function deleteCustomAttributesBuffers(geometry) {
    if(geometry.__webglCustomAttributesList) {
      for(var id in geometry.__webglCustomAttributesList) {
        _gl.deleteBuffer(geometry.__webglCustomAttributesList[id].buffer)
      }
    }
  }
  function initCustomAttributes(geometry, object) {
    var nvertices = geometry.vertices.length;
    var material = object.material;
    if(material.attributes) {
      if(geometry.__webglCustomAttributesList === undefined) {
        geometry.__webglCustomAttributesList = []
      }
      for(var a in material.attributes) {
        var attribute = material.attributes[a];
        if(!attribute.__webglInitialized || attribute.createUniqueBuffers) {
          attribute.__webglInitialized = true;
          var size = 1;
          if(attribute.type === "v2") {
            size = 2
          }else {
            if(attribute.type === "v3") {
              size = 3
            }else {
              if(attribute.type === "v4") {
                size = 4
              }else {
                if(attribute.type === "c") {
                  size = 3
                }
              }
            }
          }
          attribute.size = size;
          attribute.array = new Float32Array(nvertices * size);
          attribute.buffer = _gl.createBuffer();
          attribute.buffer.belongsToAttribute = a;
          attribute.needsUpdate = true
        }
        geometry.__webglCustomAttributesList.push(attribute)
      }
    }
  }
  function initParticleBuffers(geometry, object) {
    var nvertices = geometry.vertices.length;
    geometry.__vertexArray = new Float32Array(nvertices * 3);
    geometry.__colorArray = new Float32Array(nvertices * 3);
    geometry.__sortArray = [];
    geometry.__webglParticleCount = nvertices;
    initCustomAttributes(geometry, object)
  }
  function initLineBuffers(geometry, object) {
    var nvertices = geometry.vertices.length;
    geometry.__vertexArray = new Float32Array(nvertices * 3);
    geometry.__colorArray = new Float32Array(nvertices * 3);
    geometry.__lineDistanceArray = new Float32Array(nvertices * 1);
    geometry.__webglLineCount = nvertices;
    initCustomAttributes(geometry, object)
  }
  function initRibbonBuffers(geometry, object) {
    var nvertices = geometry.vertices.length;
    geometry.__vertexArray = new Float32Array(nvertices * 3);
    geometry.__colorArray = new Float32Array(nvertices * 3);
    geometry.__normalArray = new Float32Array(nvertices * 3);
    geometry.__webglVertexCount = nvertices;
    initCustomAttributes(geometry, object)
  }
  function initMeshBuffers(geometryGroup, object) {
    var geometry = object.geometry, faces3 = geometryGroup.faces3, faces4 = geometryGroup.faces4, nvertices = faces3.length * 3 + faces4.length * 4, ntris = faces3.length * 1 + faces4.length * 2, nlines = faces3.length * 3 + faces4.length * 4, material = getBufferMaterial(object, geometryGroup), uvType = bufferGuessUVType(material), normalType = bufferGuessNormalType(material), vertexColorType = bufferGuessVertexColorType(material);
    geometryGroup.__vertexArray = new Float32Array(nvertices * 3);
    if(normalType) {
      geometryGroup.__normalArray = new Float32Array(nvertices * 3)
    }
    if(geometry.hasTangents) {
      geometryGroup.__tangentArray = new Float32Array(nvertices * 4)
    }
    if(vertexColorType) {
      geometryGroup.__colorArray = new Float32Array(nvertices * 3)
    }
    if(uvType) {
      if(geometry.faceUvs.length > 0 || geometry.faceVertexUvs.length > 0) {
        geometryGroup.__uvArray = new Float32Array(nvertices * 2)
      }
      if(geometry.faceUvs.length > 1 || geometry.faceVertexUvs.length > 1) {
        geometryGroup.__uv2Array = new Float32Array(nvertices * 2)
      }
    }
    if(object.geometry.skinWeights.length && object.geometry.skinIndices.length) {
      geometryGroup.__skinIndexArray = new Float32Array(nvertices * 4);
      geometryGroup.__skinWeightArray = new Float32Array(nvertices * 4)
    }
    geometryGroup.__faceArray = new Uint16Array(ntris * 3);
    geometryGroup.__lineArray = new Uint16Array(nlines * 2);
    var m, ml;
    if(geometryGroup.numMorphTargets) {
      geometryGroup.__morphTargetsArrays = [];
      for(m = 0, ml = geometryGroup.numMorphTargets;m < ml;m++) {
        geometryGroup.__morphTargetsArrays.push(new Float32Array(nvertices * 3))
      }
    }
    if(geometryGroup.numMorphNormals) {
      geometryGroup.__morphNormalsArrays = [];
      for(m = 0, ml = geometryGroup.numMorphNormals;m < ml;m++) {
        geometryGroup.__morphNormalsArrays.push(new Float32Array(nvertices * 3))
      }
    }
    geometryGroup.__webglFaceCount = ntris * 3;
    geometryGroup.__webglLineCount = nlines * 2;
    if(material.attributes) {
      if(geometryGroup.__webglCustomAttributesList === undefined) {
        geometryGroup.__webglCustomAttributesList = []
      }
      for(var a in material.attributes) {
        var originalAttribute = material.attributes[a];
        var attribute = {};
        for(var property in originalAttribute) {
          attribute[property] = originalAttribute[property]
        }
        if(!attribute.__webglInitialized || attribute.createUniqueBuffers) {
          attribute.__webglInitialized = true;
          var size = 1;
          if(attribute.type === "v2") {
            size = 2
          }else {
            if(attribute.type === "v3") {
              size = 3
            }else {
              if(attribute.type === "v4") {
                size = 4
              }else {
                if(attribute.type === "c") {
                  size = 3
                }
              }
            }
          }
          attribute.size = size;
          attribute.array = new Float32Array(nvertices * size);
          attribute.buffer = _gl.createBuffer();
          attribute.buffer.belongsToAttribute = a;
          originalAttribute.needsUpdate = true;
          attribute.__original = originalAttribute
        }
        geometryGroup.__webglCustomAttributesList.push(attribute)
      }
    }
    geometryGroup.__inittedArrays = true
  }
  function getBufferMaterial(object, geometryGroup) {
    return object.material instanceof THREE.MeshFaceMaterial ? object.material.materials[geometryGroup.materialIndex] : object.material
  }
  function materialNeedsSmoothNormals(material) {
    return material && material.shading !== undefined && material.shading === THREE.SmoothShading
  }
  function bufferGuessNormalType(material) {
    if(material instanceof THREE.MeshBasicMaterial && !material.envMap || material instanceof THREE.MeshDepthMaterial) {
      return false
    }
    if(materialNeedsSmoothNormals(material)) {
      return THREE.SmoothShading
    }else {
      return THREE.FlatShading
    }
  }
  function bufferGuessVertexColorType(material) {
    if(material.vertexColors) {
      return material.vertexColors
    }
    return false
  }
  function bufferGuessUVType(material) {
    if(material.map || material.lightMap || material.bumpMap || material.normalMap || material.specularMap || material instanceof THREE.ShaderMaterial) {
      return true
    }
    return false
  }
  function initDirectBuffers(geometry) {
    var a, attribute, type;
    for(a in geometry.attributes) {
      if(a === "index") {
        type = _gl.ELEMENT_ARRAY_BUFFER
      }else {
        type = _gl.ARRAY_BUFFER
      }
      attribute = geometry.attributes[a];
      attribute.buffer = _gl.createBuffer();
      _gl.bindBuffer(type, attribute.buffer);
      _gl.bufferData(type, attribute.array, _gl.STATIC_DRAW)
    }
  }
  function setParticleBuffers(geometry, hint, object) {
    var v, c, vertex, offset, index, color, vertices = geometry.vertices, vl = vertices.length, colors = geometry.colors, cl = colors.length, vertexArray = geometry.__vertexArray, colorArray = geometry.__colorArray, sortArray = geometry.__sortArray, dirtyVertices = geometry.verticesNeedUpdate, dirtyElements = geometry.elementsNeedUpdate, dirtyColors = geometry.colorsNeedUpdate, customAttributes = geometry.__webglCustomAttributesList, i, il, a, ca, cal, value, customAttribute;
    if(object.sortParticles) {
      _projScreenMatrixPS.copy(_projScreenMatrix);
      _projScreenMatrixPS.multiply(object.matrixWorld);
      for(v = 0;v < vl;v++) {
        vertex = vertices[v];
        _vector3.copy(vertex);
        _vector3.applyProjection(_projScreenMatrixPS);
        sortArray[v] = [_vector3.z, v]
      }
      sortArray.sort(numericalSort);
      for(v = 0;v < vl;v++) {
        vertex = vertices[sortArray[v][1]];
        offset = v * 3;
        vertexArray[offset] = vertex.x;
        vertexArray[offset + 1] = vertex.y;
        vertexArray[offset + 2] = vertex.z
      }
      for(c = 0;c < cl;c++) {
        offset = c * 3;
        color = colors[sortArray[c][1]];
        colorArray[offset] = color.r;
        colorArray[offset + 1] = color.g;
        colorArray[offset + 2] = color.b
      }
      if(customAttributes) {
        for(i = 0, il = customAttributes.length;i < il;i++) {
          customAttribute = customAttributes[i];
          if(!(customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices")) {
            continue
          }
          offset = 0;
          cal = customAttribute.value.length;
          if(customAttribute.size === 1) {
            for(ca = 0;ca < cal;ca++) {
              index = sortArray[ca][1];
              customAttribute.array[ca] = customAttribute.value[index]
            }
          }else {
            if(customAttribute.size === 2) {
              for(ca = 0;ca < cal;ca++) {
                index = sortArray[ca][1];
                value = customAttribute.value[index];
                customAttribute.array[offset] = value.x;
                customAttribute.array[offset + 1] = value.y;
                offset += 2
              }
            }else {
              if(customAttribute.size === 3) {
                if(customAttribute.type === "c") {
                  for(ca = 0;ca < cal;ca++) {
                    index = sortArray[ca][1];
                    value = customAttribute.value[index];
                    customAttribute.array[offset] = value.r;
                    customAttribute.array[offset + 1] = value.g;
                    customAttribute.array[offset + 2] = value.b;
                    offset += 3
                  }
                }else {
                  for(ca = 0;ca < cal;ca++) {
                    index = sortArray[ca][1];
                    value = customAttribute.value[index];
                    customAttribute.array[offset] = value.x;
                    customAttribute.array[offset + 1] = value.y;
                    customAttribute.array[offset + 2] = value.z;
                    offset += 3
                  }
                }
              }else {
                if(customAttribute.size === 4) {
                  for(ca = 0;ca < cal;ca++) {
                    index = sortArray[ca][1];
                    value = customAttribute.value[index];
                    customAttribute.array[offset] = value.x;
                    customAttribute.array[offset + 1] = value.y;
                    customAttribute.array[offset + 2] = value.z;
                    customAttribute.array[offset + 3] = value.w;
                    offset += 4
                  }
                }
              }
            }
          }
        }
      }
    }else {
      if(dirtyVertices) {
        for(v = 0;v < vl;v++) {
          vertex = vertices[v];
          offset = v * 3;
          vertexArray[offset] = vertex.x;
          vertexArray[offset + 1] = vertex.y;
          vertexArray[offset + 2] = vertex.z
        }
      }
      if(dirtyColors) {
        for(c = 0;c < cl;c++) {
          color = colors[c];
          offset = c * 3;
          colorArray[offset] = color.r;
          colorArray[offset + 1] = color.g;
          colorArray[offset + 2] = color.b
        }
      }
      if(customAttributes) {
        for(i = 0, il = customAttributes.length;i < il;i++) {
          customAttribute = customAttributes[i];
          if(customAttribute.needsUpdate && (customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices")) {
            cal = customAttribute.value.length;
            offset = 0;
            if(customAttribute.size === 1) {
              for(ca = 0;ca < cal;ca++) {
                customAttribute.array[ca] = customAttribute.value[ca]
              }
            }else {
              if(customAttribute.size === 2) {
                for(ca = 0;ca < cal;ca++) {
                  value = customAttribute.value[ca];
                  customAttribute.array[offset] = value.x;
                  customAttribute.array[offset + 1] = value.y;
                  offset += 2
                }
              }else {
                if(customAttribute.size === 3) {
                  if(customAttribute.type === "c") {
                    for(ca = 0;ca < cal;ca++) {
                      value = customAttribute.value[ca];
                      customAttribute.array[offset] = value.r;
                      customAttribute.array[offset + 1] = value.g;
                      customAttribute.array[offset + 2] = value.b;
                      offset += 3
                    }
                  }else {
                    for(ca = 0;ca < cal;ca++) {
                      value = customAttribute.value[ca];
                      customAttribute.array[offset] = value.x;
                      customAttribute.array[offset + 1] = value.y;
                      customAttribute.array[offset + 2] = value.z;
                      offset += 3
                    }
                  }
                }else {
                  if(customAttribute.size === 4) {
                    for(ca = 0;ca < cal;ca++) {
                      value = customAttribute.value[ca];
                      customAttribute.array[offset] = value.x;
                      customAttribute.array[offset + 1] = value.y;
                      customAttribute.array[offset + 2] = value.z;
                      customAttribute.array[offset + 3] = value.w;
                      offset += 4
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if(dirtyVertices || object.sortParticles) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglVertexBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, vertexArray, hint)
    }
    if(dirtyColors || object.sortParticles) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglColorBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, colorArray, hint)
    }
    if(customAttributes) {
      for(i = 0, il = customAttributes.length;i < il;i++) {
        customAttribute = customAttributes[i];
        if(customAttribute.needsUpdate || object.sortParticles) {
          _gl.bindBuffer(_gl.ARRAY_BUFFER, customAttribute.buffer);
          _gl.bufferData(_gl.ARRAY_BUFFER, customAttribute.array, hint)
        }
      }
    }
  }
  function setLineBuffers(geometry, hint) {
    var v, c, d, vertex, offset, color, vertices = geometry.vertices, colors = geometry.colors, lineDistances = geometry.lineDistances, vl = vertices.length, cl = colors.length, dl = lineDistances.length, vertexArray = geometry.__vertexArray, colorArray = geometry.__colorArray, lineDistanceArray = geometry.__lineDistanceArray, dirtyVertices = geometry.verticesNeedUpdate, dirtyColors = geometry.colorsNeedUpdate, dirtyLineDistances = geometry.lineDistancesNeedUpdate, customAttributes = geometry.__webglCustomAttributesList, 
    i, il, a, ca, cal, value, customAttribute;
    if(dirtyVertices) {
      for(v = 0;v < vl;v++) {
        vertex = vertices[v];
        offset = v * 3;
        vertexArray[offset] = vertex.x;
        vertexArray[offset + 1] = vertex.y;
        vertexArray[offset + 2] = vertex.z
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglVertexBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, vertexArray, hint)
    }
    if(dirtyColors) {
      for(c = 0;c < cl;c++) {
        color = colors[c];
        offset = c * 3;
        colorArray[offset] = color.r;
        colorArray[offset + 1] = color.g;
        colorArray[offset + 2] = color.b
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglColorBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, colorArray, hint)
    }
    if(dirtyLineDistances) {
      for(d = 0;d < dl;d++) {
        lineDistanceArray[d] = lineDistances[d]
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, lineDistanceArray, hint)
    }
    if(customAttributes) {
      for(i = 0, il = customAttributes.length;i < il;i++) {
        customAttribute = customAttributes[i];
        if(customAttribute.needsUpdate && (customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices")) {
          offset = 0;
          cal = customAttribute.value.length;
          if(customAttribute.size === 1) {
            for(ca = 0;ca < cal;ca++) {
              customAttribute.array[ca] = customAttribute.value[ca]
            }
          }else {
            if(customAttribute.size === 2) {
              for(ca = 0;ca < cal;ca++) {
                value = customAttribute.value[ca];
                customAttribute.array[offset] = value.x;
                customAttribute.array[offset + 1] = value.y;
                offset += 2
              }
            }else {
              if(customAttribute.size === 3) {
                if(customAttribute.type === "c") {
                  for(ca = 0;ca < cal;ca++) {
                    value = customAttribute.value[ca];
                    customAttribute.array[offset] = value.r;
                    customAttribute.array[offset + 1] = value.g;
                    customAttribute.array[offset + 2] = value.b;
                    offset += 3
                  }
                }else {
                  for(ca = 0;ca < cal;ca++) {
                    value = customAttribute.value[ca];
                    customAttribute.array[offset] = value.x;
                    customAttribute.array[offset + 1] = value.y;
                    customAttribute.array[offset + 2] = value.z;
                    offset += 3
                  }
                }
              }else {
                if(customAttribute.size === 4) {
                  for(ca = 0;ca < cal;ca++) {
                    value = customAttribute.value[ca];
                    customAttribute.array[offset] = value.x;
                    customAttribute.array[offset + 1] = value.y;
                    customAttribute.array[offset + 2] = value.z;
                    customAttribute.array[offset + 3] = value.w;
                    offset += 4
                  }
                }
              }
            }
          }
          _gl.bindBuffer(_gl.ARRAY_BUFFER, customAttribute.buffer);
          _gl.bufferData(_gl.ARRAY_BUFFER, customAttribute.array, hint)
        }
      }
    }
  }
  function setRibbonBuffers(geometry, hint) {
    var v, c, n, vertex, offset, color, normal, i, il, ca, cal, customAttribute, value, vertices = geometry.vertices, colors = geometry.colors, normals = geometry.normals, vl = vertices.length, cl = colors.length, nl = normals.length, vertexArray = geometry.__vertexArray, colorArray = geometry.__colorArray, normalArray = geometry.__normalArray, dirtyVertices = geometry.verticesNeedUpdate, dirtyColors = geometry.colorsNeedUpdate, dirtyNormals = geometry.normalsNeedUpdate, customAttributes = geometry.__webglCustomAttributesList;
    if(dirtyVertices) {
      for(v = 0;v < vl;v++) {
        vertex = vertices[v];
        offset = v * 3;
        vertexArray[offset] = vertex.x;
        vertexArray[offset + 1] = vertex.y;
        vertexArray[offset + 2] = vertex.z
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglVertexBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, vertexArray, hint)
    }
    if(dirtyColors) {
      for(c = 0;c < cl;c++) {
        color = colors[c];
        offset = c * 3;
        colorArray[offset] = color.r;
        colorArray[offset + 1] = color.g;
        colorArray[offset + 2] = color.b
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglColorBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, colorArray, hint)
    }
    if(dirtyNormals) {
      for(n = 0;n < nl;n++) {
        normal = normals[n];
        offset = n * 3;
        normalArray[offset] = normal.x;
        normalArray[offset + 1] = normal.y;
        normalArray[offset + 2] = normal.z
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometry.__webglNormalBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, normalArray, hint)
    }
    if(customAttributes) {
      for(i = 0, il = customAttributes.length;i < il;i++) {
        customAttribute = customAttributes[i];
        if(customAttribute.needsUpdate && (customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices")) {
          offset = 0;
          cal = customAttribute.value.length;
          if(customAttribute.size === 1) {
            for(ca = 0;ca < cal;ca++) {
              customAttribute.array[ca] = customAttribute.value[ca]
            }
          }else {
            if(customAttribute.size === 2) {
              for(ca = 0;ca < cal;ca++) {
                value = customAttribute.value[ca];
                customAttribute.array[offset] = value.x;
                customAttribute.array[offset + 1] = value.y;
                offset += 2
              }
            }else {
              if(customAttribute.size === 3) {
                if(customAttribute.type === "c") {
                  for(ca = 0;ca < cal;ca++) {
                    value = customAttribute.value[ca];
                    customAttribute.array[offset] = value.r;
                    customAttribute.array[offset + 1] = value.g;
                    customAttribute.array[offset + 2] = value.b;
                    offset += 3
                  }
                }else {
                  for(ca = 0;ca < cal;ca++) {
                    value = customAttribute.value[ca];
                    customAttribute.array[offset] = value.x;
                    customAttribute.array[offset + 1] = value.y;
                    customAttribute.array[offset + 2] = value.z;
                    offset += 3
                  }
                }
              }else {
                if(customAttribute.size === 4) {
                  for(ca = 0;ca < cal;ca++) {
                    value = customAttribute.value[ca];
                    customAttribute.array[offset] = value.x;
                    customAttribute.array[offset + 1] = value.y;
                    customAttribute.array[offset + 2] = value.z;
                    customAttribute.array[offset + 3] = value.w;
                    offset += 4
                  }
                }
              }
            }
          }
          _gl.bindBuffer(_gl.ARRAY_BUFFER, customAttribute.buffer);
          _gl.bufferData(_gl.ARRAY_BUFFER, customAttribute.array, hint)
        }
      }
    }
  }
  function setMeshBuffers(geometryGroup, object, hint, dispose, material) {
    if(!geometryGroup.__inittedArrays) {
      return
    }
    var normalType = bufferGuessNormalType(material), vertexColorType = bufferGuessVertexColorType(material), uvType = bufferGuessUVType(material), needsSmoothNormals = normalType === THREE.SmoothShading;
    var f, fl, fi, face, vertexNormals, faceNormal, normal, vertexColors, faceColor, vertexTangents, uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4, c1, c2, c3, c4, sw1, sw2, sw3, sw4, si1, si2, si3, si4, sa1, sa2, sa3, sa4, sb1, sb2, sb3, sb4, m, ml, i, il, vn, uvi, uv2i, vk, vkl, vka, nka, chf, faceVertexNormals, a, vertexIndex = 0, offset = 0, offset_uv = 0, offset_uv2 = 0, offset_face = 0, offset_normal = 0, offset_tangent = 0, offset_line = 0, offset_color = 0, offset_skin = 0, offset_morphTarget = 
    0, offset_custom = 0, offset_customSrc = 0, value, vertexArray = geometryGroup.__vertexArray, uvArray = geometryGroup.__uvArray, uv2Array = geometryGroup.__uv2Array, normalArray = geometryGroup.__normalArray, tangentArray = geometryGroup.__tangentArray, colorArray = geometryGroup.__colorArray, skinIndexArray = geometryGroup.__skinIndexArray, skinWeightArray = geometryGroup.__skinWeightArray, morphTargetsArrays = geometryGroup.__morphTargetsArrays, morphNormalsArrays = geometryGroup.__morphNormalsArrays, 
    customAttributes = geometryGroup.__webglCustomAttributesList, customAttribute, faceArray = geometryGroup.__faceArray, lineArray = geometryGroup.__lineArray, geometry = object.geometry, dirtyVertices = geometry.verticesNeedUpdate, dirtyElements = geometry.elementsNeedUpdate, dirtyUvs = geometry.uvsNeedUpdate, dirtyNormals = geometry.normalsNeedUpdate, dirtyTangents = geometry.tangentsNeedUpdate, dirtyColors = geometry.colorsNeedUpdate, dirtyMorphTargets = geometry.morphTargetsNeedUpdate, vertices = 
    geometry.vertices, chunk_faces3 = geometryGroup.faces3, chunk_faces4 = geometryGroup.faces4, obj_faces = geometry.faces, obj_uvs = geometry.faceVertexUvs[0], obj_uvs2 = geometry.faceVertexUvs[1], obj_colors = geometry.colors, obj_skinIndices = geometry.skinIndices, obj_skinWeights = geometry.skinWeights, morphTargets = geometry.morphTargets, morphNormals = geometry.morphNormals;
    if(dirtyVertices) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        face = obj_faces[chunk_faces3[f]];
        v1 = vertices[face.a];
        v2 = vertices[face.b];
        v3 = vertices[face.c];
        vertexArray[offset] = v1.x;
        vertexArray[offset + 1] = v1.y;
        vertexArray[offset + 2] = v1.z;
        vertexArray[offset + 3] = v2.x;
        vertexArray[offset + 4] = v2.y;
        vertexArray[offset + 5] = v2.z;
        vertexArray[offset + 6] = v3.x;
        vertexArray[offset + 7] = v3.y;
        vertexArray[offset + 8] = v3.z;
        offset += 9
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        face = obj_faces[chunk_faces4[f]];
        v1 = vertices[face.a];
        v2 = vertices[face.b];
        v3 = vertices[face.c];
        v4 = vertices[face.d];
        vertexArray[offset] = v1.x;
        vertexArray[offset + 1] = v1.y;
        vertexArray[offset + 2] = v1.z;
        vertexArray[offset + 3] = v2.x;
        vertexArray[offset + 4] = v2.y;
        vertexArray[offset + 5] = v2.z;
        vertexArray[offset + 6] = v3.x;
        vertexArray[offset + 7] = v3.y;
        vertexArray[offset + 8] = v3.z;
        vertexArray[offset + 9] = v4.x;
        vertexArray[offset + 10] = v4.y;
        vertexArray[offset + 11] = v4.z;
        offset += 12
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, vertexArray, hint)
    }
    if(dirtyMorphTargets) {
      for(vk = 0, vkl = morphTargets.length;vk < vkl;vk++) {
        offset_morphTarget = 0;
        for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
          chf = chunk_faces3[f];
          face = obj_faces[chf];
          v1 = morphTargets[vk].vertices[face.a];
          v2 = morphTargets[vk].vertices[face.b];
          v3 = morphTargets[vk].vertices[face.c];
          vka = morphTargetsArrays[vk];
          vka[offset_morphTarget] = v1.x;
          vka[offset_morphTarget + 1] = v1.y;
          vka[offset_morphTarget + 2] = v1.z;
          vka[offset_morphTarget + 3] = v2.x;
          vka[offset_morphTarget + 4] = v2.y;
          vka[offset_morphTarget + 5] = v2.z;
          vka[offset_morphTarget + 6] = v3.x;
          vka[offset_morphTarget + 7] = v3.y;
          vka[offset_morphTarget + 8] = v3.z;
          if(material.morphNormals) {
            if(needsSmoothNormals) {
              faceVertexNormals = morphNormals[vk].vertexNormals[chf];
              n1 = faceVertexNormals.a;
              n2 = faceVertexNormals.b;
              n3 = faceVertexNormals.c
            }else {
              n1 = morphNormals[vk].faceNormals[chf];
              n2 = n1;
              n3 = n1
            }
            nka = morphNormalsArrays[vk];
            nka[offset_morphTarget] = n1.x;
            nka[offset_morphTarget + 1] = n1.y;
            nka[offset_morphTarget + 2] = n1.z;
            nka[offset_morphTarget + 3] = n2.x;
            nka[offset_morphTarget + 4] = n2.y;
            nka[offset_morphTarget + 5] = n2.z;
            nka[offset_morphTarget + 6] = n3.x;
            nka[offset_morphTarget + 7] = n3.y;
            nka[offset_morphTarget + 8] = n3.z
          }
          offset_morphTarget += 9
        }
        for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
          chf = chunk_faces4[f];
          face = obj_faces[chf];
          v1 = morphTargets[vk].vertices[face.a];
          v2 = morphTargets[vk].vertices[face.b];
          v3 = morphTargets[vk].vertices[face.c];
          v4 = morphTargets[vk].vertices[face.d];
          vka = morphTargetsArrays[vk];
          vka[offset_morphTarget] = v1.x;
          vka[offset_morphTarget + 1] = v1.y;
          vka[offset_morphTarget + 2] = v1.z;
          vka[offset_morphTarget + 3] = v2.x;
          vka[offset_morphTarget + 4] = v2.y;
          vka[offset_morphTarget + 5] = v2.z;
          vka[offset_morphTarget + 6] = v3.x;
          vka[offset_morphTarget + 7] = v3.y;
          vka[offset_morphTarget + 8] = v3.z;
          vka[offset_morphTarget + 9] = v4.x;
          vka[offset_morphTarget + 10] = v4.y;
          vka[offset_morphTarget + 11] = v4.z;
          if(material.morphNormals) {
            if(needsSmoothNormals) {
              faceVertexNormals = morphNormals[vk].vertexNormals[chf];
              n1 = faceVertexNormals.a;
              n2 = faceVertexNormals.b;
              n3 = faceVertexNormals.c;
              n4 = faceVertexNormals.d
            }else {
              n1 = morphNormals[vk].faceNormals[chf];
              n2 = n1;
              n3 = n1;
              n4 = n1
            }
            nka = morphNormalsArrays[vk];
            nka[offset_morphTarget] = n1.x;
            nka[offset_morphTarget + 1] = n1.y;
            nka[offset_morphTarget + 2] = n1.z;
            nka[offset_morphTarget + 3] = n2.x;
            nka[offset_morphTarget + 4] = n2.y;
            nka[offset_morphTarget + 5] = n2.z;
            nka[offset_morphTarget + 6] = n3.x;
            nka[offset_morphTarget + 7] = n3.y;
            nka[offset_morphTarget + 8] = n3.z;
            nka[offset_morphTarget + 9] = n4.x;
            nka[offset_morphTarget + 10] = n4.y;
            nka[offset_morphTarget + 11] = n4.z
          }
          offset_morphTarget += 12
        }
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[vk]);
        _gl.bufferData(_gl.ARRAY_BUFFER, morphTargetsArrays[vk], hint);
        if(material.morphNormals) {
          _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[vk]);
          _gl.bufferData(_gl.ARRAY_BUFFER, morphNormalsArrays[vk], hint)
        }
      }
    }
    if(obj_skinWeights.length) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        face = obj_faces[chunk_faces3[f]];
        sw1 = obj_skinWeights[face.a];
        sw2 = obj_skinWeights[face.b];
        sw3 = obj_skinWeights[face.c];
        skinWeightArray[offset_skin] = sw1.x;
        skinWeightArray[offset_skin + 1] = sw1.y;
        skinWeightArray[offset_skin + 2] = sw1.z;
        skinWeightArray[offset_skin + 3] = sw1.w;
        skinWeightArray[offset_skin + 4] = sw2.x;
        skinWeightArray[offset_skin + 5] = sw2.y;
        skinWeightArray[offset_skin + 6] = sw2.z;
        skinWeightArray[offset_skin + 7] = sw2.w;
        skinWeightArray[offset_skin + 8] = sw3.x;
        skinWeightArray[offset_skin + 9] = sw3.y;
        skinWeightArray[offset_skin + 10] = sw3.z;
        skinWeightArray[offset_skin + 11] = sw3.w;
        si1 = obj_skinIndices[face.a];
        si2 = obj_skinIndices[face.b];
        si3 = obj_skinIndices[face.c];
        skinIndexArray[offset_skin] = si1.x;
        skinIndexArray[offset_skin + 1] = si1.y;
        skinIndexArray[offset_skin + 2] = si1.z;
        skinIndexArray[offset_skin + 3] = si1.w;
        skinIndexArray[offset_skin + 4] = si2.x;
        skinIndexArray[offset_skin + 5] = si2.y;
        skinIndexArray[offset_skin + 6] = si2.z;
        skinIndexArray[offset_skin + 7] = si2.w;
        skinIndexArray[offset_skin + 8] = si3.x;
        skinIndexArray[offset_skin + 9] = si3.y;
        skinIndexArray[offset_skin + 10] = si3.z;
        skinIndexArray[offset_skin + 11] = si3.w;
        offset_skin += 12
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        face = obj_faces[chunk_faces4[f]];
        sw1 = obj_skinWeights[face.a];
        sw2 = obj_skinWeights[face.b];
        sw3 = obj_skinWeights[face.c];
        sw4 = obj_skinWeights[face.d];
        skinWeightArray[offset_skin] = sw1.x;
        skinWeightArray[offset_skin + 1] = sw1.y;
        skinWeightArray[offset_skin + 2] = sw1.z;
        skinWeightArray[offset_skin + 3] = sw1.w;
        skinWeightArray[offset_skin + 4] = sw2.x;
        skinWeightArray[offset_skin + 5] = sw2.y;
        skinWeightArray[offset_skin + 6] = sw2.z;
        skinWeightArray[offset_skin + 7] = sw2.w;
        skinWeightArray[offset_skin + 8] = sw3.x;
        skinWeightArray[offset_skin + 9] = sw3.y;
        skinWeightArray[offset_skin + 10] = sw3.z;
        skinWeightArray[offset_skin + 11] = sw3.w;
        skinWeightArray[offset_skin + 12] = sw4.x;
        skinWeightArray[offset_skin + 13] = sw4.y;
        skinWeightArray[offset_skin + 14] = sw4.z;
        skinWeightArray[offset_skin + 15] = sw4.w;
        si1 = obj_skinIndices[face.a];
        si2 = obj_skinIndices[face.b];
        si3 = obj_skinIndices[face.c];
        si4 = obj_skinIndices[face.d];
        skinIndexArray[offset_skin] = si1.x;
        skinIndexArray[offset_skin + 1] = si1.y;
        skinIndexArray[offset_skin + 2] = si1.z;
        skinIndexArray[offset_skin + 3] = si1.w;
        skinIndexArray[offset_skin + 4] = si2.x;
        skinIndexArray[offset_skin + 5] = si2.y;
        skinIndexArray[offset_skin + 6] = si2.z;
        skinIndexArray[offset_skin + 7] = si2.w;
        skinIndexArray[offset_skin + 8] = si3.x;
        skinIndexArray[offset_skin + 9] = si3.y;
        skinIndexArray[offset_skin + 10] = si3.z;
        skinIndexArray[offset_skin + 11] = si3.w;
        skinIndexArray[offset_skin + 12] = si4.x;
        skinIndexArray[offset_skin + 13] = si4.y;
        skinIndexArray[offset_skin + 14] = si4.z;
        skinIndexArray[offset_skin + 15] = si4.w;
        offset_skin += 16
      }
      if(offset_skin > 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer);
        _gl.bufferData(_gl.ARRAY_BUFFER, skinIndexArray, hint);
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer);
        _gl.bufferData(_gl.ARRAY_BUFFER, skinWeightArray, hint)
      }
    }
    if(dirtyColors && vertexColorType) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        face = obj_faces[chunk_faces3[f]];
        vertexColors = face.vertexColors;
        faceColor = face.color;
        if(vertexColors.length === 3 && vertexColorType === THREE.VertexColors) {
          c1 = vertexColors[0];
          c2 = vertexColors[1];
          c3 = vertexColors[2]
        }else {
          c1 = faceColor;
          c2 = faceColor;
          c3 = faceColor
        }
        colorArray[offset_color] = c1.r;
        colorArray[offset_color + 1] = c1.g;
        colorArray[offset_color + 2] = c1.b;
        colorArray[offset_color + 3] = c2.r;
        colorArray[offset_color + 4] = c2.g;
        colorArray[offset_color + 5] = c2.b;
        colorArray[offset_color + 6] = c3.r;
        colorArray[offset_color + 7] = c3.g;
        colorArray[offset_color + 8] = c3.b;
        offset_color += 9
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        face = obj_faces[chunk_faces4[f]];
        vertexColors = face.vertexColors;
        faceColor = face.color;
        if(vertexColors.length === 4 && vertexColorType === THREE.VertexColors) {
          c1 = vertexColors[0];
          c2 = vertexColors[1];
          c3 = vertexColors[2];
          c4 = vertexColors[3]
        }else {
          c1 = faceColor;
          c2 = faceColor;
          c3 = faceColor;
          c4 = faceColor
        }
        colorArray[offset_color] = c1.r;
        colorArray[offset_color + 1] = c1.g;
        colorArray[offset_color + 2] = c1.b;
        colorArray[offset_color + 3] = c2.r;
        colorArray[offset_color + 4] = c2.g;
        colorArray[offset_color + 5] = c2.b;
        colorArray[offset_color + 6] = c3.r;
        colorArray[offset_color + 7] = c3.g;
        colorArray[offset_color + 8] = c3.b;
        colorArray[offset_color + 9] = c4.r;
        colorArray[offset_color + 10] = c4.g;
        colorArray[offset_color + 11] = c4.b;
        offset_color += 12
      }
      if(offset_color > 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer);
        _gl.bufferData(_gl.ARRAY_BUFFER, colorArray, hint)
      }
    }
    if(dirtyTangents && geometry.hasTangents) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        face = obj_faces[chunk_faces3[f]];
        vertexTangents = face.vertexTangents;
        t1 = vertexTangents[0];
        t2 = vertexTangents[1];
        t3 = vertexTangents[2];
        tangentArray[offset_tangent] = t1.x;
        tangentArray[offset_tangent + 1] = t1.y;
        tangentArray[offset_tangent + 2] = t1.z;
        tangentArray[offset_tangent + 3] = t1.w;
        tangentArray[offset_tangent + 4] = t2.x;
        tangentArray[offset_tangent + 5] = t2.y;
        tangentArray[offset_tangent + 6] = t2.z;
        tangentArray[offset_tangent + 7] = t2.w;
        tangentArray[offset_tangent + 8] = t3.x;
        tangentArray[offset_tangent + 9] = t3.y;
        tangentArray[offset_tangent + 10] = t3.z;
        tangentArray[offset_tangent + 11] = t3.w;
        offset_tangent += 12
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        face = obj_faces[chunk_faces4[f]];
        vertexTangents = face.vertexTangents;
        t1 = vertexTangents[0];
        t2 = vertexTangents[1];
        t3 = vertexTangents[2];
        t4 = vertexTangents[3];
        tangentArray[offset_tangent] = t1.x;
        tangentArray[offset_tangent + 1] = t1.y;
        tangentArray[offset_tangent + 2] = t1.z;
        tangentArray[offset_tangent + 3] = t1.w;
        tangentArray[offset_tangent + 4] = t2.x;
        tangentArray[offset_tangent + 5] = t2.y;
        tangentArray[offset_tangent + 6] = t2.z;
        tangentArray[offset_tangent + 7] = t2.w;
        tangentArray[offset_tangent + 8] = t3.x;
        tangentArray[offset_tangent + 9] = t3.y;
        tangentArray[offset_tangent + 10] = t3.z;
        tangentArray[offset_tangent + 11] = t3.w;
        tangentArray[offset_tangent + 12] = t4.x;
        tangentArray[offset_tangent + 13] = t4.y;
        tangentArray[offset_tangent + 14] = t4.z;
        tangentArray[offset_tangent + 15] = t4.w;
        offset_tangent += 16
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, tangentArray, hint)
    }
    if(dirtyNormals && normalType) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        face = obj_faces[chunk_faces3[f]];
        vertexNormals = face.vertexNormals;
        faceNormal = face.normal;
        if(vertexNormals.length === 3 && needsSmoothNormals) {
          for(i = 0;i < 3;i++) {
            vn = vertexNormals[i];
            normalArray[offset_normal] = vn.x;
            normalArray[offset_normal + 1] = vn.y;
            normalArray[offset_normal + 2] = vn.z;
            offset_normal += 3
          }
        }else {
          for(i = 0;i < 3;i++) {
            normalArray[offset_normal] = faceNormal.x;
            normalArray[offset_normal + 1] = faceNormal.y;
            normalArray[offset_normal + 2] = faceNormal.z;
            offset_normal += 3
          }
        }
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        face = obj_faces[chunk_faces4[f]];
        vertexNormals = face.vertexNormals;
        faceNormal = face.normal;
        if(vertexNormals.length === 4 && needsSmoothNormals) {
          for(i = 0;i < 4;i++) {
            vn = vertexNormals[i];
            normalArray[offset_normal] = vn.x;
            normalArray[offset_normal + 1] = vn.y;
            normalArray[offset_normal + 2] = vn.z;
            offset_normal += 3
          }
        }else {
          for(i = 0;i < 4;i++) {
            normalArray[offset_normal] = faceNormal.x;
            normalArray[offset_normal + 1] = faceNormal.y;
            normalArray[offset_normal + 2] = faceNormal.z;
            offset_normal += 3
          }
        }
      }
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, normalArray, hint)
    }
    if(dirtyUvs && obj_uvs && uvType) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        fi = chunk_faces3[f];
        uv = obj_uvs[fi];
        if(uv === undefined) {
          continue
        }
        for(i = 0;i < 3;i++) {
          uvi = uv[i];
          uvArray[offset_uv] = uvi.x;
          uvArray[offset_uv + 1] = uvi.y;
          offset_uv += 2
        }
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        fi = chunk_faces4[f];
        uv = obj_uvs[fi];
        if(uv === undefined) {
          continue
        }
        for(i = 0;i < 4;i++) {
          uvi = uv[i];
          uvArray[offset_uv] = uvi.x;
          uvArray[offset_uv + 1] = uvi.y;
          offset_uv += 2
        }
      }
      if(offset_uv > 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer);
        _gl.bufferData(_gl.ARRAY_BUFFER, uvArray, hint)
      }
    }
    if(dirtyUvs && obj_uvs2 && uvType) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        fi = chunk_faces3[f];
        uv2 = obj_uvs2[fi];
        if(uv2 === undefined) {
          continue
        }
        for(i = 0;i < 3;i++) {
          uv2i = uv2[i];
          uv2Array[offset_uv2] = uv2i.x;
          uv2Array[offset_uv2 + 1] = uv2i.y;
          offset_uv2 += 2
        }
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        fi = chunk_faces4[f];
        uv2 = obj_uvs2[fi];
        if(uv2 === undefined) {
          continue
        }
        for(i = 0;i < 4;i++) {
          uv2i = uv2[i];
          uv2Array[offset_uv2] = uv2i.x;
          uv2Array[offset_uv2 + 1] = uv2i.y;
          offset_uv2 += 2
        }
      }
      if(offset_uv2 > 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer);
        _gl.bufferData(_gl.ARRAY_BUFFER, uv2Array, hint)
      }
    }
    if(dirtyElements) {
      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
        faceArray[offset_face] = vertexIndex;
        faceArray[offset_face + 1] = vertexIndex + 1;
        faceArray[offset_face + 2] = vertexIndex + 2;
        offset_face += 3;
        lineArray[offset_line] = vertexIndex;
        lineArray[offset_line + 1] = vertexIndex + 1;
        lineArray[offset_line + 2] = vertexIndex;
        lineArray[offset_line + 3] = vertexIndex + 2;
        lineArray[offset_line + 4] = vertexIndex + 1;
        lineArray[offset_line + 5] = vertexIndex + 2;
        offset_line += 6;
        vertexIndex += 3
      }
      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
        faceArray[offset_face] = vertexIndex;
        faceArray[offset_face + 1] = vertexIndex + 1;
        faceArray[offset_face + 2] = vertexIndex + 3;
        faceArray[offset_face + 3] = vertexIndex + 1;
        faceArray[offset_face + 4] = vertexIndex + 2;
        faceArray[offset_face + 5] = vertexIndex + 3;
        offset_face += 6;
        lineArray[offset_line] = vertexIndex;
        lineArray[offset_line + 1] = vertexIndex + 1;
        lineArray[offset_line + 2] = vertexIndex;
        lineArray[offset_line + 3] = vertexIndex + 3;
        lineArray[offset_line + 4] = vertexIndex + 1;
        lineArray[offset_line + 5] = vertexIndex + 2;
        lineArray[offset_line + 6] = vertexIndex + 2;
        lineArray[offset_line + 7] = vertexIndex + 3;
        offset_line += 8;
        vertexIndex += 4
      }
      _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer);
      _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, faceArray, hint);
      _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer);
      _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, lineArray, hint)
    }
    if(customAttributes) {
      for(i = 0, il = customAttributes.length;i < il;i++) {
        customAttribute = customAttributes[i];
        if(!customAttribute.__original.needsUpdate) {
          continue
        }
        offset_custom = 0;
        offset_customSrc = 0;
        if(customAttribute.size === 1) {
          if(customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices") {
            for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
              face = obj_faces[chunk_faces3[f]];
              customAttribute.array[offset_custom] = customAttribute.value[face.a];
              customAttribute.array[offset_custom + 1] = customAttribute.value[face.b];
              customAttribute.array[offset_custom + 2] = customAttribute.value[face.c];
              offset_custom += 3
            }
            for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
              face = obj_faces[chunk_faces4[f]];
              customAttribute.array[offset_custom] = customAttribute.value[face.a];
              customAttribute.array[offset_custom + 1] = customAttribute.value[face.b];
              customAttribute.array[offset_custom + 2] = customAttribute.value[face.c];
              customAttribute.array[offset_custom + 3] = customAttribute.value[face.d];
              offset_custom += 4
            }
          }else {
            if(customAttribute.boundTo === "faces") {
              for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                value = customAttribute.value[chunk_faces3[f]];
                customAttribute.array[offset_custom] = value;
                customAttribute.array[offset_custom + 1] = value;
                customAttribute.array[offset_custom + 2] = value;
                offset_custom += 3
              }
              for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                value = customAttribute.value[chunk_faces4[f]];
                customAttribute.array[offset_custom] = value;
                customAttribute.array[offset_custom + 1] = value;
                customAttribute.array[offset_custom + 2] = value;
                customAttribute.array[offset_custom + 3] = value;
                offset_custom += 4
              }
            }
          }
        }else {
          if(customAttribute.size === 2) {
            if(customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices") {
              for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                face = obj_faces[chunk_faces3[f]];
                v1 = customAttribute.value[face.a];
                v2 = customAttribute.value[face.b];
                v3 = customAttribute.value[face.c];
                customAttribute.array[offset_custom] = v1.x;
                customAttribute.array[offset_custom + 1] = v1.y;
                customAttribute.array[offset_custom + 2] = v2.x;
                customAttribute.array[offset_custom + 3] = v2.y;
                customAttribute.array[offset_custom + 4] = v3.x;
                customAttribute.array[offset_custom + 5] = v3.y;
                offset_custom += 6
              }
              for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                face = obj_faces[chunk_faces4[f]];
                v1 = customAttribute.value[face.a];
                v2 = customAttribute.value[face.b];
                v3 = customAttribute.value[face.c];
                v4 = customAttribute.value[face.d];
                customAttribute.array[offset_custom] = v1.x;
                customAttribute.array[offset_custom + 1] = v1.y;
                customAttribute.array[offset_custom + 2] = v2.x;
                customAttribute.array[offset_custom + 3] = v2.y;
                customAttribute.array[offset_custom + 4] = v3.x;
                customAttribute.array[offset_custom + 5] = v3.y;
                customAttribute.array[offset_custom + 6] = v4.x;
                customAttribute.array[offset_custom + 7] = v4.y;
                offset_custom += 8
              }
            }else {
              if(customAttribute.boundTo === "faces") {
                for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                  value = customAttribute.value[chunk_faces3[f]];
                  v1 = value;
                  v2 = value;
                  v3 = value;
                  customAttribute.array[offset_custom] = v1.x;
                  customAttribute.array[offset_custom + 1] = v1.y;
                  customAttribute.array[offset_custom + 2] = v2.x;
                  customAttribute.array[offset_custom + 3] = v2.y;
                  customAttribute.array[offset_custom + 4] = v3.x;
                  customAttribute.array[offset_custom + 5] = v3.y;
                  offset_custom += 6
                }
                for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                  value = customAttribute.value[chunk_faces4[f]];
                  v1 = value;
                  v2 = value;
                  v3 = value;
                  v4 = value;
                  customAttribute.array[offset_custom] = v1.x;
                  customAttribute.array[offset_custom + 1] = v1.y;
                  customAttribute.array[offset_custom + 2] = v2.x;
                  customAttribute.array[offset_custom + 3] = v2.y;
                  customAttribute.array[offset_custom + 4] = v3.x;
                  customAttribute.array[offset_custom + 5] = v3.y;
                  customAttribute.array[offset_custom + 6] = v4.x;
                  customAttribute.array[offset_custom + 7] = v4.y;
                  offset_custom += 8
                }
              }
            }
          }else {
            if(customAttribute.size === 3) {
              var pp;
              if(customAttribute.type === "c") {
                pp = ["r", "g", "b"]
              }else {
                pp = ["x", "y", "z"]
              }
              if(customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices") {
                for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                  face = obj_faces[chunk_faces3[f]];
                  v1 = customAttribute.value[face.a];
                  v2 = customAttribute.value[face.b];
                  v3 = customAttribute.value[face.c];
                  customAttribute.array[offset_custom] = v1[pp[0]];
                  customAttribute.array[offset_custom + 1] = v1[pp[1]];
                  customAttribute.array[offset_custom + 2] = v1[pp[2]];
                  customAttribute.array[offset_custom + 3] = v2[pp[0]];
                  customAttribute.array[offset_custom + 4] = v2[pp[1]];
                  customAttribute.array[offset_custom + 5] = v2[pp[2]];
                  customAttribute.array[offset_custom + 6] = v3[pp[0]];
                  customAttribute.array[offset_custom + 7] = v3[pp[1]];
                  customAttribute.array[offset_custom + 8] = v3[pp[2]];
                  offset_custom += 9
                }
                for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                  face = obj_faces[chunk_faces4[f]];
                  v1 = customAttribute.value[face.a];
                  v2 = customAttribute.value[face.b];
                  v3 = customAttribute.value[face.c];
                  v4 = customAttribute.value[face.d];
                  customAttribute.array[offset_custom] = v1[pp[0]];
                  customAttribute.array[offset_custom + 1] = v1[pp[1]];
                  customAttribute.array[offset_custom + 2] = v1[pp[2]];
                  customAttribute.array[offset_custom + 3] = v2[pp[0]];
                  customAttribute.array[offset_custom + 4] = v2[pp[1]];
                  customAttribute.array[offset_custom + 5] = v2[pp[2]];
                  customAttribute.array[offset_custom + 6] = v3[pp[0]];
                  customAttribute.array[offset_custom + 7] = v3[pp[1]];
                  customAttribute.array[offset_custom + 8] = v3[pp[2]];
                  customAttribute.array[offset_custom + 9] = v4[pp[0]];
                  customAttribute.array[offset_custom + 10] = v4[pp[1]];
                  customAttribute.array[offset_custom + 11] = v4[pp[2]];
                  offset_custom += 12
                }
              }else {
                if(customAttribute.boundTo === "faces") {
                  for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                    value = customAttribute.value[chunk_faces3[f]];
                    v1 = value;
                    v2 = value;
                    v3 = value;
                    customAttribute.array[offset_custom] = v1[pp[0]];
                    customAttribute.array[offset_custom + 1] = v1[pp[1]];
                    customAttribute.array[offset_custom + 2] = v1[pp[2]];
                    customAttribute.array[offset_custom + 3] = v2[pp[0]];
                    customAttribute.array[offset_custom + 4] = v2[pp[1]];
                    customAttribute.array[offset_custom + 5] = v2[pp[2]];
                    customAttribute.array[offset_custom + 6] = v3[pp[0]];
                    customAttribute.array[offset_custom + 7] = v3[pp[1]];
                    customAttribute.array[offset_custom + 8] = v3[pp[2]];
                    offset_custom += 9
                  }
                  for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                    value = customAttribute.value[chunk_faces4[f]];
                    v1 = value;
                    v2 = value;
                    v3 = value;
                    v4 = value;
                    customAttribute.array[offset_custom] = v1[pp[0]];
                    customAttribute.array[offset_custom + 1] = v1[pp[1]];
                    customAttribute.array[offset_custom + 2] = v1[pp[2]];
                    customAttribute.array[offset_custom + 3] = v2[pp[0]];
                    customAttribute.array[offset_custom + 4] = v2[pp[1]];
                    customAttribute.array[offset_custom + 5] = v2[pp[2]];
                    customAttribute.array[offset_custom + 6] = v3[pp[0]];
                    customAttribute.array[offset_custom + 7] = v3[pp[1]];
                    customAttribute.array[offset_custom + 8] = v3[pp[2]];
                    customAttribute.array[offset_custom + 9] = v4[pp[0]];
                    customAttribute.array[offset_custom + 10] = v4[pp[1]];
                    customAttribute.array[offset_custom + 11] = v4[pp[2]];
                    offset_custom += 12
                  }
                }else {
                  if(customAttribute.boundTo === "faceVertices") {
                    for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                      value = customAttribute.value[chunk_faces3[f]];
                      v1 = value[0];
                      v2 = value[1];
                      v3 = value[2];
                      customAttribute.array[offset_custom] = v1[pp[0]];
                      customAttribute.array[offset_custom + 1] = v1[pp[1]];
                      customAttribute.array[offset_custom + 2] = v1[pp[2]];
                      customAttribute.array[offset_custom + 3] = v2[pp[0]];
                      customAttribute.array[offset_custom + 4] = v2[pp[1]];
                      customAttribute.array[offset_custom + 5] = v2[pp[2]];
                      customAttribute.array[offset_custom + 6] = v3[pp[0]];
                      customAttribute.array[offset_custom + 7] = v3[pp[1]];
                      customAttribute.array[offset_custom + 8] = v3[pp[2]];
                      offset_custom += 9
                    }
                    for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                      value = customAttribute.value[chunk_faces4[f]];
                      v1 = value[0];
                      v2 = value[1];
                      v3 = value[2];
                      v4 = value[3];
                      customAttribute.array[offset_custom] = v1[pp[0]];
                      customAttribute.array[offset_custom + 1] = v1[pp[1]];
                      customAttribute.array[offset_custom + 2] = v1[pp[2]];
                      customAttribute.array[offset_custom + 3] = v2[pp[0]];
                      customAttribute.array[offset_custom + 4] = v2[pp[1]];
                      customAttribute.array[offset_custom + 5] = v2[pp[2]];
                      customAttribute.array[offset_custom + 6] = v3[pp[0]];
                      customAttribute.array[offset_custom + 7] = v3[pp[1]];
                      customAttribute.array[offset_custom + 8] = v3[pp[2]];
                      customAttribute.array[offset_custom + 9] = v4[pp[0]];
                      customAttribute.array[offset_custom + 10] = v4[pp[1]];
                      customAttribute.array[offset_custom + 11] = v4[pp[2]];
                      offset_custom += 12
                    }
                  }
                }
              }
            }else {
              if(customAttribute.size === 4) {
                if(customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices") {
                  for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                    face = obj_faces[chunk_faces3[f]];
                    v1 = customAttribute.value[face.a];
                    v2 = customAttribute.value[face.b];
                    v3 = customAttribute.value[face.c];
                    customAttribute.array[offset_custom] = v1.x;
                    customAttribute.array[offset_custom + 1] = v1.y;
                    customAttribute.array[offset_custom + 2] = v1.z;
                    customAttribute.array[offset_custom + 3] = v1.w;
                    customAttribute.array[offset_custom + 4] = v2.x;
                    customAttribute.array[offset_custom + 5] = v2.y;
                    customAttribute.array[offset_custom + 6] = v2.z;
                    customAttribute.array[offset_custom + 7] = v2.w;
                    customAttribute.array[offset_custom + 8] = v3.x;
                    customAttribute.array[offset_custom + 9] = v3.y;
                    customAttribute.array[offset_custom + 10] = v3.z;
                    customAttribute.array[offset_custom + 11] = v3.w;
                    offset_custom += 12
                  }
                  for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                    face = obj_faces[chunk_faces4[f]];
                    v1 = customAttribute.value[face.a];
                    v2 = customAttribute.value[face.b];
                    v3 = customAttribute.value[face.c];
                    v4 = customAttribute.value[face.d];
                    customAttribute.array[offset_custom] = v1.x;
                    customAttribute.array[offset_custom + 1] = v1.y;
                    customAttribute.array[offset_custom + 2] = v1.z;
                    customAttribute.array[offset_custom + 3] = v1.w;
                    customAttribute.array[offset_custom + 4] = v2.x;
                    customAttribute.array[offset_custom + 5] = v2.y;
                    customAttribute.array[offset_custom + 6] = v2.z;
                    customAttribute.array[offset_custom + 7] = v2.w;
                    customAttribute.array[offset_custom + 8] = v3.x;
                    customAttribute.array[offset_custom + 9] = v3.y;
                    customAttribute.array[offset_custom + 10] = v3.z;
                    customAttribute.array[offset_custom + 11] = v3.w;
                    customAttribute.array[offset_custom + 12] = v4.x;
                    customAttribute.array[offset_custom + 13] = v4.y;
                    customAttribute.array[offset_custom + 14] = v4.z;
                    customAttribute.array[offset_custom + 15] = v4.w;
                    offset_custom += 16
                  }
                }else {
                  if(customAttribute.boundTo === "faces") {
                    for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                      value = customAttribute.value[chunk_faces3[f]];
                      v1 = value;
                      v2 = value;
                      v3 = value;
                      customAttribute.array[offset_custom] = v1.x;
                      customAttribute.array[offset_custom + 1] = v1.y;
                      customAttribute.array[offset_custom + 2] = v1.z;
                      customAttribute.array[offset_custom + 3] = v1.w;
                      customAttribute.array[offset_custom + 4] = v2.x;
                      customAttribute.array[offset_custom + 5] = v2.y;
                      customAttribute.array[offset_custom + 6] = v2.z;
                      customAttribute.array[offset_custom + 7] = v2.w;
                      customAttribute.array[offset_custom + 8] = v3.x;
                      customAttribute.array[offset_custom + 9] = v3.y;
                      customAttribute.array[offset_custom + 10] = v3.z;
                      customAttribute.array[offset_custom + 11] = v3.w;
                      offset_custom += 12
                    }
                    for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                      value = customAttribute.value[chunk_faces4[f]];
                      v1 = value;
                      v2 = value;
                      v3 = value;
                      v4 = value;
                      customAttribute.array[offset_custom] = v1.x;
                      customAttribute.array[offset_custom + 1] = v1.y;
                      customAttribute.array[offset_custom + 2] = v1.z;
                      customAttribute.array[offset_custom + 3] = v1.w;
                      customAttribute.array[offset_custom + 4] = v2.x;
                      customAttribute.array[offset_custom + 5] = v2.y;
                      customAttribute.array[offset_custom + 6] = v2.z;
                      customAttribute.array[offset_custom + 7] = v2.w;
                      customAttribute.array[offset_custom + 8] = v3.x;
                      customAttribute.array[offset_custom + 9] = v3.y;
                      customAttribute.array[offset_custom + 10] = v3.z;
                      customAttribute.array[offset_custom + 11] = v3.w;
                      customAttribute.array[offset_custom + 12] = v4.x;
                      customAttribute.array[offset_custom + 13] = v4.y;
                      customAttribute.array[offset_custom + 14] = v4.z;
                      customAttribute.array[offset_custom + 15] = v4.w;
                      offset_custom += 16
                    }
                  }else {
                    if(customAttribute.boundTo === "faceVertices") {
                      for(f = 0, fl = chunk_faces3.length;f < fl;f++) {
                        value = customAttribute.value[chunk_faces3[f]];
                        v1 = value[0];
                        v2 = value[1];
                        v3 = value[2];
                        customAttribute.array[offset_custom] = v1.x;
                        customAttribute.array[offset_custom + 1] = v1.y;
                        customAttribute.array[offset_custom + 2] = v1.z;
                        customAttribute.array[offset_custom + 3] = v1.w;
                        customAttribute.array[offset_custom + 4] = v2.x;
                        customAttribute.array[offset_custom + 5] = v2.y;
                        customAttribute.array[offset_custom + 6] = v2.z;
                        customAttribute.array[offset_custom + 7] = v2.w;
                        customAttribute.array[offset_custom + 8] = v3.x;
                        customAttribute.array[offset_custom + 9] = v3.y;
                        customAttribute.array[offset_custom + 10] = v3.z;
                        customAttribute.array[offset_custom + 11] = v3.w;
                        offset_custom += 12
                      }
                      for(f = 0, fl = chunk_faces4.length;f < fl;f++) {
                        value = customAttribute.value[chunk_faces4[f]];
                        v1 = value[0];
                        v2 = value[1];
                        v3 = value[2];
                        v4 = value[3];
                        customAttribute.array[offset_custom] = v1.x;
                        customAttribute.array[offset_custom + 1] = v1.y;
                        customAttribute.array[offset_custom + 2] = v1.z;
                        customAttribute.array[offset_custom + 3] = v1.w;
                        customAttribute.array[offset_custom + 4] = v2.x;
                        customAttribute.array[offset_custom + 5] = v2.y;
                        customAttribute.array[offset_custom + 6] = v2.z;
                        customAttribute.array[offset_custom + 7] = v2.w;
                        customAttribute.array[offset_custom + 8] = v3.x;
                        customAttribute.array[offset_custom + 9] = v3.y;
                        customAttribute.array[offset_custom + 10] = v3.z;
                        customAttribute.array[offset_custom + 11] = v3.w;
                        customAttribute.array[offset_custom + 12] = v4.x;
                        customAttribute.array[offset_custom + 13] = v4.y;
                        customAttribute.array[offset_custom + 14] = v4.z;
                        customAttribute.array[offset_custom + 15] = v4.w;
                        offset_custom += 16
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _gl.bindBuffer(_gl.ARRAY_BUFFER, customAttribute.buffer);
        _gl.bufferData(_gl.ARRAY_BUFFER, customAttribute.array, hint)
      }
    }
    if(dispose) {
      delete geometryGroup.__inittedArrays;
      delete geometryGroup.__colorArray;
      delete geometryGroup.__normalArray;
      delete geometryGroup.__tangentArray;
      delete geometryGroup.__uvArray;
      delete geometryGroup.__uv2Array;
      delete geometryGroup.__faceArray;
      delete geometryGroup.__vertexArray;
      delete geometryGroup.__lineArray;
      delete geometryGroup.__skinIndexArray;
      delete geometryGroup.__skinWeightArray
    }
  }
  function setDirectBuffers(geometry, hint, dispose) {
    var attributes = geometry.attributes;
    var index = attributes["index"];
    var position = attributes["position"];
    var normal = attributes["normal"];
    var uv = attributes["uv"];
    var color = attributes["color"];
    var tangent = attributes["tangent"];
    if(geometry.elementsNeedUpdate && index !== undefined) {
      _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, index.buffer);
      _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, index.array, hint)
    }
    if(geometry.verticesNeedUpdate && position !== undefined) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, position.buffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, position.array, hint)
    }
    if(geometry.normalsNeedUpdate && normal !== undefined) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, normal.buffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, normal.array, hint)
    }
    if(geometry.uvsNeedUpdate && uv !== undefined) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, uv.buffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, uv.array, hint)
    }
    if(geometry.colorsNeedUpdate && color !== undefined) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, color.buffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, color.array, hint)
    }
    if(geometry.tangentsNeedUpdate && tangent !== undefined) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, tangent.buffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, tangent.array, hint)
    }
    if(dispose) {
      for(var i in geometry.attributes) {
        delete geometry.attributes[i].array
      }
    }
  }
  this.renderBufferImmediate = function(object, program, material) {
    if(object.hasPositions && !object.__webglVertexBuffer) {
      object.__webglVertexBuffer = _gl.createBuffer()
    }
    if(object.hasNormals && !object.__webglNormalBuffer) {
      object.__webglNormalBuffer = _gl.createBuffer()
    }
    if(object.hasUvs && !object.__webglUvBuffer) {
      object.__webglUvBuffer = _gl.createBuffer()
    }
    if(object.hasColors && !object.__webglColorBuffer) {
      object.__webglColorBuffer = _gl.createBuffer()
    }
    if(object.hasPositions) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, object.__webglVertexBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);
      _gl.enableVertexAttribArray(program.attributes.position);
      _gl.vertexAttribPointer(program.attributes.position, 3, _gl.FLOAT, false, 0, 0)
    }
    if(object.hasNormals) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, object.__webglNormalBuffer);
      if(material.shading === THREE.FlatShading) {
        var nx, ny, nz, nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz, normalArray, i, il = object.count * 3;
        for(i = 0;i < il;i += 9) {
          normalArray = object.normalArray;
          nax = normalArray[i];
          nay = normalArray[i + 1];
          naz = normalArray[i + 2];
          nbx = normalArray[i + 3];
          nby = normalArray[i + 4];
          nbz = normalArray[i + 5];
          ncx = normalArray[i + 6];
          ncy = normalArray[i + 7];
          ncz = normalArray[i + 8];
          nx = (nax + nbx + ncx) / 3;
          ny = (nay + nby + ncy) / 3;
          nz = (naz + nbz + ncz) / 3;
          normalArray[i] = nx;
          normalArray[i + 1] = ny;
          normalArray[i + 2] = nz;
          normalArray[i + 3] = nx;
          normalArray[i + 4] = ny;
          normalArray[i + 5] = nz;
          normalArray[i + 6] = nx;
          normalArray[i + 7] = ny;
          normalArray[i + 8] = nz
        }
      }
      _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);
      _gl.enableVertexAttribArray(program.attributes.normal);
      _gl.vertexAttribPointer(program.attributes.normal, 3, _gl.FLOAT, false, 0, 0)
    }
    if(object.hasUvs && material.map) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, object.__webglUvBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);
      _gl.enableVertexAttribArray(program.attributes.uv);
      _gl.vertexAttribPointer(program.attributes.uv, 2, _gl.FLOAT, false, 0, 0)
    }
    if(object.hasColors && material.vertexColors !== THREE.NoColors) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, object.__webglColorBuffer);
      _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);
      _gl.enableVertexAttribArray(program.attributes.color);
      _gl.vertexAttribPointer(program.attributes.color, 3, _gl.FLOAT, false, 0, 0)
    }
    _gl.drawArrays(_gl.TRIANGLES, 0, object.count);
    object.count = 0
  };
  this.renderBufferDirect = function(camera, lights, fog, material, geometry, object) {
    if(material.visible === false) {
      return
    }
    var program, attributes, linewidth, primitives, a, attribute;
    program = setProgram(camera, lights, fog, material, object);
    attributes = program.attributes;
    var updateBuffers = false, wireframeBit = material.wireframe ? 1 : 0, geometryHash = geometry.id * 16777215 + program.id * 2 + wireframeBit;
    if(geometryHash !== _currentGeometryGroupHash) {
      _currentGeometryGroupHash = geometryHash;
      updateBuffers = true
    }
    if(updateBuffers) {
      disableAttributes()
    }
    if(object instanceof THREE.Mesh) {
      var index = geometry.attributes["index"];
      if(index) {
        var offsets = geometry.offsets;
        if(offsets.length > 1) {
          updateBuffers = true
        }
        for(var i = 0, il = offsets.length;i < il;i++) {
          var startIndex = offsets[i].index;
          if(updateBuffers) {
            var position = geometry.attributes["position"];
            var positionSize = position.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, position.buffer);
            enableAttribute(attributes.position);
            _gl.vertexAttribPointer(attributes.position, positionSize, _gl.FLOAT, false, 0, startIndex * positionSize * 4);
            var normal = geometry.attributes["normal"];
            if(attributes.normal >= 0 && normal) {
              var normalSize = normal.itemSize;
              _gl.bindBuffer(_gl.ARRAY_BUFFER, normal.buffer);
              enableAttribute(attributes.normal);
              _gl.vertexAttribPointer(attributes.normal, normalSize, _gl.FLOAT, false, 0, startIndex * normalSize * 4)
            }
            var uv = geometry.attributes["uv"];
            if(attributes.uv >= 0 && uv) {
              var uvSize = uv.itemSize;
              _gl.bindBuffer(_gl.ARRAY_BUFFER, uv.buffer);
              enableAttribute(attributes.uv);
              _gl.vertexAttribPointer(attributes.uv, uvSize, _gl.FLOAT, false, 0, startIndex * uvSize * 4)
            }
            var color = geometry.attributes["color"];
            if(attributes.color >= 0 && color) {
              var colorSize = color.itemSize;
              _gl.bindBuffer(_gl.ARRAY_BUFFER, color.buffer);
              enableAttribute(attributes.color);
              _gl.vertexAttribPointer(attributes.color, colorSize, _gl.FLOAT, false, 0, startIndex * colorSize * 4)
            }
            var tangent = geometry.attributes["tangent"];
            if(attributes.tangent >= 0 && tangent) {
              var tangentSize = tangent.itemSize;
              _gl.bindBuffer(_gl.ARRAY_BUFFER, tangent.buffer);
              enableAttribute(attributes.tangent);
              _gl.vertexAttribPointer(attributes.tangent, tangentSize, _gl.FLOAT, false, 0, startIndex * tangentSize * 4)
            }
            _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, index.buffer)
          }
          _gl.drawElements(_gl.TRIANGLES, offsets[i].count, _gl.UNSIGNED_SHORT, offsets[i].start * 2);
          _this.info.render.calls++;
          _this.info.render.vertices += offsets[i].count;
          _this.info.render.faces += offsets[i].count / 3
        }
      }else {
        if(updateBuffers) {
          var position = geometry.attributes["position"];
          var positionSize = position.itemSize;
          _gl.bindBuffer(_gl.ARRAY_BUFFER, position.buffer);
          enableAttribute(attributes.position);
          _gl.vertexAttribPointer(attributes.position, positionSize, _gl.FLOAT, false, 0, 0);
          var normal = geometry.attributes["normal"];
          if(attributes.normal >= 0 && normal) {
            var normalSize = normal.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, normal.buffer);
            enableAttribute(attributes.normal);
            _gl.vertexAttribPointer(attributes.normal, normalSize, _gl.FLOAT, false, 0, 0)
          }
          var uv = geometry.attributes["uv"];
          if(attributes.uv >= 0 && uv) {
            var uvSize = uv.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, uv.buffer);
            enableAttribute(attributes.uv);
            _gl.vertexAttribPointer(attributes.uv, uvSize, _gl.FLOAT, false, 0, 0)
          }
          var color = geometry.attributes["color"];
          if(attributes.color >= 0 && color) {
            var colorSize = color.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, color.buffer);
            enableAttribute(attributes.color);
            _gl.vertexAttribPointer(attributes.color, colorSize, _gl.FLOAT, false, 0, 0)
          }
          var tangent = geometry.attributes["tangent"];
          if(attributes.tangent >= 0 && tangent) {
            var tangentSize = tangent.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, tangent.buffer);
            enableAttribute(attributes.tangent);
            _gl.vertexAttribPointer(attributes.tangent, tangentSize, _gl.FLOAT, false, 0, 0)
          }
        }
        _gl.drawArrays(_gl.TRIANGLES, 0, position.numItems / 3);
        _this.info.render.calls++;
        _this.info.render.vertices += position.numItems / 3;
        _this.info.render.faces += position.numItems / 3 / 3
      }
    }else {
      if(object instanceof THREE.ParticleSystem) {
        if(updateBuffers) {
          var position = geometry.attributes["position"];
          var positionSize = position.itemSize;
          _gl.bindBuffer(_gl.ARRAY_BUFFER, position.buffer);
          enableAttribute(attributes.position);
          _gl.vertexAttribPointer(attributes.position, positionSize, _gl.FLOAT, false, 0, 0);
          var color = geometry.attributes["color"];
          if(attributes.color >= 0 && color) {
            var colorSize = color.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, color.buffer);
            enableAttribute(attributes.color);
            _gl.vertexAttribPointer(attributes.color, colorSize, _gl.FLOAT, false, 0, 0)
          }
          _gl.drawArrays(_gl.POINTS, 0, position.numItems / 3);
          _this.info.render.calls++;
          _this.info.render.points += position.numItems / 3
        }
      }else {
        if(object instanceof THREE.Line) {
          if(updateBuffers) {
            var position = geometry.attributes["position"];
            var positionSize = position.itemSize;
            _gl.bindBuffer(_gl.ARRAY_BUFFER, position.buffer);
            enableAttribute(attributes.position);
            _gl.vertexAttribPointer(attributes.position, positionSize, _gl.FLOAT, false, 0, 0);
            var color = geometry.attributes["color"];
            if(attributes.color >= 0 && color) {
              var colorSize = color.itemSize;
              _gl.bindBuffer(_gl.ARRAY_BUFFER, color.buffer);
              enableAttribute(attributes.color);
              _gl.vertexAttribPointer(attributes.color, colorSize, _gl.FLOAT, false, 0, 0)
            }
            _gl.drawArrays(_gl.LINE_STRIP, 0, position.numItems / 3);
            _this.info.render.calls++;
            _this.info.render.points += position.numItems
          }
        }
      }
    }
  };
  this.renderBuffer = function(camera, lights, fog, material, geometryGroup, object) {
    if(material.visible === false) {
      return
    }
    var program, attributes, linewidth, primitives, a, attribute, i, il;
    program = setProgram(camera, lights, fog, material, object);
    attributes = program.attributes;
    var updateBuffers = false, wireframeBit = material.wireframe ? 1 : 0, geometryGroupHash = geometryGroup.id * 16777215 + program.id * 2 + wireframeBit;
    if(geometryGroupHash !== _currentGeometryGroupHash) {
      _currentGeometryGroupHash = geometryGroupHash;
      updateBuffers = true
    }
    if(updateBuffers) {
      disableAttributes()
    }
    if(!material.morphTargets && attributes.position >= 0) {
      if(updateBuffers) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer);
        enableAttribute(attributes.position);
        _gl.vertexAttribPointer(attributes.position, 3, _gl.FLOAT, false, 0, 0)
      }
    }else {
      if(object.morphTargetBase) {
        setupMorphTargets(material, geometryGroup, object)
      }
    }
    if(updateBuffers) {
      if(geometryGroup.__webglCustomAttributesList) {
        for(i = 0, il = geometryGroup.__webglCustomAttributesList.length;i < il;i++) {
          attribute = geometryGroup.__webglCustomAttributesList[i];
          if(attributes[attribute.buffer.belongsToAttribute] >= 0) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, attribute.buffer);
            enableAttribute(attributes[attribute.buffer.belongsToAttribute]);
            _gl.vertexAttribPointer(attributes[attribute.buffer.belongsToAttribute], attribute.size, _gl.FLOAT, false, 0, 0)
          }
        }
      }
      if(attributes.color >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer);
        enableAttribute(attributes.color);
        _gl.vertexAttribPointer(attributes.color, 3, _gl.FLOAT, false, 0, 0)
      }
      if(attributes.normal >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer);
        enableAttribute(attributes.normal);
        _gl.vertexAttribPointer(attributes.normal, 3, _gl.FLOAT, false, 0, 0)
      }
      if(attributes.tangent >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer);
        enableAttribute(attributes.tangent);
        _gl.vertexAttribPointer(attributes.tangent, 4, _gl.FLOAT, false, 0, 0)
      }
      if(attributes.uv >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer);
        enableAttribute(attributes.uv);
        _gl.vertexAttribPointer(attributes.uv, 2, _gl.FLOAT, false, 0, 0)
      }
      if(attributes.uv2 >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer);
        enableAttribute(attributes.uv2);
        _gl.vertexAttribPointer(attributes.uv2, 2, _gl.FLOAT, false, 0, 0)
      }
      if(material.skinning && attributes.skinIndex >= 0 && attributes.skinWeight >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer);
        enableAttribute(attributes.skinIndex);
        _gl.vertexAttribPointer(attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0);
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer);
        enableAttribute(attributes.skinWeight);
        _gl.vertexAttribPointer(attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0)
      }
      if(attributes.lineDistance >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer);
        enableAttribute(attributes.lineDistance);
        _gl.vertexAttribPointer(attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0)
      }
    }
    if(object instanceof THREE.Mesh) {
      if(material.wireframe) {
        setLineWidth(material.wireframeLinewidth);
        if(updateBuffers) {
          _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer)
        }
        _gl.drawElements(_gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0)
      }else {
        if(updateBuffers) {
          _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer)
        }
        _gl.drawElements(_gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0)
      }
      _this.info.render.calls++;
      _this.info.render.vertices += geometryGroup.__webglFaceCount;
      _this.info.render.faces += geometryGroup.__webglFaceCount / 3
    }else {
      if(object instanceof THREE.Line) {
        primitives = object.type === THREE.LineStrip ? _gl.LINE_STRIP : _gl.LINES;
        setLineWidth(material.linewidth);
        _gl.drawArrays(primitives, 0, geometryGroup.__webglLineCount);
        _this.info.render.calls++
      }else {
        if(object instanceof THREE.ParticleSystem) {
          _gl.drawArrays(_gl.POINTS, 0, geometryGroup.__webglParticleCount);
          _this.info.render.calls++;
          _this.info.render.points += geometryGroup.__webglParticleCount
        }else {
          if(object instanceof THREE.Ribbon) {
            _gl.drawArrays(_gl.TRIANGLE_STRIP, 0, geometryGroup.__webglVertexCount);
            _this.info.render.calls++
          }
        }
      }
    }
  };
  function enableAttribute(attribute) {
    if(!_enabledAttributes[attribute]) {
      _gl.enableVertexAttribArray(attribute);
      _enabledAttributes[attribute] = true
    }
  }
  function disableAttributes() {
    for(var attribute in _enabledAttributes) {
      if(_enabledAttributes[attribute]) {
        _gl.disableVertexAttribArray(attribute);
        _enabledAttributes[attribute] = false
      }
    }
  }
  function setupMorphTargets(material, geometryGroup, object) {
    var attributes = material.program.attributes;
    if(object.morphTargetBase !== -1 && attributes.position >= 0) {
      _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[object.morphTargetBase]);
      enableAttribute(attributes.position);
      _gl.vertexAttribPointer(attributes.position, 3, _gl.FLOAT, false, 0, 0)
    }else {
      if(attributes.position >= 0) {
        _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer);
        enableAttribute(attributes.position);
        _gl.vertexAttribPointer(attributes.position, 3, _gl.FLOAT, false, 0, 0)
      }
    }
    if(object.morphTargetForcedOrder.length) {
      var m = 0;
      var order = object.morphTargetForcedOrder;
      var influences = object.morphTargetInfluences;
      while(m < material.numSupportedMorphTargets && m < order.length) {
        if(attributes["morphTarget" + m] >= 0) {
          _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[order[m]]);
          enableAttribute(attributes["morphTarget" + m]);
          _gl.vertexAttribPointer(attributes["morphTarget" + m], 3, _gl.FLOAT, false, 0, 0)
        }
        if(attributes["morphNormal" + m] >= 0 && material.morphNormals) {
          _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[order[m]]);
          enableAttribute(attributes["morphNormal" + m]);
          _gl.vertexAttribPointer(attributes["morphNormal" + m], 3, _gl.FLOAT, false, 0, 0)
        }
        object.__webglMorphTargetInfluences[m] = influences[order[m]];
        m++
      }
    }else {
      var influence, activeInfluenceIndices = [];
      var influences = object.morphTargetInfluences;
      var i, il = influences.length;
      for(i = 0;i < il;i++) {
        influence = influences[i];
        if(influence > 0) {
          activeInfluenceIndices.push([influence, i])
        }
      }
      if(activeInfluenceIndices.length > material.numSupportedMorphTargets) {
        activeInfluenceIndices.sort(numericalSort);
        activeInfluenceIndices.length = material.numSupportedMorphTargets
      }else {
        if(activeInfluenceIndices.length > material.numSupportedMorphNormals) {
          activeInfluenceIndices.sort(numericalSort)
        }else {
          if(activeInfluenceIndices.length === 0) {
            activeInfluenceIndices.push([0, 0])
          }
        }
      }
      var influenceIndex, m = 0;
      while(m < material.numSupportedMorphTargets) {
        if(activeInfluenceIndices[m]) {
          influenceIndex = activeInfluenceIndices[m][1];
          if(attributes["morphTarget" + m] >= 0) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[influenceIndex]);
            enableAttribute(attributes["morphTarget" + m]);
            _gl.vertexAttribPointer(attributes["morphTarget" + m], 3, _gl.FLOAT, false, 0, 0)
          }
          if(attributes["morphNormal" + m] >= 0 && material.morphNormals) {
            _gl.bindBuffer(_gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[influenceIndex]);
            enableAttribute(attributes["morphNormal" + m]);
            _gl.vertexAttribPointer(attributes["morphNormal" + m], 3, _gl.FLOAT, false, 0, 0)
          }
          object.__webglMorphTargetInfluences[m] = influences[influenceIndex]
        }else {
          object.__webglMorphTargetInfluences[m] = 0
        }
        m++
      }
    }
    if(material.program.uniforms.morphTargetInfluences !== null) {
      _gl.uniform1fv(material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences)
    }
  }
  function painterSortStable(a, b) {
    if(a.z !== b.z) {
      return b.z - a.z
    }else {
      return b.id - a.id
    }
  }
  function numericalSort(a, b) {
    return b[0] - a[0]
  }
  this.render = function(scene, camera, renderTarget, forceClear) {
    if(camera instanceof THREE.Camera === false) {
      console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
      return
    }
    var i, il, webglObject, object, renderList, lights = scene.__lights, fog = scene.fog;
    _currentMaterialId = -1;
    _lightsNeedUpdate = true;
    if(this.autoUpdateScene) {
      scene.updateMatrixWorld()
    }
    if(camera.parent === undefined) {
      camera.updateMatrixWorld()
    }
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    _frustum.setFromMatrix(_projScreenMatrix);
    if(this.autoUpdateObjects) {
      this.initWebGLObjects(scene)
    }
    renderPlugins(this.renderPluginsPre, scene, camera);
    _this.info.render.calls = 0;
    _this.info.render.vertices = 0;
    _this.info.render.faces = 0;
    _this.info.render.points = 0;
    this.setRenderTarget(renderTarget);
    if(this.autoClear || forceClear) {
      this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil)
    }
    renderList = scene.__webglObjects;
    for(i = 0, il = renderList.length;i < il;i++) {
      webglObject = renderList[i];
      object = webglObject.object;
      webglObject.render = false;
      if(object.visible) {
        if(!(object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem) || !object.frustumCulled || _frustum.intersectsObject(object)) {
          setupMatrices(object, camera);
          unrollBufferMaterial(webglObject);
          webglObject.render = true;
          if(this.sortObjects === true) {
            if(object.renderDepth !== null) {
              webglObject.z = object.renderDepth
            }else {
              _vector3.copy(object.matrixWorld.getPosition());
              _vector3.applyProjection(_projScreenMatrix);
              webglObject.z = _vector3.z
            }
            webglObject.id = object.id
          }
        }
      }
    }
    if(this.sortObjects) {
      renderList.sort(painterSortStable)
    }
    renderList = scene.__webglObjectsImmediate;
    for(i = 0, il = renderList.length;i < il;i++) {
      webglObject = renderList[i];
      object = webglObject.object;
      if(object.visible) {
        setupMatrices(object, camera);
        unrollImmediateBufferMaterial(webglObject)
      }
    }
    if(scene.overrideMaterial) {
      var material = scene.overrideMaterial;
      this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst);
      this.setDepthTest(material.depthTest);
      this.setDepthWrite(material.depthWrite);
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
      renderObjects(scene.__webglObjects, false, "", camera, lights, fog, true, material);
      renderObjectsImmediate(scene.__webglObjectsImmediate, "", camera, lights, fog, false, material)
    }else {
      var material = null;
      this.setBlending(THREE.NoBlending);
      renderObjects(scene.__webglObjects, true, "opaque", camera, lights, fog, false, material);
      renderObjectsImmediate(scene.__webglObjectsImmediate, "opaque", camera, lights, fog, false, material);
      renderObjects(scene.__webglObjects, false, "transparent", camera, lights, fog, true, material);
      renderObjectsImmediate(scene.__webglObjectsImmediate, "transparent", camera, lights, fog, true, material)
    }
    renderPlugins(this.renderPluginsPost, scene, camera);
    if(renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter) {
      updateRenderTargetMipmap(renderTarget)
    }
    this.setDepthTest(true);
    this.setDepthWrite(true)
  };
  function renderPlugins(plugins, scene, camera) {
    if(!plugins.length) {
      return
    }
    for(var i = 0, il = plugins.length;i < il;i++) {
      _currentProgram = null;
      _currentCamera = null;
      _oldBlending = -1;
      _oldDepthTest = -1;
      _oldDepthWrite = -1;
      _oldDoubleSided = -1;
      _oldFlipSided = -1;
      _currentGeometryGroupHash = -1;
      _currentMaterialId = -1;
      _lightsNeedUpdate = true;
      plugins[i].render(scene, camera, _currentWidth, _currentHeight);
      _currentProgram = null;
      _currentCamera = null;
      _oldBlending = -1;
      _oldDepthTest = -1;
      _oldDepthWrite = -1;
      _oldDoubleSided = -1;
      _oldFlipSided = -1;
      _currentGeometryGroupHash = -1;
      _currentMaterialId = -1;
      _lightsNeedUpdate = true
    }
  }
  function renderObjects(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
    var webglObject, object, buffer, material, start, end, delta;
    if(reverse) {
      start = renderList.length - 1;
      end = -1;
      delta = -1
    }else {
      start = 0;
      end = renderList.length;
      delta = 1
    }
    for(var i = start;i !== end;i += delta) {
      webglObject = renderList[i];
      if(webglObject.render) {
        object = webglObject.object;
        buffer = webglObject.buffer;
        if(overrideMaterial) {
          material = overrideMaterial
        }else {
          material = webglObject[materialType];
          if(!material) {
            continue
          }
          if(useBlending) {
            _this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst)
          }
          _this.setDepthTest(material.depthTest);
          _this.setDepthWrite(material.depthWrite);
          setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits)
        }
        _this.setMaterialFaces(material);
        if(buffer instanceof THREE.BufferGeometry) {
          _this.renderBufferDirect(camera, lights, fog, material, buffer, object)
        }else {
          _this.renderBuffer(camera, lights, fog, material, buffer, object)
        }
      }
    }
  }
  function renderObjectsImmediate(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
    var webglObject, object, material, program;
    for(var i = 0, il = renderList.length;i < il;i++) {
      webglObject = renderList[i];
      object = webglObject.object;
      if(object.visible) {
        if(overrideMaterial) {
          material = overrideMaterial
        }else {
          material = webglObject[materialType];
          if(!material) {
            continue
          }
          if(useBlending) {
            _this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst)
          }
          _this.setDepthTest(material.depthTest);
          _this.setDepthWrite(material.depthWrite);
          setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits)
        }
        _this.renderImmediateObject(camera, lights, fog, material, object)
      }
    }
  }
  this.renderImmediateObject = function(camera, lights, fog, material, object) {
    var program = setProgram(camera, lights, fog, material, object);
    _currentGeometryGroupHash = -1;
    _this.setMaterialFaces(material);
    if(object.immediateRenderCallback) {
      object.immediateRenderCallback(program, _gl, _frustum)
    }else {
      object.render(function(object) {
        _this.renderBufferImmediate(object, program, material)
      })
    }
  };
  function unrollImmediateBufferMaterial(globject) {
    var object = globject.object, material = object.material;
    if(material.transparent) {
      globject.transparent = material;
      globject.opaque = null
    }else {
      globject.opaque = material;
      globject.transparent = null
    }
  }
  function unrollBufferMaterial(globject) {
    var object = globject.object, buffer = globject.buffer, material, materialIndex, meshMaterial;
    meshMaterial = object.material;
    if(meshMaterial instanceof THREE.MeshFaceMaterial) {
      materialIndex = buffer.materialIndex;
      material = meshMaterial.materials[materialIndex];
      if(material.transparent) {
        globject.transparent = material;
        globject.opaque = null
      }else {
        globject.opaque = material;
        globject.transparent = null
      }
    }else {
      material = meshMaterial;
      if(material) {
        if(material.transparent) {
          globject.transparent = material;
          globject.opaque = null
        }else {
          globject.opaque = material;
          globject.transparent = null
        }
      }
    }
  }
  function sortFacesByMaterial(geometry, material) {
    var f, fl, face, materialIndex, vertices, groupHash, hash_map = {};
    var numMorphTargets = geometry.morphTargets.length;
    var numMorphNormals = geometry.morphNormals.length;
    var usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;
    geometry.geometryGroups = {};
    for(f = 0, fl = geometry.faces.length;f < fl;f++) {
      face = geometry.faces[f];
      materialIndex = usesFaceMaterial ? face.materialIndex : 0;
      if(hash_map[materialIndex] === undefined) {
        hash_map[materialIndex] = {"hash":materialIndex, "counter":0}
      }
      groupHash = hash_map[materialIndex].hash + "_" + hash_map[materialIndex].counter;
      if(geometry.geometryGroups[groupHash] === undefined) {
        geometry.geometryGroups[groupHash] = {"faces3":[], "faces4":[], "materialIndex":materialIndex, "vertices":0, "numMorphTargets":numMorphTargets, "numMorphNormals":numMorphNormals}
      }
      vertices = face instanceof THREE.Face3 ? 3 : 4;
      if(geometry.geometryGroups[groupHash].vertices + vertices > 65535) {
        hash_map[materialIndex].counter += 1;
        groupHash = hash_map[materialIndex].hash + "_" + hash_map[materialIndex].counter;
        if(geometry.geometryGroups[groupHash] === undefined) {
          geometry.geometryGroups[groupHash] = {"faces3":[], "faces4":[], "materialIndex":materialIndex, "vertices":0, "numMorphTargets":numMorphTargets, "numMorphNormals":numMorphNormals}
        }
      }
      if(face instanceof THREE.Face3) {
        geometry.geometryGroups[groupHash].faces3.push(f)
      }else {
        geometry.geometryGroups[groupHash].faces4.push(f)
      }
      geometry.geometryGroups[groupHash].vertices += vertices
    }
    geometry.geometryGroupsList = [];
    for(var g in geometry.geometryGroups) {
      geometry.geometryGroups[g].id = _geometryGroupCounter++;
      geometry.geometryGroupsList.push(geometry.geometryGroups[g])
    }
  }
  this.initWebGLObjects = function(scene) {
    if(!scene.__webglObjects) {
      scene.__webglObjects = [];
      scene.__webglObjectsImmediate = [];
      scene.__webglSprites = [];
      scene.__webglFlares = []
    }
    while(scene.__objectsAdded.length) {
      addObject(scene.__objectsAdded[0], scene);
      scene.__objectsAdded.splice(0, 1)
    }
    while(scene.__objectsRemoved.length) {
      removeObject(scene.__objectsRemoved[0], scene);
      scene.__objectsRemoved.splice(0, 1)
    }
    for(var o = 0, ol = scene.__webglObjects.length;o < ol;o++) {
      updateObject(scene.__webglObjects[o].object)
    }
  };
  function addObject(object, scene) {
    var g, geometry, material, geometryGroup;
    if(!object.__webglInit) {
      object.__webglInit = true;
      object._modelViewMatrix = new THREE.Matrix4;
      object._normalMatrix = new THREE.Matrix3;
      if(object.geometry !== undefined && object.geometry.__webglInit === undefined) {
        object.geometry.__webglInit = true;
        object.geometry.addEventListener("dispose", onGeometryDispose)
      }
      if(object instanceof THREE.Mesh) {
        geometry = object.geometry;
        material = object.material;
        if(geometry instanceof THREE.Geometry) {
          if(geometry.geometryGroups === undefined) {
            sortFacesByMaterial(geometry, material)
          }
          for(g in geometry.geometryGroups) {
            geometryGroup = geometry.geometryGroups[g];
            if(!geometryGroup.__webglVertexBuffer) {
              createMeshBuffers(geometryGroup);
              initMeshBuffers(geometryGroup, object);
              geometry.verticesNeedUpdate = true;
              geometry.morphTargetsNeedUpdate = true;
              geometry.elementsNeedUpdate = true;
              geometry.uvsNeedUpdate = true;
              geometry.normalsNeedUpdate = true;
              geometry.tangentsNeedUpdate = true;
              geometry.colorsNeedUpdate = true
            }
          }
        }else {
          if(geometry instanceof THREE.BufferGeometry) {
            initDirectBuffers(geometry)
          }
        }
      }else {
        if(object instanceof THREE.Ribbon) {
          geometry = object.geometry;
          if(!geometry.__webglVertexBuffer) {
            createRibbonBuffers(geometry);
            initRibbonBuffers(geometry, object);
            geometry.verticesNeedUpdate = true;
            geometry.colorsNeedUpdate = true;
            geometry.normalsNeedUpdate = true
          }
        }else {
          if(object instanceof THREE.Line) {
            geometry = object.geometry;
            if(!geometry.__webglVertexBuffer) {
              if(geometry instanceof THREE.Geometry) {
                createLineBuffers(geometry);
                initLineBuffers(geometry, object);
                geometry.verticesNeedUpdate = true;
                geometry.colorsNeedUpdate = true;
                geometry.lineDistancesNeedUpdate = true
              }else {
                if(geometry instanceof THREE.BufferGeometry) {
                  initDirectBuffers(geometry)
                }
              }
            }
          }else {
            if(object instanceof THREE.ParticleSystem) {
              geometry = object.geometry;
              if(!geometry.__webglVertexBuffer) {
                if(geometry instanceof THREE.Geometry) {
                  createParticleBuffers(geometry);
                  initParticleBuffers(geometry, object);
                  geometry.verticesNeedUpdate = true;
                  geometry.colorsNeedUpdate = true
                }else {
                  if(geometry instanceof THREE.BufferGeometry) {
                    initDirectBuffers(geometry)
                  }
                }
              }
            }
          }
        }
      }
    }
    if(!object.__webglActive) {
      if(object instanceof THREE.Mesh) {
        geometry = object.geometry;
        if(geometry instanceof THREE.BufferGeometry) {
          addBuffer(scene.__webglObjects, geometry, object)
        }else {
          if(geometry instanceof THREE.Geometry) {
            for(g in geometry.geometryGroups) {
              geometryGroup = geometry.geometryGroups[g];
              addBuffer(scene.__webglObjects, geometryGroup, object)
            }
          }
        }
      }else {
        if(object instanceof THREE.Ribbon || object instanceof THREE.Line || object instanceof THREE.ParticleSystem) {
          geometry = object.geometry;
          addBuffer(scene.__webglObjects, geometry, object)
        }else {
          if(object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback) {
            addBufferImmediate(scene.__webglObjectsImmediate, object)
          }else {
            if(object instanceof THREE.Sprite) {
              scene.__webglSprites.push(object)
            }else {
              if(object instanceof THREE.LensFlare) {
                scene.__webglFlares.push(object)
              }
            }
          }
        }
      }
      object.__webglActive = true
    }
  }
  function addBuffer(objlist, buffer, object) {
    objlist.push({buffer:buffer, object:object, opaque:null, transparent:null})
  }
  function addBufferImmediate(objlist, object) {
    objlist.push({object:object, opaque:null, transparent:null})
  }
  function updateObject(object) {
    var geometry = object.geometry, geometryGroup, customAttributesDirty, material;
    if(object instanceof THREE.Mesh) {
      if(geometry instanceof THREE.BufferGeometry) {
        if(geometry.verticesNeedUpdate || geometry.elementsNeedUpdate || geometry.uvsNeedUpdate || geometry.normalsNeedUpdate || geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate) {
          setDirectBuffers(geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic)
        }
        geometry.verticesNeedUpdate = false;
        geometry.elementsNeedUpdate = false;
        geometry.uvsNeedUpdate = false;
        geometry.normalsNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.tangentsNeedUpdate = false
      }else {
        for(var i = 0, il = geometry.geometryGroupsList.length;i < il;i++) {
          geometryGroup = geometry.geometryGroupsList[i];
          material = getBufferMaterial(object, geometryGroup);
          if(geometry.buffersNeedUpdate) {
            initMeshBuffers(geometryGroup, object)
          }
          customAttributesDirty = material.attributes && areCustomAttributesDirty(material);
          if(geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate || geometry.uvsNeedUpdate || geometry.normalsNeedUpdate || geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty) {
            setMeshBuffers(geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material)
          }
        }
        geometry.verticesNeedUpdate = false;
        geometry.morphTargetsNeedUpdate = false;
        geometry.elementsNeedUpdate = false;
        geometry.uvsNeedUpdate = false;
        geometry.normalsNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.tangentsNeedUpdate = false;
        geometry.buffersNeedUpdate = false;
        material.attributes && clearCustomAttributes(material)
      }
    }else {
      if(object instanceof THREE.Ribbon) {
        material = getBufferMaterial(object, geometry);
        customAttributesDirty = material.attributes && areCustomAttributesDirty(material);
        if(geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.normalsNeedUpdate || customAttributesDirty) {
          setRibbonBuffers(geometry, _gl.DYNAMIC_DRAW)
        }
        geometry.verticesNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.normalsNeedUpdate = false;
        material.attributes && clearCustomAttributes(material)
      }else {
        if(object instanceof THREE.Line) {
          if(geometry instanceof THREE.BufferGeometry) {
            if(geometry.verticesNeedUpdate || geometry.colorsNeedUpdate) {
              setDirectBuffers(geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic)
            }
            geometry.verticesNeedUpdate = false;
            geometry.colorsNeedUpdate = false
          }else {
            material = getBufferMaterial(object, geometry);
            customAttributesDirty = material.attributes && areCustomAttributesDirty(material);
            if(geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty) {
              setLineBuffers(geometry, _gl.DYNAMIC_DRAW)
            }
            geometry.verticesNeedUpdate = false;
            geometry.colorsNeedUpdate = false;
            geometry.lineDistancesNeedUpdate = false;
            material.attributes && clearCustomAttributes(material)
          }
        }else {
          if(object instanceof THREE.ParticleSystem) {
            if(geometry instanceof THREE.BufferGeometry) {
              if(geometry.verticesNeedUpdate || geometry.colorsNeedUpdate) {
                setDirectBuffers(geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic)
              }
              geometry.verticesNeedUpdate = false;
              geometry.colorsNeedUpdate = false
            }else {
              material = getBufferMaterial(object, geometry);
              customAttributesDirty = material.attributes && areCustomAttributesDirty(material);
              if(geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty) {
                setParticleBuffers(geometry, _gl.DYNAMIC_DRAW, object)
              }
              geometry.verticesNeedUpdate = false;
              geometry.colorsNeedUpdate = false;
              material.attributes && clearCustomAttributes(material)
            }
          }
        }
      }
    }
  }
  function areCustomAttributesDirty(material) {
    for(var a in material.attributes) {
      if(material.attributes[a].needsUpdate) {
        return true
      }
    }
    return false
  }
  function clearCustomAttributes(material) {
    for(var a in material.attributes) {
      material.attributes[a].needsUpdate = false
    }
  }
  function removeObject(object, scene) {
    if(object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem || object instanceof THREE.Ribbon || object instanceof THREE.Line) {
      removeInstances(scene.__webglObjects, object)
    }else {
      if(object instanceof THREE.Sprite) {
        removeInstancesDirect(scene.__webglSprites, object)
      }else {
        if(object instanceof THREE.LensFlare) {
          removeInstancesDirect(scene.__webglFlares, object)
        }else {
          if(object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback) {
            removeInstances(scene.__webglObjectsImmediate, object)
          }
        }
      }
    }
    object.__webglActive = false
  }
  function removeInstances(objlist, object) {
    for(var o = objlist.length - 1;o >= 0;o--) {
      if(objlist[o].object === object) {
        objlist.splice(o, 1)
      }
    }
  }
  function removeInstancesDirect(objlist, object) {
    for(var o = objlist.length - 1;o >= 0;o--) {
      if(objlist[o] === object) {
        objlist.splice(o, 1)
      }
    }
  }
  this.initMaterial = function(material, lights, fog, object) {
    material.addEventListener("dispose", onMaterialDispose);
    var u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;
    if(material instanceof THREE.MeshDepthMaterial) {
      shaderID = "depth"
    }else {
      if(material instanceof THREE.MeshNormalMaterial) {
        shaderID = "normal"
      }else {
        if(material instanceof THREE.MeshBasicMaterial) {
          shaderID = "basic"
        }else {
          if(material instanceof THREE.MeshLambertMaterial) {
            shaderID = "lambert"
          }else {
            if(material instanceof THREE.MeshPhongMaterial) {
              shaderID = "phong"
            }else {
              if(material instanceof THREE.LineBasicMaterial) {
                shaderID = "basic"
              }else {
                if(material instanceof THREE.LineDashedMaterial) {
                  shaderID = "dashed"
                }else {
                  if(material instanceof THREE.ParticleBasicMaterial) {
                    shaderID = "particle_basic"
                  }
                }
              }
            }
          }
        }
      }
    }
    if(shaderID) {
      setMaterialShaders(material, THREE.ShaderLib[shaderID])
    }
    maxLightCount = allocateLights(lights);
    maxShadows = allocateShadows(lights);
    maxBones = allocateBones(object);
    parameters = {map:!!material.map, envMap:!!material.envMap, lightMap:!!material.lightMap, bumpMap:!!material.bumpMap, normalMap:!!material.normalMap, specularMap:!!material.specularMap, vertexColors:material.vertexColors, fog:fog, useFog:material.fog, fogExp:fog instanceof THREE.FogExp2, sizeAttenuation:material.sizeAttenuation, skinning:material.skinning, maxBones:maxBones, useVertexTexture:_supportsBoneTextures && object && object.useVertexTexture, boneTextureWidth:object && object.boneTextureWidth, 
    boneTextureHeight:object && object.boneTextureHeight, morphTargets:material.morphTargets, morphNormals:material.morphNormals, maxMorphTargets:this.maxMorphTargets, maxMorphNormals:this.maxMorphNormals, maxDirLights:maxLightCount.directional, maxPointLights:maxLightCount.point, maxSpotLights:maxLightCount.spot, maxHemiLights:maxLightCount.hemi, maxShadows:maxShadows, shadowMapEnabled:this.shadowMapEnabled && object.receiveShadow, shadowMapType:this.shadowMapType, shadowMapDebug:this.shadowMapDebug, 
    shadowMapCascade:this.shadowMapCascade, alphaTest:material.alphaTest, metal:material.metal, perPixel:material.perPixel, wrapAround:material.wrapAround, doubleSided:material.side === THREE.DoubleSide, flipSided:material.side === THREE.BackSide};
    material.program = buildProgram(shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters);
    var attributes = material.program.attributes;
    if(material.morphTargets) {
      material.numSupportedMorphTargets = 0;
      var id, base = "morphTarget";
      for(i = 0;i < this.maxMorphTargets;i++) {
        id = base + i;
        if(attributes[id] >= 0) {
          material.numSupportedMorphTargets++
        }
      }
    }
    if(material.morphNormals) {
      material.numSupportedMorphNormals = 0;
      var id, base = "morphNormal";
      for(i = 0;i < this.maxMorphNormals;i++) {
        id = base + i;
        if(attributes[id] >= 0) {
          material.numSupportedMorphNormals++
        }
      }
    }
    material.uniformsList = [];
    for(u in material.uniforms) {
      material.uniformsList.push([material.uniforms[u], u])
    }
  };
  function setMaterialShaders(material, shaders) {
    material.uniforms = THREE.UniformsUtils.clone(shaders.uniforms);
    material.vertexShader = shaders.vertexShader;
    material.fragmentShader = shaders.fragmentShader
  }
  function setProgram(camera, lights, fog, material, object) {
    _usedTextureUnits = 0;
    if(material.needsUpdate) {
      if(material.program) {
        deallocateMaterial(material)
      }
      _this.initMaterial(material, lights, fog, object);
      material.needsUpdate = false
    }
    if(material.morphTargets) {
      if(!object.__webglMorphTargetInfluences) {
        object.__webglMorphTargetInfluences = new Float32Array(_this.maxMorphTargets)
      }
    }
    var refreshMaterial = false;
    var program = material.program, p_uniforms = program.uniforms, m_uniforms = material.uniforms;
    if(program !== _currentProgram) {
      _gl.useProgram(program);
      _currentProgram = program;
      refreshMaterial = true
    }
    if(material.id !== _currentMaterialId) {
      _currentMaterialId = material.id;
      refreshMaterial = true
    }
    if(refreshMaterial || camera !== _currentCamera) {
      _gl.uniformMatrix4fv(p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements);
      if(camera !== _currentCamera) {
        _currentCamera = camera
      }
    }
    if(material.skinning) {
      if(_supportsBoneTextures && object.useVertexTexture) {
        if(p_uniforms.boneTexture !== null) {
          var textureUnit = getTextureUnit();
          _gl.uniform1i(p_uniforms.boneTexture, textureUnit);
          _this.setTexture(object.boneTexture, textureUnit)
        }
      }else {
        if(p_uniforms.boneGlobalMatrices !== null) {
          _gl.uniformMatrix4fv(p_uniforms.boneGlobalMatrices, false, object.boneMatrices)
        }
      }
    }
    if(refreshMaterial) {
      if(fog && material.fog) {
        refreshUniformsFog(m_uniforms, fog)
      }
      if(material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshLambertMaterial || material.lights) {
        if(_lightsNeedUpdate) {
          setupLights(program, lights);
          _lightsNeedUpdate = false
        }
        refreshUniformsLights(m_uniforms, _lights)
      }
      if(material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {
        refreshUniformsCommon(m_uniforms, material)
      }
      if(material instanceof THREE.LineBasicMaterial) {
        refreshUniformsLine(m_uniforms, material)
      }else {
        if(material instanceof THREE.LineDashedMaterial) {
          refreshUniformsLine(m_uniforms, material);
          refreshUniformsDash(m_uniforms, material)
        }else {
          if(material instanceof THREE.ParticleBasicMaterial) {
            refreshUniformsParticle(m_uniforms, material)
          }else {
            if(material instanceof THREE.MeshPhongMaterial) {
              refreshUniformsPhong(m_uniforms, material)
            }else {
              if(material instanceof THREE.MeshLambertMaterial) {
                refreshUniformsLambert(m_uniforms, material)
              }else {
                if(material instanceof THREE.MeshDepthMaterial) {
                  m_uniforms.mNear.value = camera.near;
                  m_uniforms.mFar.value = camera.far;
                  m_uniforms.opacity.value = material.opacity
                }else {
                  if(material instanceof THREE.MeshNormalMaterial) {
                    m_uniforms.opacity.value = material.opacity
                  }
                }
              }
            }
          }
        }
      }
      if(object.receiveShadow && !material._shadowPass) {
        refreshUniformsShadow(m_uniforms, lights)
      }
      loadUniformsGeneric(program, material.uniformsList);
      if(material instanceof THREE.ShaderMaterial || material instanceof THREE.MeshPhongMaterial || material.envMap) {
        if(p_uniforms.cameraPosition !== null) {
          var position = camera.matrixWorld.getPosition();
          _gl.uniform3f(p_uniforms.cameraPosition, position.x, position.y, position.z)
        }
      }
      if(material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.ShaderMaterial || material.skinning) {
        if(p_uniforms.viewMatrix !== null) {
          _gl.uniformMatrix4fv(p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements)
        }
      }
    }
    loadUniformsMatrices(p_uniforms, object);
    if(p_uniforms.modelMatrix !== null) {
      _gl.uniformMatrix4fv(p_uniforms.modelMatrix, false, object.matrixWorld.elements)
    }
    return program
  }
  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;
    if(_this.gammaInput) {
      uniforms.diffuse.value.copyGammaToLinear(material.color)
    }else {
      uniforms.diffuse.value = material.color
    }
    uniforms.map.value = material.map;
    uniforms.lightMap.value = material.lightMap;
    uniforms.specularMap.value = material.specularMap;
    if(material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale
    }
    if(material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale)
    }
    var uvScaleMap;
    if(material.map) {
      uvScaleMap = material.map
    }else {
      if(material.specularMap) {
        uvScaleMap = material.specularMap
      }else {
        if(material.normalMap) {
          uvScaleMap = material.normalMap
        }else {
          if(material.bumpMap) {
            uvScaleMap = material.bumpMap
          }
        }
      }
    }
    if(uvScaleMap !== undefined) {
      var offset = uvScaleMap.offset;
      var repeat = uvScaleMap.repeat;
      uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y)
    }
    uniforms.envMap.value = material.envMap;
    uniforms.flipEnvMap.value = material.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1;
    if(_this.gammaInput) {
      uniforms.reflectivity.value = material.reflectivity
    }else {
      uniforms.reflectivity.value = material.reflectivity
    }
    uniforms.refractionRatio.value = material.refractionRatio;
    uniforms.combine.value = material.combine;
    uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping
  }
  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value = material.color;
    uniforms.opacity.value = material.opacity
  }
  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale
  }
  function refreshUniformsParticle(uniforms, material) {
    uniforms.psColor.value = material.color;
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size;
    uniforms.scale.value = _canvas.height / 2;
    uniforms.map.value = material.map
  }
  function refreshUniformsFog(uniforms, fog) {
    uniforms.fogColor.value = fog.color;
    if(fog instanceof THREE.Fog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far
    }else {
      if(fog instanceof THREE.FogExp2) {
        uniforms.fogDensity.value = fog.density
      }
    }
  }
  function refreshUniformsPhong(uniforms, material) {
    uniforms.shininess.value = material.shininess;
    if(_this.gammaInput) {
      uniforms.ambient.value.copyGammaToLinear(material.ambient);
      uniforms.emissive.value.copyGammaToLinear(material.emissive);
      uniforms.specular.value.copyGammaToLinear(material.specular)
    }else {
      uniforms.ambient.value = material.ambient;
      uniforms.emissive.value = material.emissive;
      uniforms.specular.value = material.specular
    }
    if(material.wrapAround) {
      uniforms.wrapRGB.value.copy(material.wrapRGB)
    }
  }
  function refreshUniformsLambert(uniforms, material) {
    if(_this.gammaInput) {
      uniforms.ambient.value.copyGammaToLinear(material.ambient);
      uniforms.emissive.value.copyGammaToLinear(material.emissive)
    }else {
      uniforms.ambient.value = material.ambient;
      uniforms.emissive.value = material.emissive
    }
    if(material.wrapAround) {
      uniforms.wrapRGB.value.copy(material.wrapRGB)
    }
  }
  function refreshUniformsLights(uniforms, lights) {
    uniforms.ambientLightColor.value = lights.ambient;
    uniforms.directionalLightColor.value = lights.directional.colors;
    uniforms.directionalLightDirection.value = lights.directional.positions;
    uniforms.pointLightColor.value = lights.point.colors;
    uniforms.pointLightPosition.value = lights.point.positions;
    uniforms.pointLightDistance.value = lights.point.distances;
    uniforms.spotLightColor.value = lights.spot.colors;
    uniforms.spotLightPosition.value = lights.spot.positions;
    uniforms.spotLightDistance.value = lights.spot.distances;
    uniforms.spotLightDirection.value = lights.spot.directions;
    uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
    uniforms.spotLightExponent.value = lights.spot.exponents;
    uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
    uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
    uniforms.hemisphereLightDirection.value = lights.hemi.positions
  }
  function refreshUniformsShadow(uniforms, lights) {
    if(uniforms.shadowMatrix) {
      var j = 0;
      for(var i = 0, il = lights.length;i < il;i++) {
        var light = lights[i];
        if(!light.castShadow) {
          continue
        }
        if(light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight && !light.shadowCascade) {
          uniforms.shadowMap.value[j] = light.shadowMap;
          uniforms.shadowMapSize.value[j] = light.shadowMapSize;
          uniforms.shadowMatrix.value[j] = light.shadowMatrix;
          uniforms.shadowDarkness.value[j] = light.shadowDarkness;
          uniforms.shadowBias.value[j] = light.shadowBias;
          j++
        }
      }
    }
  }
  function loadUniformsMatrices(uniforms, object) {
    _gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, object._modelViewMatrix.elements);
    if(uniforms.normalMatrix) {
      _gl.uniformMatrix3fv(uniforms.normalMatrix, false, object._normalMatrix.elements)
    }
  }
  function getTextureUnit() {
    var textureUnit = _usedTextureUnits;
    if(textureUnit >= _maxTextures) {
      console.warn("WebGLRenderer: trying to use " + textureUnit + " texture units while this GPU supports only " + _maxTextures)
    }
    _usedTextureUnits += 1;
    return textureUnit
  }
  function loadUniformsGeneric(program, uniforms) {
    var uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;
    for(j = 0, jl = uniforms.length;j < jl;j++) {
      location = program.uniforms[uniforms[j][1]];
      if(!location) {
        continue
      }
      uniform = uniforms[j][0];
      type = uniform.type;
      value = uniform.value;
      if(type === "i") {
        _gl.uniform1i(location, value)
      }else {
        if(type === "f") {
          _gl.uniform1f(location, value)
        }else {
          if(type === "v2") {
            _gl.uniform2f(location, value.x, value.y)
          }else {
            if(type === "v3") {
              _gl.uniform3f(location, value.x, value.y, value.z)
            }else {
              if(type === "v4") {
                _gl.uniform4f(location, value.x, value.y, value.z, value.w)
              }else {
                if(type === "c") {
                  _gl.uniform3f(location, value.r, value.g, value.b)
                }else {
                  if(type === "iv1") {
                    _gl.uniform1iv(location, value)
                  }else {
                    if(type === "iv") {
                      _gl.uniform3iv(location, value)
                    }else {
                      if(type === "fv1") {
                        _gl.uniform1fv(location, value)
                      }else {
                        if(type === "fv") {
                          _gl.uniform3fv(location, value)
                        }else {
                          if(type === "v2v") {
                            if(uniform._array === undefined) {
                              uniform._array = new Float32Array(2 * value.length)
                            }
                            for(i = 0, il = value.length;i < il;i++) {
                              offset = i * 2;
                              uniform._array[offset] = value[i].x;
                              uniform._array[offset + 1] = value[i].y
                            }
                            _gl.uniform2fv(location, uniform._array)
                          }else {
                            if(type === "v3v") {
                              if(uniform._array === undefined) {
                                uniform._array = new Float32Array(3 * value.length)
                              }
                              for(i = 0, il = value.length;i < il;i++) {
                                offset = i * 3;
                                uniform._array[offset] = value[i].x;
                                uniform._array[offset + 1] = value[i].y;
                                uniform._array[offset + 2] = value[i].z
                              }
                              _gl.uniform3fv(location, uniform._array)
                            }else {
                              if(type === "v4v") {
                                if(uniform._array === undefined) {
                                  uniform._array = new Float32Array(4 * value.length)
                                }
                                for(i = 0, il = value.length;i < il;i++) {
                                  offset = i * 4;
                                  uniform._array[offset] = value[i].x;
                                  uniform._array[offset + 1] = value[i].y;
                                  uniform._array[offset + 2] = value[i].z;
                                  uniform._array[offset + 3] = value[i].w
                                }
                                _gl.uniform4fv(location, uniform._array)
                              }else {
                                if(type === "m4") {
                                  if(uniform._array === undefined) {
                                    uniform._array = new Float32Array(16)
                                  }
                                  value.flattenToArray(uniform._array);
                                  _gl.uniformMatrix4fv(location, false, uniform._array)
                                }else {
                                  if(type === "m4v") {
                                    if(uniform._array === undefined) {
                                      uniform._array = new Float32Array(16 * value.length)
                                    }
                                    for(i = 0, il = value.length;i < il;i++) {
                                      value[i].flattenToArrayOffset(uniform._array, i * 16)
                                    }
                                    _gl.uniformMatrix4fv(location, false, uniform._array)
                                  }else {
                                    if(type === "t") {
                                      texture = value;
                                      textureUnit = getTextureUnit();
                                      _gl.uniform1i(location, textureUnit);
                                      if(!texture) {
                                        continue
                                      }
                                      if(texture.image instanceof Array && texture.image.length === 6) {
                                        setCubeTexture(texture, textureUnit)
                                      }else {
                                        if(texture instanceof THREE.WebGLRenderTargetCube) {
                                          setCubeTextureDynamic(texture, textureUnit)
                                        }else {
                                          _this.setTexture(texture, textureUnit)
                                        }
                                      }
                                    }else {
                                      if(type === "tv") {
                                        if(uniform._array === undefined) {
                                          uniform._array = []
                                        }
                                        for(i = 0, il = uniform.value.length;i < il;i++) {
                                          uniform._array[i] = getTextureUnit()
                                        }
                                        _gl.uniform1iv(location, uniform._array);
                                        for(i = 0, il = uniform.value.length;i < il;i++) {
                                          texture = uniform.value[i];
                                          textureUnit = uniform._array[i];
                                          if(!texture) {
                                            continue
                                          }
                                          _this.setTexture(texture, textureUnit)
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function setupMatrices(object, camera) {
    object._modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    object._normalMatrix.getInverse(object._modelViewMatrix);
    object._normalMatrix.transpose()
  }
  function setColorGamma(array, offset, color, intensitySq) {
    array[offset] = color.r * color.r * intensitySq;
    array[offset + 1] = color.g * color.g * intensitySq;
    array[offset + 2] = color.b * color.b * intensitySq
  }
  function setColorLinear(array, offset, color, intensity) {
    array[offset] = color.r * intensity;
    array[offset + 1] = color.g * intensity;
    array[offset + 2] = color.b * intensity
  }
  function setupLights(program, lights) {
    var l, ll, light, n, r = 0, g = 0, b = 0, color, skyColor, groundColor, intensity, intensitySq, position, distance, zlights = _lights, dirColors = zlights.directional.colors, dirPositions = zlights.directional.positions, pointColors = zlights.point.colors, pointPositions = zlights.point.positions, pointDistances = zlights.point.distances, spotColors = zlights.spot.colors, spotPositions = zlights.spot.positions, spotDistances = zlights.spot.distances, spotDirections = zlights.spot.directions, 
    spotAnglesCos = zlights.spot.anglesCos, spotExponents = zlights.spot.exponents, hemiSkyColors = zlights.hemi.skyColors, hemiGroundColors = zlights.hemi.groundColors, hemiPositions = zlights.hemi.positions, dirLength = 0, pointLength = 0, spotLength = 0, hemiLength = 0, dirCount = 0, pointCount = 0, spotCount = 0, hemiCount = 0, dirOffset = 0, pointOffset = 0, spotOffset = 0, hemiOffset = 0;
    for(l = 0, ll = lights.length;l < ll;l++) {
      light = lights[l];
      if(light.onlyShadow) {
        continue
      }
      color = light.color;
      intensity = light.intensity;
      distance = light.distance;
      if(light instanceof THREE.AmbientLight) {
        if(!light.visible) {
          continue
        }
        if(_this.gammaInput) {
          r += color.r * color.r;
          g += color.g * color.g;
          b += color.b * color.b
        }else {
          r += color.r;
          g += color.g;
          b += color.b
        }
      }else {
        if(light instanceof THREE.DirectionalLight) {
          dirCount += 1;
          if(!light.visible) {
            continue
          }
          _direction.copy(light.matrixWorld.getPosition());
          _direction.sub(light.target.matrixWorld.getPosition());
          _direction.normalize();
          if(_direction.x === 0 && _direction.y === 0 && _direction.z === 0) {
            continue
          }
          dirOffset = dirLength * 3;
          dirPositions[dirOffset] = _direction.x;
          dirPositions[dirOffset + 1] = _direction.y;
          dirPositions[dirOffset + 2] = _direction.z;
          if(_this.gammaInput) {
            setColorGamma(dirColors, dirOffset, color, intensity * intensity)
          }else {
            setColorLinear(dirColors, dirOffset, color, intensity)
          }
          dirLength += 1
        }else {
          if(light instanceof THREE.PointLight) {
            pointCount += 1;
            if(!light.visible) {
              continue
            }
            pointOffset = pointLength * 3;
            if(_this.gammaInput) {
              setColorGamma(pointColors, pointOffset, color, intensity * intensity)
            }else {
              setColorLinear(pointColors, pointOffset, color, intensity)
            }
            position = light.matrixWorld.getPosition();
            pointPositions[pointOffset] = position.x;
            pointPositions[pointOffset + 1] = position.y;
            pointPositions[pointOffset + 2] = position.z;
            pointDistances[pointLength] = distance;
            pointLength += 1
          }else {
            if(light instanceof THREE.SpotLight) {
              spotCount += 1;
              if(!light.visible) {
                continue
              }
              spotOffset = spotLength * 3;
              if(_this.gammaInput) {
                setColorGamma(spotColors, spotOffset, color, intensity * intensity)
              }else {
                setColorLinear(spotColors, spotOffset, color, intensity)
              }
              position = light.matrixWorld.getPosition();
              spotPositions[spotOffset] = position.x;
              spotPositions[spotOffset + 1] = position.y;
              spotPositions[spotOffset + 2] = position.z;
              spotDistances[spotLength] = distance;
              _direction.copy(position);
              _direction.sub(light.target.matrixWorld.getPosition());
              _direction.normalize();
              spotDirections[spotOffset] = _direction.x;
              spotDirections[spotOffset + 1] = _direction.y;
              spotDirections[spotOffset + 2] = _direction.z;
              spotAnglesCos[spotLength] = Math.cos(light.angle);
              spotExponents[spotLength] = light.exponent;
              spotLength += 1
            }else {
              if(light instanceof THREE.HemisphereLight) {
                hemiCount += 1;
                if(!light.visible) {
                  continue
                }
                _direction.copy(light.matrixWorld.getPosition());
                _direction.normalize();
                if(_direction.x === 0 && _direction.y === 0 && _direction.z === 0) {
                  continue
                }
                hemiOffset = hemiLength * 3;
                hemiPositions[hemiOffset] = _direction.x;
                hemiPositions[hemiOffset + 1] = _direction.y;
                hemiPositions[hemiOffset + 2] = _direction.z;
                skyColor = light.color;
                groundColor = light.groundColor;
                if(_this.gammaInput) {
                  intensitySq = intensity * intensity;
                  setColorGamma(hemiSkyColors, hemiOffset, skyColor, intensitySq);
                  setColorGamma(hemiGroundColors, hemiOffset, groundColor, intensitySq)
                }else {
                  setColorLinear(hemiSkyColors, hemiOffset, skyColor, intensity);
                  setColorLinear(hemiGroundColors, hemiOffset, groundColor, intensity)
                }
                hemiLength += 1
              }
            }
          }
        }
      }
    }
    for(l = dirLength * 3, ll = Math.max(dirColors.length, dirCount * 3);l < ll;l++) {
      dirColors[l] = 0
    }
    for(l = pointLength * 3, ll = Math.max(pointColors.length, pointCount * 3);l < ll;l++) {
      pointColors[l] = 0
    }
    for(l = spotLength * 3, ll = Math.max(spotColors.length, spotCount * 3);l < ll;l++) {
      spotColors[l] = 0
    }
    for(l = hemiLength * 3, ll = Math.max(hemiSkyColors.length, hemiCount * 3);l < ll;l++) {
      hemiSkyColors[l] = 0
    }
    for(l = hemiLength * 3, ll = Math.max(hemiGroundColors.length, hemiCount * 3);l < ll;l++) {
      hemiGroundColors[l] = 0
    }
    zlights.directional.length = dirLength;
    zlights.point.length = pointLength;
    zlights.spot.length = spotLength;
    zlights.hemi.length = hemiLength;
    zlights.ambient[0] = r;
    zlights.ambient[1] = g;
    zlights.ambient[2] = b
  }
  this.setFaceCulling = function(cullFace, frontFaceDirection) {
    if(cullFace === THREE.CullFaceNone) {
      _gl.disable(_gl.CULL_FACE)
    }else {
      if(frontFaceDirection === THREE.FrontFaceDirectionCW) {
        _gl.frontFace(_gl.CW)
      }else {
        _gl.frontFace(_gl.CCW)
      }
      if(cullFace === THREE.CullFaceBack) {
        _gl.cullFace(_gl.BACK)
      }else {
        if(cullFace === THREE.CullFaceFront) {
          _gl.cullFace(_gl.FRONT)
        }else {
          _gl.cullFace(_gl.FRONT_AND_BACK)
        }
      }
      _gl.enable(_gl.CULL_FACE)
    }
  };
  this.setMaterialFaces = function(material) {
    var doubleSided = material.side === THREE.DoubleSide;
    var flipSided = material.side === THREE.BackSide;
    if(_oldDoubleSided !== doubleSided) {
      if(doubleSided) {
        _gl.disable(_gl.CULL_FACE)
      }else {
        _gl.enable(_gl.CULL_FACE)
      }
      _oldDoubleSided = doubleSided
    }
    if(_oldFlipSided !== flipSided) {
      if(flipSided) {
        _gl.frontFace(_gl.CW)
      }else {
        _gl.frontFace(_gl.CCW)
      }
      _oldFlipSided = flipSided
    }
  };
  this.setDepthTest = function(depthTest) {
    if(_oldDepthTest !== depthTest) {
      if(depthTest) {
        _gl.enable(_gl.DEPTH_TEST)
      }else {
        _gl.disable(_gl.DEPTH_TEST)
      }
      _oldDepthTest = depthTest
    }
  };
  this.setDepthWrite = function(depthWrite) {
    if(_oldDepthWrite !== depthWrite) {
      _gl.depthMask(depthWrite);
      _oldDepthWrite = depthWrite
    }
  };
  function setLineWidth(width) {
    if(width !== _oldLineWidth) {
      _gl.lineWidth(width);
      _oldLineWidth = width
    }
  }
  function setPolygonOffset(polygonoffset, factor, units) {
    if(_oldPolygonOffset !== polygonoffset) {
      if(polygonoffset) {
        _gl.enable(_gl.POLYGON_OFFSET_FILL)
      }else {
        _gl.disable(_gl.POLYGON_OFFSET_FILL)
      }
      _oldPolygonOffset = polygonoffset
    }
    if(polygonoffset && (_oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units)) {
      _gl.polygonOffset(factor, units);
      _oldPolygonOffsetFactor = factor;
      _oldPolygonOffsetUnits = units
    }
  }
  this.setBlending = function(blending, blendEquation, blendSrc, blendDst) {
    if(blending !== _oldBlending) {
      if(blending === THREE.NoBlending) {
        _gl.disable(_gl.BLEND)
      }else {
        if(blending === THREE.AdditiveBlending) {
          _gl.enable(_gl.BLEND);
          _gl.blendEquation(_gl.FUNC_ADD);
          _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE)
        }else {
          if(blending === THREE.SubtractiveBlending) {
            _gl.enable(_gl.BLEND);
            _gl.blendEquation(_gl.FUNC_ADD);
            _gl.blendFunc(_gl.ZERO, _gl.ONE_MINUS_SRC_COLOR)
          }else {
            if(blending === THREE.MultiplyBlending) {
              _gl.enable(_gl.BLEND);
              _gl.blendEquation(_gl.FUNC_ADD);
              _gl.blendFunc(_gl.ZERO, _gl.SRC_COLOR)
            }else {
              if(blending === THREE.CustomBlending) {
                _gl.enable(_gl.BLEND)
              }else {
                _gl.enable(_gl.BLEND);
                _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
                _gl.blendFuncSeparate(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA)
              }
            }
          }
        }
      }
      _oldBlending = blending
    }
    if(blending === THREE.CustomBlending) {
      if(blendEquation !== _oldBlendEquation) {
        _gl.blendEquation(paramThreeToGL(blendEquation));
        _oldBlendEquation = blendEquation
      }
      if(blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst) {
        _gl.blendFunc(paramThreeToGL(blendSrc), paramThreeToGL(blendDst));
        _oldBlendSrc = blendSrc;
        _oldBlendDst = blendDst
      }
    }else {
      _oldBlendEquation = null;
      _oldBlendSrc = null;
      _oldBlendDst = null
    }
  };
  function generateDefines(defines) {
    var value, chunk, chunks = [];
    for(var d in defines) {
      value = defines[d];
      if(value === false) {
        continue
      }
      chunk = "#define " + d + " " + value;
      chunks.push(chunk)
    }
    return chunks.join("\n")
  }
  function buildProgram(shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters) {
    var p, pl, d, program, code;
    var chunks = [];
    if(shaderID) {
      chunks.push(shaderID)
    }else {
      chunks.push(fragmentShader);
      chunks.push(vertexShader)
    }
    for(d in defines) {
      chunks.push(d);
      chunks.push(defines[d])
    }
    for(p in parameters) {
      chunks.push(p);
      chunks.push(parameters[p])
    }
    code = chunks.join();
    for(p = 0, pl = _programs.length;p < pl;p++) {
      var programInfo = _programs[p];
      if(programInfo.code === code) {
        programInfo.usedTimes++;
        return programInfo.program
      }
    }
    var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if(parameters.shadowMapType === THREE.PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF"
    }else {
      if(parameters.shadowMapType === THREE.PCFSoftShadowMap) {
        shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT"
      }
    }
    var customDefines = generateDefines(defines);
    program = _gl.createProgram();
    var prefix_vertex = ["precision " + _precision + " float;", customDefines, _supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", _this.gammaInput ? "#define GAMMA_INPUT" : "", _this.gammaOutput ? "#define GAMMA_OUTPUT" : "", _this.physicallyBasedShading ? "#define PHYSICALLY_BASED_SHADING" : "", "#define MAX_DIR_LIGHTS " + parameters.maxDirLights, "#define MAX_POINT_LIGHTS " + parameters.maxPointLights, "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights, "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights, 
    "#define MAX_SHADOWS " + parameters.maxShadows, "#define MAX_BONES " + parameters.maxBones, parameters.map ? "#define USE_MAP" : "", parameters.envMap ? "#define USE_ENVMAP" : "", parameters.lightMap ? "#define USE_LIGHTMAP" : "", parameters.bumpMap ? "#define USE_BUMPMAP" : "", parameters.normalMap ? "#define USE_NORMALMAP" : "", parameters.specularMap ? "#define USE_SPECULARMAP" : "", parameters.vertexColors ? "#define USE_COLOR" : "", parameters.skinning ? "#define USE_SKINNING" : "", parameters.useVertexTexture ? 
    "#define BONE_TEXTURE" : "", parameters.boneTextureWidth ? "#define N_BONE_PIXEL_X " + parameters.boneTextureWidth.toFixed(1) : "", parameters.boneTextureHeight ? "#define N_BONE_PIXEL_Y " + parameters.boneTextureHeight.toFixed(1) : "", parameters.morphTargets ? "#define USE_MORPHTARGETS" : "", parameters.morphNormals ? "#define USE_MORPHNORMALS" : "", parameters.perPixel ? "#define PHONG_PER_PIXEL" : "", parameters.wrapAround ? "#define WRAP_AROUND" : "", parameters.doubleSided ? "#define DOUBLE_SIDED" : 
    "", parameters.flipSided ? "#define FLIP_SIDED" : "", parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "", parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", 
    "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "attribute vec2 uv2;", "#ifdef USE_COLOR", "attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "attribute vec3 morphTarget0;", "attribute vec3 morphTarget1;", "attribute vec3 morphTarget2;", "attribute vec3 morphTarget3;", "#ifdef USE_MORPHNORMALS", "attribute vec3 morphNormal0;", "attribute vec3 morphNormal1;", "attribute vec3 morphNormal2;", "attribute vec3 morphNormal3;", "#else", 
    "attribute vec3 morphTarget4;", "attribute vec3 morphTarget5;", "attribute vec3 morphTarget6;", "attribute vec3 morphTarget7;", "#endif", "#endif", "#ifdef USE_SKINNING", "attribute vec4 skinIndex;", "attribute vec4 skinWeight;", "#endif", ""].join("\n");
    var prefix_fragment = ["precision " + _precision + " float;", parameters.bumpMap || parameters.normalMap ? "#extension GL_OES_standard_derivatives : enable" : "", customDefines, "#define MAX_DIR_LIGHTS " + parameters.maxDirLights, "#define MAX_POINT_LIGHTS " + parameters.maxPointLights, "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights, "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights, "#define MAX_SHADOWS " + parameters.maxShadows, parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest : 
    "", _this.gammaInput ? "#define GAMMA_INPUT" : "", _this.gammaOutput ? "#define GAMMA_OUTPUT" : "", _this.physicallyBasedShading ? "#define PHYSICALLY_BASED_SHADING" : "", parameters.useFog && parameters.fog ? "#define USE_FOG" : "", parameters.useFog && parameters.fogExp ? "#define FOG_EXP2" : "", parameters.map ? "#define USE_MAP" : "", parameters.envMap ? "#define USE_ENVMAP" : "", parameters.lightMap ? "#define USE_LIGHTMAP" : "", parameters.bumpMap ? "#define USE_BUMPMAP" : "", parameters.normalMap ? 
    "#define USE_NORMALMAP" : "", parameters.specularMap ? "#define USE_SPECULARMAP" : "", parameters.vertexColors ? "#define USE_COLOR" : "", parameters.metal ? "#define METAL" : "", parameters.perPixel ? "#define PHONG_PER_PIXEL" : "", parameters.wrapAround ? "#define WRAP_AROUND" : "", parameters.doubleSided ? "#define DOUBLE_SIDED" : "", parameters.flipSided ? "#define FLIP_SIDED" : "", parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : 
    "", parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", ""].join("\n");
    var glFragmentShader = getShader("fragment", prefix_fragment + fragmentShader);
    var glVertexShader = getShader("vertex", prefix_vertex + vertexShader);
    _gl.attachShader(program, glVertexShader);
    _gl.attachShader(program, glFragmentShader);
    _gl.linkProgram(program);
    if(!_gl.getProgramParameter(program, _gl.LINK_STATUS)) {
      console.error("Could not initialise shader\n" + "VALIDATE_STATUS: " + _gl.getProgramParameter(program, _gl.VALIDATE_STATUS) + ", gl error [" + _gl.getError() + "]")
    }
    _gl.deleteShader(glFragmentShader);
    _gl.deleteShader(glVertexShader);
    program.uniforms = {};
    program.attributes = {};
    var identifiers, u, a, i;
    identifiers = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "modelMatrix", "cameraPosition", "morphTargetInfluences"];
    if(parameters.useVertexTexture) {
      identifiers.push("boneTexture")
    }else {
      identifiers.push("boneGlobalMatrices")
    }
    for(u in uniforms) {
      identifiers.push(u)
    }
    cacheUniformLocations(program, identifiers);
    identifiers = ["position", "normal", "uv", "uv2", "tangent", "color", "skinIndex", "skinWeight", "lineDistance"];
    for(i = 0;i < parameters.maxMorphTargets;i++) {
      identifiers.push("morphTarget" + i)
    }
    for(i = 0;i < parameters.maxMorphNormals;i++) {
      identifiers.push("morphNormal" + i)
    }
    for(a in attributes) {
      identifiers.push(a)
    }
    cacheAttributeLocations(program, identifiers);
    program.id = _programs_counter++;
    _programs.push({program:program, code:code, usedTimes:1});
    _this.info.memory.programs = _programs.length;
    return program
  }
  function cacheUniformLocations(program, identifiers) {
    var i, l, id;
    for(i = 0, l = identifiers.length;i < l;i++) {
      id = identifiers[i];
      program.uniforms[id] = _gl.getUniformLocation(program, id)
    }
  }
  function cacheAttributeLocations(program, identifiers) {
    var i, l, id;
    for(i = 0, l = identifiers.length;i < l;i++) {
      id = identifiers[i];
      program.attributes[id] = _gl.getAttribLocation(program, id)
    }
  }
  function addLineNumbers(string) {
    var chunks = string.split("\n");
    for(var i = 0, il = chunks.length;i < il;i++) {
      chunks[i] = i + 1 + ": " + chunks[i]
    }
    return chunks.join("\n")
  }
  function getShader(type, string) {
    var shader;
    if(type === "fragment") {
      shader = _gl.createShader(_gl.FRAGMENT_SHADER)
    }else {
      if(type === "vertex") {
        shader = _gl.createShader(_gl.VERTEX_SHADER)
      }
    }
    _gl.shaderSource(shader, string);
    _gl.compileShader(shader);
    if(!_gl.getShaderParameter(shader, _gl.COMPILE_STATUS)) {
      console.error(_gl.getShaderInfoLog(shader));
      console.error(addLineNumbers(string));
      return null
    }
    return shader
  }
  function isPowerOfTwo(value) {
    return(value & value - 1) === 0
  }
  function setTextureParameters(textureType, texture, isImagePowerOfTwo) {
    if(isImagePowerOfTwo) {
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL(texture.wrapS));
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL(texture.wrapT));
      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL(texture.magFilter));
      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL(texture.minFilter))
    }else {
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter))
    }
    if(_glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType) {
      if(texture.anisotropy > 1 || texture.__oldAnisotropy) {
        _gl.texParameterf(textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, _maxAnisotropy));
        texture.__oldAnisotropy = texture.anisotropy
      }
    }
  }
  this.setTexture = function(texture, slot) {
    if(texture.needsUpdate) {
      if(!texture.__webglInit) {
        texture.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
        texture.__webglTexture = _gl.createTexture();
        _this.info.memory.textures++
      }
      _gl.activeTexture(_gl.TEXTURE0 + slot);
      _gl.bindTexture(_gl.TEXTURE_2D, texture.__webglTexture);
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
      var image = texture.image, isImagePowerOfTwo = isPowerOfTwo(image.width) && isPowerOfTwo(image.height), glFormat = paramThreeToGL(texture.format), glType = paramThreeToGL(texture.type);
      setTextureParameters(_gl.TEXTURE_2D, texture, isImagePowerOfTwo);
      var mipmap, mipmaps = texture.mipmaps;
      if(texture instanceof THREE.DataTexture) {
        if(mipmaps.length > 0 && isImagePowerOfTwo) {
          for(var i = 0, il = mipmaps.length;i < il;i++) {
            mipmap = mipmaps[i];
            _gl.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data)
          }
          texture.generateMipmaps = false
        }else {
          _gl.texImage2D(_gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data)
        }
      }else {
        if(texture instanceof THREE.CompressedTexture) {
          for(var i = 0, il = mipmaps.length;i < il;i++) {
            mipmap = mipmaps[i];
            _gl.compressedTexImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data)
          }
        }else {
          if(mipmaps.length > 0 && isImagePowerOfTwo) {
            for(var i = 0, il = mipmaps.length;i < il;i++) {
              mipmap = mipmaps[i];
              _gl.texImage2D(_gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap)
            }
            texture.generateMipmaps = false
          }else {
            _gl.texImage2D(_gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image)
          }
        }
      }
      if(texture.generateMipmaps && isImagePowerOfTwo) {
        _gl.generateMipmap(_gl.TEXTURE_2D)
      }
      texture.needsUpdate = false;
      if(texture.onUpdate) {
        texture.onUpdate()
      }
    }else {
      _gl.activeTexture(_gl.TEXTURE0 + slot);
      _gl.bindTexture(_gl.TEXTURE_2D, texture.__webglTexture)
    }
  };
  function clampToMaxSize(image, maxSize) {
    if(image.width <= maxSize && image.height <= maxSize) {
      return image
    }
    var maxDimension = Math.max(image.width, image.height);
    var newWidth = Math.floor(image.width * maxSize / maxDimension);
    var newHeight = Math.floor(image.height * maxSize / maxDimension);
    var canvas = document.createElement("canvas");
    canvas.width = newWidth;
    canvas.height = newHeight;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight);
    return canvas
  }
  function setCubeTexture(texture, slot) {
    if(texture.image.length === 6) {
      if(texture.needsUpdate) {
        if(!texture.image.__webglTextureCube) {
          texture.image.__webglTextureCube = _gl.createTexture();
          _this.info.memory.textures++
        }
        _gl.activeTexture(_gl.TEXTURE0 + slot);
        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube);
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        var isCompressed = texture instanceof THREE.CompressedTexture;
        var cubeImage = [];
        for(var i = 0;i < 6;i++) {
          if(_this.autoScaleCubemaps && !isCompressed) {
            cubeImage[i] = clampToMaxSize(texture.image[i], _maxCubemapSize)
          }else {
            cubeImage[i] = texture.image[i]
          }
        }
        var image = cubeImage[0], isImagePowerOfTwo = isPowerOfTwo(image.width) && isPowerOfTwo(image.height), glFormat = paramThreeToGL(texture.format), glType = paramThreeToGL(texture.type);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo);
        for(var i = 0;i < 6;i++) {
          if(isCompressed) {
            var mipmap, mipmaps = cubeImage[i].mipmaps;
            for(var j = 0, jl = mipmaps.length;j < jl;j++) {
              mipmap = mipmaps[j];
              _gl.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data)
            }
          }else {
            _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[i])
          }
        }
        if(texture.generateMipmaps && isImagePowerOfTwo) {
          _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP)
        }
        texture.needsUpdate = false;
        if(texture.onUpdate) {
          texture.onUpdate()
        }
      }else {
        _gl.activeTexture(_gl.TEXTURE0 + slot);
        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube)
      }
    }
  }
  function setCubeTextureDynamic(texture, slot) {
    _gl.activeTexture(_gl.TEXTURE0 + slot);
    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, texture.__webglTexture)
  }
  function setupFrameBuffer(framebuffer, renderTarget, textureTarget) {
    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0)
  }
  function setupRenderBuffer(renderbuffer, renderTarget) {
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
    if(renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
      _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);
      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer)
    }else {
      if(renderTarget.depthBuffer && renderTarget.stencilBuffer) {
        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer)
      }else {
        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height)
      }
    }
  }
  this.setRenderTarget = function(renderTarget) {
    var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;
    if(renderTarget && !renderTarget.__webglFramebuffer) {
      if(renderTarget.depthBuffer === undefined) {
        renderTarget.depthBuffer = true
      }
      if(renderTarget.stencilBuffer === undefined) {
        renderTarget.stencilBuffer = true
      }
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      renderTarget.__webglTexture = _gl.createTexture();
      _this.info.memory.textures++;
      var isTargetPowerOfTwo = isPowerOfTwo(renderTarget.width) && isPowerOfTwo(renderTarget.height), glFormat = paramThreeToGL(renderTarget.format), glType = paramThreeToGL(renderTarget.type);
      if(isCube) {
        renderTarget.__webglFramebuffer = [];
        renderTarget.__webglRenderbuffer = [];
        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo);
        for(var i = 0;i < 6;i++) {
          renderTarget.__webglFramebuffer[i] = _gl.createFramebuffer();
          renderTarget.__webglRenderbuffer[i] = _gl.createRenderbuffer();
          _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
          setupFrameBuffer(renderTarget.__webglFramebuffer[i], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
          setupRenderBuffer(renderTarget.__webglRenderbuffer[i], renderTarget)
        }
        if(isTargetPowerOfTwo) {
          _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP)
        }
      }else {
        renderTarget.__webglFramebuffer = _gl.createFramebuffer();
        if(renderTarget.shareDepthFrom) {
          renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer
        }else {
          renderTarget.__webglRenderbuffer = _gl.createRenderbuffer()
        }
        _gl.bindTexture(_gl.TEXTURE_2D, renderTarget.__webglTexture);
        setTextureParameters(_gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo);
        _gl.texImage2D(_gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        setupFrameBuffer(renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D);
        if(renderTarget.shareDepthFrom) {
          if(renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer)
          }else {
            if(renderTarget.depthBuffer && renderTarget.stencilBuffer) {
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer)
            }
          }
        }else {
          setupRenderBuffer(renderTarget.__webglRenderbuffer, renderTarget)
        }
        if(isTargetPowerOfTwo) {
          _gl.generateMipmap(_gl.TEXTURE_2D)
        }
      }
      if(isCube) {
        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null)
      }else {
        _gl.bindTexture(_gl.TEXTURE_2D, null)
      }
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
      _gl.bindFramebuffer(_gl.FRAMEBUFFER, null)
    }
    var framebuffer, width, height, vx, vy;
    if(renderTarget) {
      if(isCube) {
        framebuffer = renderTarget.__webglFramebuffer[renderTarget.activeCubeFace]
      }else {
        framebuffer = renderTarget.__webglFramebuffer
      }
      width = renderTarget.width;
      height = renderTarget.height;
      vx = 0;
      vy = 0
    }else {
      framebuffer = null;
      width = _viewportWidth;
      height = _viewportHeight;
      vx = _viewportX;
      vy = _viewportY
    }
    if(framebuffer !== _currentFramebuffer) {
      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      _gl.viewport(vx, vy, width, height);
      _currentFramebuffer = framebuffer
    }
    _currentWidth = width;
    _currentHeight = height
  };
  function updateRenderTargetMipmap(renderTarget) {
    if(renderTarget instanceof THREE.WebGLRenderTargetCube) {
      _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture);
      _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
      _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null)
    }else {
      _gl.bindTexture(_gl.TEXTURE_2D, renderTarget.__webglTexture);
      _gl.generateMipmap(_gl.TEXTURE_2D);
      _gl.bindTexture(_gl.TEXTURE_2D, null)
    }
  }
  function filterFallback(f) {
    if(f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter) {
      return _gl.NEAREST
    }
    return _gl.LINEAR
  }
  function paramThreeToGL(p) {
    if(p === THREE.RepeatWrapping) {
      return _gl.REPEAT
    }
    if(p === THREE.ClampToEdgeWrapping) {
      return _gl.CLAMP_TO_EDGE
    }
    if(p === THREE.MirroredRepeatWrapping) {
      return _gl.MIRRORED_REPEAT
    }
    if(p === THREE.NearestFilter) {
      return _gl.NEAREST
    }
    if(p === THREE.NearestMipMapNearestFilter) {
      return _gl.NEAREST_MIPMAP_NEAREST
    }
    if(p === THREE.NearestMipMapLinearFilter) {
      return _gl.NEAREST_MIPMAP_LINEAR
    }
    if(p === THREE.LinearFilter) {
      return _gl.LINEAR
    }
    if(p === THREE.LinearMipMapNearestFilter) {
      return _gl.LINEAR_MIPMAP_NEAREST
    }
    if(p === THREE.LinearMipMapLinearFilter) {
      return _gl.LINEAR_MIPMAP_LINEAR
    }
    if(p === THREE.UnsignedByteType) {
      return _gl.UNSIGNED_BYTE
    }
    if(p === THREE.UnsignedShort4444Type) {
      return _gl.UNSIGNED_SHORT_4_4_4_4
    }
    if(p === THREE.UnsignedShort5551Type) {
      return _gl.UNSIGNED_SHORT_5_5_5_1
    }
    if(p === THREE.UnsignedShort565Type) {
      return _gl.UNSIGNED_SHORT_5_6_5
    }
    if(p === THREE.ByteType) {
      return _gl.BYTE
    }
    if(p === THREE.ShortType) {
      return _gl.SHORT
    }
    if(p === THREE.UnsignedShortType) {
      return _gl.UNSIGNED_SHORT
    }
    if(p === THREE.IntType) {
      return _gl.INT
    }
    if(p === THREE.UnsignedIntType) {
      return _gl.UNSIGNED_INT
    }
    if(p === THREE.FloatType) {
      return _gl.FLOAT
    }
    if(p === THREE.AlphaFormat) {
      return _gl.ALPHA
    }
    if(p === THREE.RGBFormat) {
      return _gl.RGB
    }
    if(p === THREE.RGBAFormat) {
      return _gl.RGBA
    }
    if(p === THREE.LuminanceFormat) {
      return _gl.LUMINANCE
    }
    if(p === THREE.LuminanceAlphaFormat) {
      return _gl.LUMINANCE_ALPHA
    }
    if(p === THREE.AddEquation) {
      return _gl.FUNC_ADD
    }
    if(p === THREE.SubtractEquation) {
      return _gl.FUNC_SUBTRACT
    }
    if(p === THREE.ReverseSubtractEquation) {
      return _gl.FUNC_REVERSE_SUBTRACT
    }
    if(p === THREE.ZeroFactor) {
      return _gl.ZERO
    }
    if(p === THREE.OneFactor) {
      return _gl.ONE
    }
    if(p === THREE.SrcColorFactor) {
      return _gl.SRC_COLOR
    }
    if(p === THREE.OneMinusSrcColorFactor) {
      return _gl.ONE_MINUS_SRC_COLOR
    }
    if(p === THREE.SrcAlphaFactor) {
      return _gl.SRC_ALPHA
    }
    if(p === THREE.OneMinusSrcAlphaFactor) {
      return _gl.ONE_MINUS_SRC_ALPHA
    }
    if(p === THREE.DstAlphaFactor) {
      return _gl.DST_ALPHA
    }
    if(p === THREE.OneMinusDstAlphaFactor) {
      return _gl.ONE_MINUS_DST_ALPHA
    }
    if(p === THREE.DstColorFactor) {
      return _gl.DST_COLOR
    }
    if(p === THREE.OneMinusDstColorFactor) {
      return _gl.ONE_MINUS_DST_COLOR
    }
    if(p === THREE.SrcAlphaSaturateFactor) {
      return _gl.SRC_ALPHA_SATURATE
    }
    if(_glExtensionCompressedTextureS3TC !== undefined) {
      if(p === THREE.RGB_S3TC_DXT1_Format) {
        return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT
      }
      if(p === THREE.RGBA_S3TC_DXT1_Format) {
        return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT
      }
      if(p === THREE.RGBA_S3TC_DXT3_Format) {
        return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT
      }
      if(p === THREE.RGBA_S3TC_DXT5_Format) {
        return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT
      }
    }
    return 0
  }
  function allocateBones(object) {
    if(_supportsBoneTextures && object && object.useVertexTexture) {
      return 1024
    }else {
      var nVertexUniforms = _gl.getParameter(_gl.MAX_VERTEX_UNIFORM_VECTORS);
      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
      var maxBones = nVertexMatrices;
      if(object !== undefined && object instanceof THREE.SkinnedMesh) {
        maxBones = Math.min(object.bones.length, maxBones);
        if(maxBones < object.bones.length) {
          console.warn("WebGLRenderer: too many bones - " + object.bones.length + ", this GPU supports just " + maxBones + " (try OpenGL instead of ANGLE)")
        }
      }
      return maxBones
    }
  }
  function allocateLights(lights) {
    var l, ll, light, dirLights, pointLights, spotLights, hemiLights;
    dirLights = pointLights = spotLights = hemiLights = 0;
    for(l = 0, ll = lights.length;l < ll;l++) {
      light = lights[l];
      if(light.onlyShadow) {
        continue
      }
      if(light instanceof THREE.DirectionalLight) {
        dirLights++
      }
      if(light instanceof THREE.PointLight) {
        pointLights++
      }
      if(light instanceof THREE.SpotLight) {
        spotLights++
      }
      if(light instanceof THREE.HemisphereLight) {
        hemiLights++
      }
    }
    return{"directional":dirLights, "point":pointLights, "spot":spotLights, "hemi":hemiLights}
  }
  function allocateShadows(lights) {
    var l, ll, light, maxShadows = 0;
    for(l = 0, ll = lights.length;l < ll;l++) {
      light = lights[l];
      if(!light.castShadow) {
        continue
      }
      if(light instanceof THREE.SpotLight) {
        maxShadows++
      }
      if(light instanceof THREE.DirectionalLight && !light.shadowCascade) {
        maxShadows++
      }
    }
    return maxShadows
  }
  function initGL() {
    try {
      if(!(_gl = _canvas.getContext("experimental-webgl", {alpha:_alpha, premultipliedAlpha:_premultipliedAlpha, antialias:_antialias, stencil:_stencil, preserveDrawingBuffer:_preserveDrawingBuffer}))) {
        throw"Error creating WebGL context.";
      }
    }catch(error) {
      console.error(error)
    }
    _glExtensionTextureFloat = _gl.getExtension("OES_texture_float");
    _glExtensionStandardDerivatives = _gl.getExtension("OES_standard_derivatives");
    _glExtensionTextureFilterAnisotropic = _gl.getExtension("EXT_texture_filter_anisotropic") || _gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || _gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
    _glExtensionCompressedTextureS3TC = _gl.getExtension("WEBGL_compressed_texture_s3tc") || _gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || _gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
    if(!_glExtensionTextureFloat) {
      console.log("THREE.WebGLRenderer: Float textures not supported.")
    }
    if(!_glExtensionStandardDerivatives) {
      console.log("THREE.WebGLRenderer: Standard derivatives not supported.")
    }
    if(!_glExtensionTextureFilterAnisotropic) {
      console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.")
    }
    if(!_glExtensionCompressedTextureS3TC) {
      console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.")
    }
  }
  function setDefaultGLState() {
    _gl.clearColor(0, 0, 0, 1);
    _gl.clearDepth(1);
    _gl.clearStencil(0);
    _gl.enable(_gl.DEPTH_TEST);
    _gl.depthFunc(_gl.LEQUAL);
    _gl.frontFace(_gl.CCW);
    _gl.cullFace(_gl.BACK);
    _gl.enable(_gl.CULL_FACE);
    _gl.enable(_gl.BLEND);
    _gl.blendEquation(_gl.FUNC_ADD);
    _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA);
    _gl.clearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha)
  }
  this.shadowMapPlugin = new THREE.ShadowMapPlugin;
  this.addPrePlugin(this.shadowMapPlugin);
  this.addPostPlugin(new THREE.SpritePlugin);
  this.addPostPlugin(new THREE.LensFlarePlugin)
};
THREE.WebGLRenderTarget = function(width, height, options) {
  THREE.EventDispatcher.call(this);
  this.width = width;
  this.height = height;
  options = options || {};
  this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;
  this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;
  this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;
  this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;
  this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;
  this.offset = new THREE.Vector2(0, 0);
  this.repeat = new THREE.Vector2(1, 1);
  this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;
  this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;
  this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
  this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
  this.generateMipmaps = true;
  this.shareDepthFrom = null
};
THREE.WebGLRenderTarget.prototype.clone = function() {
  var tmp = new THREE.WebGLRenderTarget(this.width, this.height);
  tmp.wrapS = this.wrapS;
  tmp.wrapT = this.wrapT;
  tmp.magFilter = this.magFilter;
  tmp.minFilter = this.minFilter;
  tmp.anisotropy = this.anisotropy;
  tmp.offset.copy(this.offset);
  tmp.repeat.copy(this.repeat);
  tmp.format = this.format;
  tmp.type = this.type;
  tmp.depthBuffer = this.depthBuffer;
  tmp.stencilBuffer = this.stencilBuffer;
  tmp.generateMipmaps = this.generateMipmaps;
  tmp.shareDepthFrom = this.shareDepthFrom;
  return tmp
};
THREE.WebGLRenderTarget.prototype.dispose = function() {
  this.dispatchEvent({type:"dispose"})
};
THREE.WebGLRenderTargetCube = function(width, height, options) {
  THREE.WebGLRenderTarget.call(this, width, height, options);
  this.activeCubeFace = 0
};
THREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);
THREE.RenderableVertex = function() {
  this.positionWorld = new THREE.Vector3;
  this.positionScreen = new THREE.Vector4;
  this.visible = true
};
THREE.RenderableVertex.prototype.copy = function(vertex) {
  this.positionWorld.copy(vertex.positionWorld);
  this.positionScreen.copy(vertex.positionScreen)
};
THREE.RenderableFace3 = function() {
  this.v1 = new THREE.RenderableVertex;
  this.v2 = new THREE.RenderableVertex;
  this.v3 = new THREE.RenderableVertex;
  this.centroidModel = new THREE.Vector3;
  this.normalModel = new THREE.Vector3;
  this.normalModelView = new THREE.Vector3;
  this.vertexNormalsLength = 0;
  this.vertexNormalsModel = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
  this.vertexNormalsModelView = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
  this.color = null;
  this.material = null;
  this.uvs = [[]];
  this.z = null
};
THREE.RenderableFace4 = function() {
  this.v1 = new THREE.RenderableVertex;
  this.v2 = new THREE.RenderableVertex;
  this.v3 = new THREE.RenderableVertex;
  this.v4 = new THREE.RenderableVertex;
  this.centroidModel = new THREE.Vector3;
  this.normalModel = new THREE.Vector3;
  this.normalModelView = new THREE.Vector3;
  this.vertexNormalsLength = 0;
  this.vertexNormalsModel = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
  this.vertexNormalsModelView = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
  this.color = null;
  this.material = null;
  this.uvs = [[]];
  this.z = null
};
THREE.RenderableObject = function() {
  this.object = null;
  this.z = null
};
THREE.RenderableParticle = function() {
  this.object = null;
  this.x = null;
  this.y = null;
  this.z = null;
  this.rotation = null;
  this.scale = new THREE.Vector2;
  this.material = null
};
THREE.RenderableLine = function() {
  this.z = null;
  this.v1 = new THREE.RenderableVertex;
  this.v2 = new THREE.RenderableVertex;
  this.material = null
};
THREE.ColorUtils = {adjustHSV:function(color, h, s, v) {
  var hsv = THREE.ColorUtils.__hsv;
  color.getHSV(hsv);
  hsv.h = THREE.Math.clamp(hsv.h + h, 0, 1);
  hsv.s = THREE.Math.clamp(hsv.s + s, 0, 1);
  hsv.v = THREE.Math.clamp(hsv.v + v, 0, 1);
  color.setHSV(hsv.h, hsv.s, hsv.v)
}};
THREE.ColorUtils.__hsv = {h:0, s:0, v:0};
THREE.GeometryUtils = {merge:function(geometry1, object2) {
  var matrix, normalMatrix, vertexOffset = geometry1.vertices.length, uvPosition = geometry1.faceVertexUvs[0].length, geometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2, vertices1 = geometry1.vertices, vertices2 = geometry2.vertices, faces1 = geometry1.faces, faces2 = geometry2.faces, uvs1 = geometry1.faceVertexUvs[0], uvs2 = geometry2.faceVertexUvs[0];
  if(object2 instanceof THREE.Mesh) {
    object2.matrixAutoUpdate && object2.updateMatrix();
    matrix = object2.matrix;
    normalMatrix = new THREE.Matrix3;
    normalMatrix.getInverse(matrix);
    normalMatrix.transpose()
  }
  for(var i = 0, il = vertices2.length;i < il;i++) {
    var vertex = vertices2[i];
    var vertexCopy = vertex.clone();
    if(matrix) {
      vertexCopy.applyMatrix4(matrix)
    }
    vertices1.push(vertexCopy)
  }
  for(i = 0, il = faces2.length;i < il;i++) {
    var face = faces2[i], faceCopy, normal, color, faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;
    if(face instanceof THREE.Face3) {
      faceCopy = new THREE.Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset)
    }else {
      if(face instanceof THREE.Face4) {
        faceCopy = new THREE.Face4(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset, face.d + vertexOffset)
      }
    }
    faceCopy.normal.copy(face.normal);
    if(normalMatrix) {
      faceCopy.normal.applyMatrix3(normalMatrix).normalize()
    }
    for(var j = 0, jl = faceVertexNormals.length;j < jl;j++) {
      normal = faceVertexNormals[j].clone();
      if(normalMatrix) {
        normal.applyMatrix3(normalMatrix).normalize()
      }
      faceCopy.vertexNormals.push(normal)
    }
    faceCopy.color.copy(face.color);
    for(var j = 0, jl = faceVertexColors.length;j < jl;j++) {
      color = faceVertexColors[j];
      faceCopy.vertexColors.push(color.clone())
    }
    faceCopy.materialIndex = face.materialIndex;
    faceCopy.centroid.copy(face.centroid);
    if(matrix) {
      faceCopy.centroid.applyMatrix4(matrix)
    }
    faces1.push(faceCopy)
  }
  for(i = 0, il = uvs2.length;i < il;i++) {
    var uv = uvs2[i], uvCopy = [];
    for(var j = 0, jl = uv.length;j < jl;j++) {
      uvCopy.push(new THREE.Vector2(uv[j].x, uv[j].y))
    }
    uvs1.push(uvCopy)
  }
}, removeMaterials:function(geometry, materialIndexArray) {
  var materialIndexMap = {};
  for(var i = 0, il = materialIndexArray.length;i < il;i++) {
    materialIndexMap[materialIndexArray[i]] = true
  }
  var face, newFaces = [];
  for(var i = 0, il = geometry.faces.length;i < il;i++) {
    face = geometry.faces[i];
    if(!(face.materialIndex in materialIndexMap)) {
      newFaces.push(face)
    }
  }
  geometry.faces = newFaces
}, randomPointInTriangle:function(vectorA, vectorB, vectorC) {
  var a, b, c, point = new THREE.Vector3, tmp = THREE.GeometryUtils.__v1;
  a = THREE.GeometryUtils.random();
  b = THREE.GeometryUtils.random();
  if(a + b > 1) {
    a = 1 - a;
    b = 1 - b
  }
  c = 1 - a - b;
  point.copy(vectorA);
  point.multiplyScalar(a);
  tmp.copy(vectorB);
  tmp.multiplyScalar(b);
  point.add(tmp);
  tmp.copy(vectorC);
  tmp.multiplyScalar(c);
  point.add(tmp);
  return point
}, randomPointInFace:function(face, geometry, useCachedAreas) {
  var vA, vB, vC, vD;
  if(face instanceof THREE.Face3) {
    vA = geometry.vertices[face.a];
    vB = geometry.vertices[face.b];
    vC = geometry.vertices[face.c];
    return THREE.GeometryUtils.randomPointInTriangle(vA, vB, vC)
  }else {
    if(face instanceof THREE.Face4) {
      vA = geometry.vertices[face.a];
      vB = geometry.vertices[face.b];
      vC = geometry.vertices[face.c];
      vD = geometry.vertices[face.d];
      var area1, area2;
      if(useCachedAreas) {
        if(face._area1 && face._area2) {
          area1 = face._area1;
          area2 = face._area2
        }else {
          area1 = THREE.GeometryUtils.triangleArea(vA, vB, vD);
          area2 = THREE.GeometryUtils.triangleArea(vB, vC, vD);
          face._area1 = area1;
          face._area2 = area2
        }
      }else {
        area1 = THREE.GeometryUtils.triangleArea(vA, vB, vD), area2 = THREE.GeometryUtils.triangleArea(vB, vC, vD)
      }
      var r = THREE.GeometryUtils.random() * (area1 + area2);
      if(r < area1) {
        return THREE.GeometryUtils.randomPointInTriangle(vA, vB, vD)
      }else {
        return THREE.GeometryUtils.randomPointInTriangle(vB, vC, vD)
      }
    }
  }
}, randomPointsInGeometry:function(geometry, n) {
  var face, i, faces = geometry.faces, vertices = geometry.vertices, il = faces.length, totalArea = 0, cumulativeAreas = [], vA, vB, vC, vD;
  for(i = 0;i < il;i++) {
    face = faces[i];
    if(face instanceof THREE.Face3) {
      vA = vertices[face.a];
      vB = vertices[face.b];
      vC = vertices[face.c];
      face._area = THREE.GeometryUtils.triangleArea(vA, vB, vC)
    }else {
      if(face instanceof THREE.Face4) {
        vA = vertices[face.a];
        vB = vertices[face.b];
        vC = vertices[face.c];
        vD = vertices[face.d];
        face._area1 = THREE.GeometryUtils.triangleArea(vA, vB, vD);
        face._area2 = THREE.GeometryUtils.triangleArea(vB, vC, vD);
        face._area = face._area1 + face._area2
      }
    }
    totalArea += face._area;
    cumulativeAreas[i] = totalArea
  }
  function binarySearchIndices(value) {
    function binarySearch(start, end) {
      if(end < start) {
        return start
      }
      var mid = start + Math.floor((end - start) / 2);
      if(cumulativeAreas[mid] > value) {
        return binarySearch(start, mid - 1)
      }else {
        if(cumulativeAreas[mid] < value) {
          return binarySearch(mid + 1, end)
        }else {
          return mid
        }
      }
    }
    var result = binarySearch(0, cumulativeAreas.length - 1);
    return result
  }
  var r, index, result = [];
  var stats = {};
  for(i = 0;i < n;i++) {
    r = THREE.GeometryUtils.random() * totalArea;
    index = binarySearchIndices(r);
    result[i] = THREE.GeometryUtils.randomPointInFace(faces[index], geometry, true);
    if(!stats[index]) {
      stats[index] = 1
    }else {
      stats[index] += 1
    }
  }
  return result
}, triangleArea:function(vectorA, vectorB, vectorC) {
  var tmp1 = THREE.GeometryUtils.__v1, tmp2 = THREE.GeometryUtils.__v2;
  tmp1.subVectors(vectorB, vectorA);
  tmp2.subVectors(vectorC, vectorA);
  tmp1.cross(tmp2);
  return 0.5 * tmp1.length()
}, center:function(geometry) {
  geometry.computeBoundingBox();
  var bb = geometry.boundingBox;
  var offset = new THREE.Vector3;
  offset.addVectors(bb.min, bb.max);
  offset.multiplyScalar(-0.5);
  geometry.applyMatrix((new THREE.Matrix4).makeTranslation(offset.x, offset.y, offset.z));
  geometry.computeBoundingBox();
  return offset
}, normalizeUVs:function(geometry) {
  var uvSet = geometry.faceVertexUvs[0];
  for(var i = 0, il = uvSet.length;i < il;i++) {
    var uvs = uvSet[i];
    for(var j = 0, jl = uvs.length;j < jl;j++) {
      if(uvs[j].x !== 1) {
        uvs[j].x = uvs[j].x - Math.floor(uvs[j].x)
      }
      if(uvs[j].y !== 1) {
        uvs[j].y = uvs[j].y - Math.floor(uvs[j].y)
      }
    }
  }
}, triangulateQuads:function(geometry) {
  var i, il, j, jl;
  var faces = [];
  var faceUvs = [];
  var faceVertexUvs = [];
  for(i = 0, il = geometry.faceUvs.length;i < il;i++) {
    faceUvs[i] = []
  }
  for(i = 0, il = geometry.faceVertexUvs.length;i < il;i++) {
    faceVertexUvs[i] = []
  }
  for(i = 0, il = geometry.faces.length;i < il;i++) {
    var face = geometry.faces[i];
    if(face instanceof THREE.Face4) {
      var a = face.a;
      var b = face.b;
      var c = face.c;
      var d = face.d;
      var triA = new THREE.Face3;
      var triB = new THREE.Face3;
      triA.color.copy(face.color);
      triB.color.copy(face.color);
      triA.materialIndex = face.materialIndex;
      triB.materialIndex = face.materialIndex;
      triA.a = a;
      triA.b = b;
      triA.c = d;
      triB.a = b;
      triB.b = c;
      triB.c = d;
      if(face.vertexColors.length === 4) {
        triA.vertexColors[0] = face.vertexColors[0].clone();
        triA.vertexColors[1] = face.vertexColors[1].clone();
        triA.vertexColors[2] = face.vertexColors[3].clone();
        triB.vertexColors[0] = face.vertexColors[1].clone();
        triB.vertexColors[1] = face.vertexColors[2].clone();
        triB.vertexColors[2] = face.vertexColors[3].clone()
      }
      faces.push(triA, triB);
      for(j = 0, jl = geometry.faceVertexUvs.length;j < jl;j++) {
        if(geometry.faceVertexUvs[j].length) {
          var uvs = geometry.faceVertexUvs[j][i];
          var uvA = uvs[0];
          var uvB = uvs[1];
          var uvC = uvs[2];
          var uvD = uvs[3];
          var uvsTriA = [uvA.clone(), uvB.clone(), uvD.clone()];
          var uvsTriB = [uvB.clone(), uvC.clone(), uvD.clone()];
          faceVertexUvs[j].push(uvsTriA, uvsTriB)
        }
      }
      for(j = 0, jl = geometry.faceUvs.length;j < jl;j++) {
        if(geometry.faceUvs[j].length) {
          var faceUv = geometry.faceUvs[j][i];
          faceUvs[j].push(faceUv, faceUv)
        }
      }
    }else {
      faces.push(face);
      for(j = 0, jl = geometry.faceUvs.length;j < jl;j++) {
        faceUvs[j].push(geometry.faceUvs[j][i])
      }
      for(j = 0, jl = geometry.faceVertexUvs.length;j < jl;j++) {
        faceVertexUvs[j].push(geometry.faceVertexUvs[j][i])
      }
    }
  }
  geometry.faces = faces;
  geometry.faceUvs = faceUvs;
  geometry.faceVertexUvs = faceVertexUvs;
  geometry.computeCentroids();
  geometry.computeFaceNormals();
  geometry.computeVertexNormals();
  if(geometry.hasTangents) {
    geometry.computeTangents()
  }
}, setMaterialIndex:function(geometry, index, startFace, endFace) {
  var faces = geometry.faces;
  var start = startFace || 0;
  var end = endFace || faces.length - 1;
  for(var i = start;i <= end;i++) {
    faces[i].materialIndex = index
  }
}};
THREE.GeometryUtils.random = THREE.Math.random16;
THREE.GeometryUtils.__v1 = new THREE.Vector3;
THREE.GeometryUtils.__v2 = new THREE.Vector3;
THREE.ImageUtils = {crossOrigin:"anonymous", loadTexture:function(url, mapping, onLoad, onError) {
  var image = new Image;
  var texture = new THREE.Texture(image, mapping);
  var loader = new THREE.ImageLoader;
  loader.addEventListener("load", function(event) {
    texture.image = event.content;
    texture.needsUpdate = true;
    if(onLoad) {
      onLoad(texture)
    }
  });
  loader.addEventListener("error", function(event) {
    if(onError) {
      onError(event.message)
    }
  });
  loader.crossOrigin = this.crossOrigin;
  loader.load(url, image);
  texture.sourceFile = url;
  return texture
}, loadCompressedTexture:function(url, mapping, onLoad, onError) {
  var texture = new THREE.CompressedTexture;
  texture.mapping = mapping;
  var request = new XMLHttpRequest;
  request.onload = function() {
    var buffer = request.response;
    var dds = THREE.ImageUtils.parseDDS(buffer, true);
    texture.format = dds.format;
    texture.mipmaps = dds.mipmaps;
    texture.image.width = dds.width;
    texture.image.height = dds.height;
    texture.generateMipmaps = false;
    texture.needsUpdate = true;
    if(onLoad) {
      onLoad(texture)
    }
  };
  request.onerror = onError;
  request.open("GET", url, true);
  request.responseType = "arraybuffer";
  request.send(null);
  return texture
}, loadTextureCube:function(array, mapping, onLoad, onError) {
  var images = [];
  images.loadCount = 0;
  var texture = new THREE.Texture;
  texture.image = images;
  if(mapping !== undefined) {
    texture.mapping = mapping
  }
  texture.flipY = false;
  for(var i = 0, il = array.length;i < il;++i) {
    var cubeImage = new Image;
    images[i] = cubeImage;
    cubeImage.onload = function() {
      images.loadCount += 1;
      if(images.loadCount === 6) {
        texture.needsUpdate = true;
        if(onLoad) {
          onLoad(texture)
        }
      }
    };
    cubeImage.onerror = onError;
    cubeImage.crossOrigin = this.crossOrigin;
    cubeImage.src = array[i]
  }
  return texture
}, loadCompressedTextureCube:function(array, mapping, onLoad, onError) {
  var images = [];
  images.loadCount = 0;
  var texture = new THREE.CompressedTexture;
  texture.image = images;
  if(mapping !== undefined) {
    texture.mapping = mapping
  }
  texture.flipY = false;
  texture.generateMipmaps = false;
  var generateCubeFaceCallback = function(rq, img) {
    return function() {
      var buffer = rq.response;
      var dds = THREE.ImageUtils.parseDDS(buffer, true);
      img.format = dds.format;
      img.mipmaps = dds.mipmaps;
      img.width = dds.width;
      img.height = dds.height;
      images.loadCount += 1;
      if(images.loadCount === 6) {
        texture.format = dds.format;
        texture.needsUpdate = true;
        if(onLoad) {
          onLoad(texture)
        }
      }
    }
  };
  if(array instanceof Array) {
    for(var i = 0, il = array.length;i < il;++i) {
      var cubeImage = {};
      images[i] = cubeImage;
      var request = new XMLHttpRequest;
      request.onload = generateCubeFaceCallback(request, cubeImage);
      request.onerror = onError;
      var url = array[i];
      request.open("GET", url, true);
      request.responseType = "arraybuffer";
      request.send(null)
    }
  }else {
    var url = array;
    var request = new XMLHttpRequest;
    request.onload = function() {
      var buffer = request.response;
      var dds = THREE.ImageUtils.parseDDS(buffer, true);
      if(dds.isCubemap) {
        var faces = dds.mipmaps.length / dds.mipmapCount;
        for(var f = 0;f < faces;f++) {
          images[f] = {mipmaps:[]};
          for(var i = 0;i < dds.mipmapCount;i++) {
            images[f].mipmaps.push(dds.mipmaps[f * dds.mipmapCount + i]);
            images[f].format = dds.format;
            images[f].width = dds.width;
            images[f].height = dds.height
          }
        }
        texture.format = dds.format;
        texture.needsUpdate = true;
        if(onLoad) {
          onLoad(texture)
        }
      }
    };
    request.onerror = onError;
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.send(null)
  }
  return texture
}, parseDDS:function(buffer, loadMipmaps) {
  var dds = {mipmaps:[], width:0, height:0, format:null, mipmapCount:1};
  var DDS_MAGIC = 542327876;
  var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;
  var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;
  var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;
  var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;
  function fourCCToInt32(value) {
    return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24)
  }
  function int32ToFourCC(value) {
    return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255)
  }
  var FOURCC_DXT1 = fourCCToInt32("DXT1");
  var FOURCC_DXT3 = fourCCToInt32("DXT3");
  var FOURCC_DXT5 = fourCCToInt32("DXT5");
  var headerLengthInt = 31;
  var off_magic = 0;
  var off_size = 1;
  var off_flags = 2;
  var off_height = 3;
  var off_width = 4;
  var off_mipmapCount = 7;
  var off_pfFlags = 20;
  var off_pfFourCC = 21;
  var off_caps = 27;
  var off_caps2 = 28;
  var off_caps3 = 29;
  var off_caps4 = 30;
  var header = new Int32Array(buffer, 0, headerLengthInt);
  if(header[off_magic] !== DDS_MAGIC) {
    console.error("ImageUtils.parseDDS(): Invalid magic number in DDS header");
    return dds
  }
  if(!header[off_pfFlags] & DDPF_FOURCC) {
    console.error("ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code");
    return dds
  }
  var blockBytes;
  var fourCC = header[off_pfFourCC];
  switch(fourCC) {
    case FOURCC_DXT1:
      blockBytes = 8;
      dds.format = THREE.RGB_S3TC_DXT1_Format;
      break;
    case FOURCC_DXT3:
      blockBytes = 16;
      dds.format = THREE.RGBA_S3TC_DXT3_Format;
      break;
    case FOURCC_DXT5:
      blockBytes = 16;
      dds.format = THREE.RGBA_S3TC_DXT5_Format;
      break;
    default:
      console.error("ImageUtils.parseDDS(): Unsupported FourCC code: ", int32ToFourCC(fourCC));
      return dds
  }
  dds.mipmapCount = 1;
  if(header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
    dds.mipmapCount = Math.max(1, header[off_mipmapCount])
  }
  dds.isCubemap = header[off_caps2] & DDSCAPS2_CUBEMAP ? true : false;
  dds.width = header[off_width];
  dds.height = header[off_height];
  var dataOffset = header[off_size] + 4;
  var width = dds.width;
  var height = dds.height;
  var faces = dds.isCubemap ? 6 : 1;
  for(var face = 0;face < faces;face++) {
    for(var i = 0;i < dds.mipmapCount;i++) {
      var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
      var byteArray = new Uint8Array(buffer, dataOffset, dataLength);
      var mipmap = {"data":byteArray, "width":width, "height":height};
      dds.mipmaps.push(mipmap);
      dataOffset += dataLength;
      width = Math.max(width * 0.5, 1);
      height = Math.max(height * 0.5, 1)
    }
    width = dds.width;
    height = dds.height
  }
  return dds
}, getNormalMap:function(image, depth) {
  var cross = function(a, b) {
    return[a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]]
  };
  var subtract = function(a, b) {
    return[a[0] - b[0], a[1] - b[1], a[2] - b[2]]
  };
  var normalize = function(a) {
    var l = Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    return[a[0] / l, a[1] / l, a[2] / l]
  };
  depth = depth | 1;
  var width = image.width;
  var height = image.height;
  var canvas = document.createElement("canvas");
  canvas.width = width;
  canvas.height = height;
  var context = canvas.getContext("2d");
  context.drawImage(image, 0, 0);
  var data = context.getImageData(0, 0, width, height).data;
  var imageData = context.createImageData(width, height);
  var output = imageData.data;
  for(var x = 0;x < width;x++) {
    for(var y = 0;y < height;y++) {
      var ly = y - 1 < 0 ? 0 : y - 1;
      var uy = y + 1 > height - 1 ? height - 1 : y + 1;
      var lx = x - 1 < 0 ? 0 : x - 1;
      var ux = x + 1 > width - 1 ? width - 1 : x + 1;
      var points = [];
      var origin = [0, 0, data[(y * width + x) * 4] / 255 * depth];
      points.push([-1, 0, data[(y * width + lx) * 4] / 255 * depth]);
      points.push([-1, -1, data[(ly * width + lx) * 4] / 255 * depth]);
      points.push([0, -1, data[(ly * width + x) * 4] / 255 * depth]);
      points.push([1, -1, data[(ly * width + ux) * 4] / 255 * depth]);
      points.push([1, 0, data[(y * width + ux) * 4] / 255 * depth]);
      points.push([1, 1, data[(uy * width + ux) * 4] / 255 * depth]);
      points.push([0, 1, data[(uy * width + x) * 4] / 255 * depth]);
      points.push([-1, 1, data[(uy * width + lx) * 4] / 255 * depth]);
      var normals = [];
      var num_points = points.length;
      for(var i = 0;i < num_points;i++) {
        var v1 = points[i];
        var v2 = points[(i + 1) % num_points];
        v1 = subtract(v1, origin);
        v2 = subtract(v2, origin);
        normals.push(normalize(cross(v1, v2)))
      }
      var normal = [0, 0, 0];
      for(var i = 0;i < normals.length;i++) {
        normal[0] += normals[i][0];
        normal[1] += normals[i][1];
        normal[2] += normals[i][2]
      }
      normal[0] /= normals.length;
      normal[1] /= normals.length;
      normal[2] /= normals.length;
      var idx = (y * width + x) * 4;
      output[idx] = (normal[0] + 1) / 2 * 255 | 0;
      output[idx + 1] = (normal[1] + 1) / 2 * 255 | 0;
      output[idx + 2] = normal[2] * 255 | 0;
      output[idx + 3] = 255
    }
  }
  context.putImageData(imageData, 0, 0);
  return canvas
}, generateDataTexture:function(width, height, color) {
  var size = width * height;
  var data = new Uint8Array(3 * size);
  var r = Math.floor(color.r * 255);
  var g = Math.floor(color.g * 255);
  var b = Math.floor(color.b * 255);
  for(var i = 0;i < size;i++) {
    data[i * 3] = r;
    data[i * 3 + 1] = g;
    data[i * 3 + 2] = b
  }
  var texture = new THREE.DataTexture(data, width, height, THREE.RGBFormat);
  texture.needsUpdate = true;
  return texture
}};
THREE.SceneUtils = {createMultiMaterialObject:function(geometry, materials) {
  var group = new THREE.Object3D;
  for(var i = 0, l = materials.length;i < l;i++) {
    group.add(new THREE.Mesh(geometry, materials[i]))
  }
  return group
}, detach:function(child, parent, scene) {
  child.applyMatrix(parent.matrixWorld);
  parent.remove(child);
  scene.add(child)
}, attach:function(child, scene, parent) {
  var matrixWorldInverse = new THREE.Matrix4;
  matrixWorldInverse.getInverse(parent.matrixWorld);
  child.applyMatrix(matrixWorldInverse);
  scene.remove(child);
  parent.add(child)
}};
THREE.FontUtils = {faces:{}, face:"helvetiker", weight:"normal", style:"normal", size:150, divisions:10, getFace:function() {
  return this.faces[this.face][this.weight][this.style]
}, loadFace:function(data) {
  var family = data.familyName.toLowerCase();
  var ThreeFont = this;
  ThreeFont.faces[family] = ThreeFont.faces[family] || {};
  ThreeFont.faces[family][data.cssFontWeight] = ThreeFont.faces[family][data.cssFontWeight] || {};
  ThreeFont.faces[family][data.cssFontWeight][data.cssFontStyle] = data;
  var face = ThreeFont.faces[family][data.cssFontWeight][data.cssFontStyle] = data;
  return data
}, drawText:function(text) {
  var characterPts = [], allPts = [];
  var i, p, face = this.getFace(), scale = this.size / face.resolution, offset = 0, chars = String(text).split(""), length = chars.length;
  var fontPaths = [];
  for(i = 0;i < length;i++) {
    var path = new THREE.Path;
    var ret = this.extractGlyphPoints(chars[i], face, scale, offset, path);
    offset += ret.offset;
    fontPaths.push(ret.path)
  }
  var width = offset / 2;
  return{paths:fontPaths, offset:width}
}, extractGlyphPoints:function(c, face, scale, offset, path) {
  var pts = [];
  var i, i2, divisions, outline, action, length, scaleX, scaleY, x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste, glyph = face.glyphs[c] || face.glyphs["?"];
  if(!glyph) {
    return
  }
  if(glyph.o) {
    outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    length = outline.length;
    scaleX = scale;
    scaleY = scale;
    for(i = 0;i < length;) {
      action = outline[i++];
      switch(action) {
        case "m":
          x = outline[i++] * scaleX + offset;
          y = outline[i++] * scaleY;
          path.moveTo(x, y);
          break;
        case "l":
          x = outline[i++] * scaleX + offset;
          y = outline[i++] * scaleY;
          path.lineTo(x, y);
          break;
        case "q":
          cpx = outline[i++] * scaleX + offset;
          cpy = outline[i++] * scaleY;
          cpx1 = outline[i++] * scaleX + offset;
          cpy1 = outline[i++] * scaleY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          laste = pts[pts.length - 1];
          if(laste) {
            cpx0 = laste.x;
            cpy0 = laste.y;
            for(i2 = 1, divisions = this.divisions;i2 <= divisions;i2++) {
              var t = i2 / divisions;
              var tx = THREE.Shape.Utils.b2(t, cpx0, cpx1, cpx);
              var ty = THREE.Shape.Utils.b2(t, cpy0, cpy1, cpy)
            }
          }
          break;
        case "b":
          cpx = outline[i++] * scaleX + offset;
          cpy = outline[i++] * scaleY;
          cpx1 = outline[i++] * scaleX + offset;
          cpy1 = outline[i++] * -scaleY;
          cpx2 = outline[i++] * scaleX + offset;
          cpy2 = outline[i++] * -scaleY;
          path.bezierCurveTo(cpx, cpy, cpx1, cpy1, cpx2, cpy2);
          laste = pts[pts.length - 1];
          if(laste) {
            cpx0 = laste.x;
            cpy0 = laste.y;
            for(i2 = 1, divisions = this.divisions;i2 <= divisions;i2++) {
              var t = i2 / divisions;
              var tx = THREE.Shape.Utils.b3(t, cpx0, cpx1, cpx2, cpx);
              var ty = THREE.Shape.Utils.b3(t, cpy0, cpy1, cpy2, cpy)
            }
          }
          break
      }
    }
  }
  return{offset:glyph.ha * scale, path:path}
}};
THREE.FontUtils.generateShapes = function(text, parameters) {
  parameters = parameters || {};
  var size = parameters.size !== undefined ? parameters.size : 100;
  var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments : 4;
  var font = parameters.font !== undefined ? parameters.font : "helvetiker";
  var weight = parameters.weight !== undefined ? parameters.weight : "normal";
  var style = parameters.style !== undefined ? parameters.style : "normal";
  THREE.FontUtils.size = size;
  THREE.FontUtils.divisions = curveSegments;
  THREE.FontUtils.face = font;
  THREE.FontUtils.weight = weight;
  THREE.FontUtils.style = style;
  var data = THREE.FontUtils.drawText(text);
  var paths = data.paths;
  var shapes = [];
  for(var p = 0, pl = paths.length;p < pl;p++) {
    Array.prototype.push.apply(shapes, paths[p].toShapes())
  }
  return shapes
};
(function(namespace) {
  var EPSILON = 1E-10;
  var process = function(contour, indices) {
    var n = contour.length;
    if(n < 3) {
      return null
    }
    var result = [], verts = [], vertIndices = [];
    var u, v, w;
    if(area(contour) > 0) {
      for(v = 0;v < n;v++) {
        verts[v] = v
      }
    }else {
      for(v = 0;v < n;v++) {
        verts[v] = n - 1 - v
      }
    }
    var nv = n;
    var count = 2 * nv;
    for(v = nv - 1;nv > 2;) {
      if(count-- <= 0) {
        console.log("Warning, unable to triangulate polygon!");
        if(indices) {
          return vertIndices
        }
        return result
      }
      u = v;
      if(nv <= u) {
        u = 0
      }
      v = u + 1;
      if(nv <= v) {
        v = 0
      }
      w = v + 1;
      if(nv <= w) {
        w = 0
      }
      if(snip(contour, u, v, w, nv, verts)) {
        var a, b, c, s, t;
        a = verts[u];
        b = verts[v];
        c = verts[w];
        result.push([contour[a], contour[b], contour[c]]);
        vertIndices.push([verts[u], verts[v], verts[w]]);
        for(s = v, t = v + 1;t < nv;s++, t++) {
          verts[s] = verts[t]
        }
        nv--;
        count = 2 * nv
      }
    }
    if(indices) {
      return vertIndices
    }
    return result
  };
  var area = function(contour) {
    var n = contour.length;
    var a = 0;
    for(var p = n - 1, q = 0;q < n;p = q++) {
      a += contour[p].x * contour[q].y - contour[q].x * contour[p].y
    }
    return a * 0.5
  };
  var snip = function(contour, u, v, w, n, verts) {
    var p;
    var ax, ay, bx, by;
    var cx, cy, px, py;
    ax = contour[verts[u]].x;
    ay = contour[verts[u]].y;
    bx = contour[verts[v]].x;
    by = contour[verts[v]].y;
    cx = contour[verts[w]].x;
    cy = contour[verts[w]].y;
    if(EPSILON > (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)) {
      return false
    }
    var aX, aY, bX, bY, cX, cY;
    var apx, apy, bpx, bpy, cpx, cpy;
    var cCROSSap, bCROSScp, aCROSSbp;
    aX = cx - bx;
    aY = cy - by;
    bX = ax - cx;
    bY = ay - cy;
    cX = bx - ax;
    cY = by - ay;
    for(p = 0;p < n;p++) {
      if(p === u || p === v || p === w) {
        continue
      }
      px = contour[verts[p]].x;
      py = contour[verts[p]].y;
      apx = px - ax;
      apy = py - ay;
      bpx = px - bx;
      bpy = py - by;
      cpx = px - cx;
      cpy = py - cy;
      aCROSSbp = aX * bpy - aY * bpx;
      cCROSSap = cX * apy - cY * apx;
      bCROSScp = bX * cpy - bY * cpx;
      if(aCROSSbp >= 0 && bCROSScp >= 0 && cCROSSap >= 0) {
        return false
      }
    }
    return true
  };
  namespace.Triangulate = process;
  namespace.Triangulate.area = area;
  return namespace
})(THREE.FontUtils);
self._typeface_js = {faces:THREE.FontUtils.faces, loadFace:THREE.FontUtils.loadFace};
THREE.Curve = function() {
};
THREE.Curve.prototype.getPoint = function(t) {
  console.log("Warning, getPoint() not implemented!");
  return null
};
THREE.Curve.prototype.getPointAt = function(u) {
  var t = this.getUtoTmapping(u);
  return this.getPoint(t)
};
THREE.Curve.prototype.getPoints = function(divisions) {
  if(!divisions) {
    divisions = 5
  }
  var d, pts = [];
  for(d = 0;d <= divisions;d++) {
    pts.push(this.getPoint(d / divisions))
  }
  return pts
};
THREE.Curve.prototype.getSpacedPoints = function(divisions) {
  if(!divisions) {
    divisions = 5
  }
  var d, pts = [];
  for(d = 0;d <= divisions;d++) {
    pts.push(this.getPointAt(d / divisions))
  }
  return pts
};
THREE.Curve.prototype.getLength = function() {
  var lengths = this.getLengths();
  return lengths[lengths.length - 1]
};
THREE.Curve.prototype.getLengths = function(divisions) {
  if(!divisions) {
    divisions = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200
  }
  if(this.cacheArcLengths && this.cacheArcLengths.length == divisions + 1 && !this.needsUpdate) {
    return this.cacheArcLengths
  }
  this.needsUpdate = false;
  var cache = [];
  var current, last = this.getPoint(0);
  var p, sum = 0;
  cache.push(0);
  for(p = 1;p <= divisions;p++) {
    current = this.getPoint(p / divisions);
    sum += current.distanceTo(last);
    cache.push(sum);
    last = current
  }
  this.cacheArcLengths = cache;
  return cache
};
THREE.Curve.prototype.updateArcLengths = function() {
  this.needsUpdate = true;
  this.getLengths()
};
THREE.Curve.prototype.getUtoTmapping = function(u, distance) {
  var arcLengths = this.getLengths();
  var i = 0, il = arcLengths.length;
  var targetArcLength;
  if(distance) {
    targetArcLength = distance
  }else {
    targetArcLength = u * arcLengths[il - 1]
  }
  var low = 0, high = il - 1, comparison;
  while(low <= high) {
    i = Math.floor(low + (high - low) / 2);
    comparison = arcLengths[i] - targetArcLength;
    if(comparison < 0) {
      low = i + 1;
      continue
    }else {
      if(comparison > 0) {
        high = i - 1;
        continue
      }else {
        high = i;
        break
      }
    }
  }
  i = high;
  if(arcLengths[i] == targetArcLength) {
    var t = i / (il - 1);
    return t
  }
  var lengthBefore = arcLengths[i];
  var lengthAfter = arcLengths[i + 1];
  var segmentLength = lengthAfter - lengthBefore;
  var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
  var t = (i + segmentFraction) / (il - 1);
  return t
};
THREE.Curve.prototype.getTangent = function(t) {
  var delta = 1E-4;
  var t1 = t - delta;
  var t2 = t + delta;
  if(t1 < 0) {
    t1 = 0
  }
  if(t2 > 1) {
    t2 = 1
  }
  var pt1 = this.getPoint(t1);
  var pt2 = this.getPoint(t2);
  var vec = pt2.clone().sub(pt1);
  return vec.normalize()
};
THREE.Curve.prototype.getTangentAt = function(u) {
  var t = this.getUtoTmapping(u);
  return this.getTangent(t)
};
THREE.LineCurve = function(v1, v2) {
  this.v1 = v1;
  this.v2 = v2
};
THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.LineCurve.prototype.getPoint = function(t) {
  var point = this.v2.clone().sub(this.v1);
  point.multiplyScalar(t).add(this.v1);
  return point
};
THREE.LineCurve.prototype.getPointAt = function(u) {
  return this.getPoint(u)
};
THREE.LineCurve.prototype.getTangent = function(t) {
  var tangent = this.v2.clone().sub(this.v1);
  return tangent.normalize()
};
THREE.QuadraticBezierCurve = function(v0, v1, v2) {
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2
};
THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.QuadraticBezierCurve.prototype.getPoint = function(t) {
  var tx, ty;
  tx = THREE.Shape.Utils.b2(t, this.v0.x, this.v1.x, this.v2.x);
  ty = THREE.Shape.Utils.b2(t, this.v0.y, this.v1.y, this.v2.y);
  return new THREE.Vector2(tx, ty)
};
THREE.QuadraticBezierCurve.prototype.getTangent = function(t) {
  var tx, ty;
  tx = THREE.Curve.Utils.tangentQuadraticBezier(t, this.v0.x, this.v1.x, this.v2.x);
  ty = THREE.Curve.Utils.tangentQuadraticBezier(t, this.v0.y, this.v1.y, this.v2.y);
  var tangent = new THREE.Vector2(tx, ty);
  tangent.normalize();
  return tangent
};
THREE.CubicBezierCurve = function(v0, v1, v2, v3) {
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
  this.v3 = v3
};
THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.CubicBezierCurve.prototype.getPoint = function(t) {
  var tx, ty;
  tx = THREE.Shape.Utils.b3(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
  ty = THREE.Shape.Utils.b3(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
  return new THREE.Vector2(tx, ty)
};
THREE.CubicBezierCurve.prototype.getTangent = function(t) {
  var tx, ty;
  tx = THREE.Curve.Utils.tangentCubicBezier(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
  ty = THREE.Curve.Utils.tangentCubicBezier(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
  var tangent = new THREE.Vector2(tx, ty);
  tangent.normalize();
  return tangent
};
THREE.SplineCurve = function(points) {
  this.points = points == undefined ? [] : points
};
THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.SplineCurve.prototype.getPoint = function(t) {
  var v = new THREE.Vector2;
  var c = [];
  var points = this.points, point, intPoint, weight;
  point = (points.length - 1) * t;
  intPoint = Math.floor(point);
  weight = point - intPoint;
  c[0] = intPoint == 0 ? intPoint : intPoint - 1;
  c[1] = intPoint;
  c[2] = intPoint > points.length - 2 ? points.length - 1 : intPoint + 1;
  c[3] = intPoint > points.length - 3 ? points.length - 1 : intPoint + 2;
  v.x = THREE.Curve.Utils.interpolate(points[c[0]].x, points[c[1]].x, points[c[2]].x, points[c[3]].x, weight);
  v.y = THREE.Curve.Utils.interpolate(points[c[0]].y, points[c[1]].y, points[c[2]].y, points[c[3]].y, weight);
  return v
};
THREE.EllipseCurve = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
  this.aX = aX;
  this.aY = aY;
  this.xRadius = xRadius;
  this.yRadius = yRadius;
  this.aStartAngle = aStartAngle;
  this.aEndAngle = aEndAngle;
  this.aClockwise = aClockwise
};
THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.EllipseCurve.prototype.getPoint = function(t) {
  var deltaAngle = this.aEndAngle - this.aStartAngle;
  if(!this.aClockwise) {
    t = 1 - t
  }
  var angle = this.aStartAngle + t * deltaAngle;
  var tx = this.aX + this.xRadius * Math.cos(angle);
  var ty = this.aY + this.yRadius * Math.sin(angle);
  return new THREE.Vector2(tx, ty)
};
THREE.ArcCurve = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  THREE.EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise)
};
THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);
THREE.Curve.Utils = {tangentQuadraticBezier:function(t, p0, p1, p2) {
  return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1)
}, tangentCubicBezier:function(t, p0, p1, p2, p3) {
  return-3 * p0 * (1 - t) * (1 - t) + 3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) + 6 * t * p2 * (1 - t) - 3 * t * t * p2 + 3 * t * t * p3
}, tangentSpline:function(t, p0, p1, p2, p3) {
  var h00 = 6 * t * t - 6 * t;
  var h10 = 3 * t * t - 4 * t + 1;
  var h01 = -6 * t * t + 6 * t;
  var h11 = 3 * t * t - 2 * t;
  return h00 + h10 + h01 + h11
}, interpolate:function(p0, p1, p2, p3, t) {
  var v0 = (p2 - p0) * 0.5;
  var v1 = (p3 - p1) * 0.5;
  var t2 = t * t;
  var t3 = t * t2;
  return(2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1
}};
THREE.Curve.create = function(constructor, getPointFunc) {
  constructor.prototype = Object.create(THREE.Curve.prototype);
  constructor.prototype.getPoint = getPointFunc;
  return constructor
};
THREE.LineCurve3 = THREE.Curve.create(function(v1, v2) {
  this.v1 = v1;
  this.v2 = v2
}, function(t) {
  var r = new THREE.Vector3;
  r.subVectors(this.v2, this.v1);
  r.multiplyScalar(t);
  r.add(this.v1);
  return r
});
THREE.QuadraticBezierCurve3 = THREE.Curve.create(function(v0, v1, v2) {
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2
}, function(t) {
  var tx, ty, tz;
  tx = THREE.Shape.Utils.b2(t, this.v0.x, this.v1.x, this.v2.x);
  ty = THREE.Shape.Utils.b2(t, this.v0.y, this.v1.y, this.v2.y);
  tz = THREE.Shape.Utils.b2(t, this.v0.z, this.v1.z, this.v2.z);
  return new THREE.Vector3(tx, ty, tz)
});
THREE.CubicBezierCurve3 = THREE.Curve.create(function(v0, v1, v2, v3) {
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
  this.v3 = v3
}, function(t) {
  var tx, ty, tz;
  tx = THREE.Shape.Utils.b3(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
  ty = THREE.Shape.Utils.b3(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
  tz = THREE.Shape.Utils.b3(t, this.v0.z, this.v1.z, this.v2.z, this.v3.z);
  return new THREE.Vector3(tx, ty, tz)
});
THREE.SplineCurve3 = THREE.Curve.create(function(points) {
  this.points = points == undefined ? [] : points
}, function(t) {
  var v = new THREE.Vector3;
  var c = [];
  var points = this.points, point, intPoint, weight;
  point = (points.length - 1) * t;
  intPoint = Math.floor(point);
  weight = point - intPoint;
  c[0] = intPoint == 0 ? intPoint : intPoint - 1;
  c[1] = intPoint;
  c[2] = intPoint > points.length - 2 ? points.length - 1 : intPoint + 1;
  c[3] = intPoint > points.length - 3 ? points.length - 1 : intPoint + 2;
  var pt0 = points[c[0]], pt1 = points[c[1]], pt2 = points[c[2]], pt3 = points[c[3]];
  v.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);
  v.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);
  v.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);
  return v
});
THREE.ClosedSplineCurve3 = THREE.Curve.create(function(points) {
  this.points = points == undefined ? [] : points
}, function(t) {
  var v = new THREE.Vector3;
  var c = [];
  var points = this.points, point, intPoint, weight;
  point = (points.length - 0) * t;
  intPoint = Math.floor(point);
  weight = point - intPoint;
  intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / points.length) + 1) * points.length;
  c[0] = (intPoint - 1) % points.length;
  c[1] = intPoint % points.length;
  c[2] = (intPoint + 1) % points.length;
  c[3] = (intPoint + 2) % points.length;
  v.x = THREE.Curve.Utils.interpolate(points[c[0]].x, points[c[1]].x, points[c[2]].x, points[c[3]].x, weight);
  v.y = THREE.Curve.Utils.interpolate(points[c[0]].y, points[c[1]].y, points[c[2]].y, points[c[3]].y, weight);
  v.z = THREE.Curve.Utils.interpolate(points[c[0]].z, points[c[1]].z, points[c[2]].z, points[c[3]].z, weight);
  return v
});
THREE.CurvePath = function() {
  this.curves = [];
  this.bends = [];
  this.autoClose = false
};
THREE.CurvePath.prototype = Object.create(THREE.Curve.prototype);
THREE.CurvePath.prototype.add = function(curve) {
  this.curves.push(curve)
};
THREE.CurvePath.prototype.checkConnection = function() {
};
THREE.CurvePath.prototype.closePath = function() {
  var startPoint = this.curves[0].getPoint(0);
  var endPoint = this.curves[this.curves.length - 1].getPoint(1);
  if(!startPoint.equals(endPoint)) {
    this.curves.push(new THREE.LineCurve(endPoint, startPoint))
  }
};
THREE.CurvePath.prototype.getPoint = function(t) {
  var d = t * this.getLength();
  var curveLengths = this.getCurveLengths();
  var i = 0, diff, curve;
  while(i < curveLengths.length) {
    if(curveLengths[i] >= d) {
      diff = curveLengths[i] - d;
      curve = this.curves[i];
      var u = 1 - diff / curve.getLength();
      return curve.getPointAt(u);
      break
    }
    i++
  }
  return null
};
THREE.CurvePath.prototype.getLength = function() {
  var lens = this.getCurveLengths();
  return lens[lens.length - 1]
};
THREE.CurvePath.prototype.getCurveLengths = function() {
  if(this.cacheLengths && this.cacheLengths.length == this.curves.length) {
    return this.cacheLengths
  }
  var lengths = [], sums = 0;
  var i, il = this.curves.length;
  for(i = 0;i < il;i++) {
    sums += this.curves[i].getLength();
    lengths.push(sums)
  }
  this.cacheLengths = lengths;
  return lengths
};
THREE.CurvePath.prototype.getBoundingBox = function() {
  var points = this.getPoints();
  var maxX, maxY, maxZ;
  var minX, minY, minZ;
  maxX = maxY = Number.NEGATIVE_INFINITY;
  minX = minY = Number.POSITIVE_INFINITY;
  var p, i, il, sum;
  var v3 = points[0] instanceof THREE.Vector3;
  sum = v3 ? new THREE.Vector3 : new THREE.Vector2;
  for(i = 0, il = points.length;i < il;i++) {
    p = points[i];
    if(p.x > maxX) {
      maxX = p.x
    }else {
      if(p.x < minX) {
        minX = p.x
      }
    }
    if(p.y > maxY) {
      maxY = p.y
    }else {
      if(p.y < minY) {
        minY = p.y
      }
    }
    if(v3) {
      if(p.z > maxZ) {
        maxZ = p.z
      }else {
        if(p.z < minZ) {
          minZ = p.z
        }
      }
    }
    sum.add(p)
  }
  var ret = {minX:minX, minY:minY, maxX:maxX, maxY:maxY, centroid:sum.divideScalar(il)};
  if(v3) {
    ret.maxZ = maxZ;
    ret.minZ = minZ
  }
  return ret
};
THREE.CurvePath.prototype.createPointsGeometry = function(divisions) {
  var pts = this.getPoints(divisions, true);
  return this.createGeometry(pts)
};
THREE.CurvePath.prototype.createSpacedPointsGeometry = function(divisions) {
  var pts = this.getSpacedPoints(divisions, true);
  return this.createGeometry(pts)
};
THREE.CurvePath.prototype.createGeometry = function(points) {
  var geometry = new THREE.Geometry;
  for(var i = 0;i < points.length;i++) {
    geometry.vertices.push(new THREE.Vector3(points[i].x, points[i].y, points[i].z || 0))
  }
  return geometry
};
THREE.CurvePath.prototype.addWrapPath = function(bendpath) {
  this.bends.push(bendpath)
};
THREE.CurvePath.prototype.getTransformedPoints = function(segments, bends) {
  var oldPts = this.getPoints(segments);
  var i, il;
  if(!bends) {
    bends = this.bends
  }
  for(i = 0, il = bends.length;i < il;i++) {
    oldPts = this.getWrapPoints(oldPts, bends[i])
  }
  return oldPts
};
THREE.CurvePath.prototype.getTransformedSpacedPoints = function(segments, bends) {
  var oldPts = this.getSpacedPoints(segments);
  var i, il;
  if(!bends) {
    bends = this.bends
  }
  for(i = 0, il = bends.length;i < il;i++) {
    oldPts = this.getWrapPoints(oldPts, bends[i])
  }
  return oldPts
};
THREE.CurvePath.prototype.getWrapPoints = function(oldPts, path) {
  var bounds = this.getBoundingBox();
  var i, il, p, oldX, oldY, xNorm;
  for(i = 0, il = oldPts.length;i < il;i++) {
    p = oldPts[i];
    oldX = p.x;
    oldY = p.y;
    xNorm = oldX / bounds.maxX;
    xNorm = path.getUtoTmapping(xNorm, oldX);
    var pathPt = path.getPoint(xNorm);
    var normal = path.getNormalVector(xNorm).multiplyScalar(oldY);
    p.x = pathPt.x + normal.x;
    p.y = pathPt.y + normal.y
  }
  return oldPts
};
THREE.Gyroscope = function() {
  THREE.Object3D.call(this)
};
THREE.Gyroscope.prototype = Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld = function(force) {
  this.matrixAutoUpdate && this.updateMatrix();
  if(this.matrixWorldNeedsUpdate || force) {
    if(this.parent) {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      this.matrixWorld.decompose(this.translationWorld, this.rotationWorld, this.scaleWorld);
      this.matrix.decompose(this.translationObject, this.rotationObject, this.scaleObject);
      this.matrixWorld.compose(this.translationWorld, this.rotationObject, this.scaleWorld)
    }else {
      this.matrixWorld.copy(this.matrix)
    }
    this.matrixWorldNeedsUpdate = false;
    force = true
  }
  for(var i = 0, l = this.children.length;i < l;i++) {
    this.children[i].updateMatrixWorld(force)
  }
};
THREE.Gyroscope.prototype.translationWorld = new THREE.Vector3;
THREE.Gyroscope.prototype.translationObject = new THREE.Vector3;
THREE.Gyroscope.prototype.rotationWorld = new THREE.Quaternion;
THREE.Gyroscope.prototype.rotationObject = new THREE.Quaternion;
THREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3;
THREE.Gyroscope.prototype.scaleObject = new THREE.Vector3;
THREE.Path = function(points) {
  THREE.CurvePath.call(this);
  this.actions = [];
  if(points) {
    this.fromPoints(points)
  }
};
THREE.Path.prototype = Object.create(THREE.CurvePath.prototype);
THREE.PathActions = {MOVE_TO:"moveTo", LINE_TO:"lineTo", QUADRATIC_CURVE_TO:"quadraticCurveTo", BEZIER_CURVE_TO:"bezierCurveTo", CSPLINE_THRU:"splineThru", ARC:"arc", ELLIPSE:"ellipse"};
THREE.Path.prototype.fromPoints = function(vectors) {
  this.moveTo(vectors[0].x, vectors[0].y);
  for(var v = 1, vlen = vectors.length;v < vlen;v++) {
    this.lineTo(vectors[v].x, vectors[v].y)
  }
};
THREE.Path.prototype.moveTo = function(x, y) {
  var args = Array.prototype.slice.call(arguments);
  this.actions.push({action:THREE.PathActions.MOVE_TO, args:args})
};
THREE.Path.prototype.lineTo = function(x, y) {
  var args = Array.prototype.slice.call(arguments);
  var lastargs = this.actions[this.actions.length - 1].args;
  var x0 = lastargs[lastargs.length - 2];
  var y0 = lastargs[lastargs.length - 1];
  var curve = new THREE.LineCurve(new THREE.Vector2(x0, y0), new THREE.Vector2(x, y));
  this.curves.push(curve);
  this.actions.push({action:THREE.PathActions.LINE_TO, args:args})
};
THREE.Path.prototype.quadraticCurveTo = function(aCPx, aCPy, aX, aY) {
  var args = Array.prototype.slice.call(arguments);
  var lastargs = this.actions[this.actions.length - 1].args;
  var x0 = lastargs[lastargs.length - 2];
  var y0 = lastargs[lastargs.length - 1];
  var curve = new THREE.QuadraticBezierCurve(new THREE.Vector2(x0, y0), new THREE.Vector2(aCPx, aCPy), new THREE.Vector2(aX, aY));
  this.curves.push(curve);
  this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO, args:args})
};
THREE.Path.prototype.bezierCurveTo = function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
  var args = Array.prototype.slice.call(arguments);
  var lastargs = this.actions[this.actions.length - 1].args;
  var x0 = lastargs[lastargs.length - 2];
  var y0 = lastargs[lastargs.length - 1];
  var curve = new THREE.CubicBezierCurve(new THREE.Vector2(x0, y0), new THREE.Vector2(aCP1x, aCP1y), new THREE.Vector2(aCP2x, aCP2y), new THREE.Vector2(aX, aY));
  this.curves.push(curve);
  this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO, args:args})
};
THREE.Path.prototype.splineThru = function(pts) {
  var args = Array.prototype.slice.call(arguments);
  var lastargs = this.actions[this.actions.length - 1].args;
  var x0 = lastargs[lastargs.length - 2];
  var y0 = lastargs[lastargs.length - 1];
  var npts = [new THREE.Vector2(x0, y0)];
  Array.prototype.push.apply(npts, pts);
  var curve = new THREE.SplineCurve(npts);
  this.curves.push(curve);
  this.actions.push({action:THREE.PathActions.CSPLINE_THRU, args:args})
};
THREE.Path.prototype.arc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  var lastargs = this.actions[this.actions.length - 1].args;
  var x0 = lastargs[lastargs.length - 2];
  var y0 = lastargs[lastargs.length - 1];
  this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise)
};
THREE.Path.prototype.absarc = function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise)
};
THREE.Path.prototype.ellipse = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
  var lastargs = this.actions[this.actions.length - 1].args;
  var x0 = lastargs[lastargs.length - 2];
  var y0 = lastargs[lastargs.length - 1];
  this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)
};
THREE.Path.prototype.absellipse = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
  var args = Array.prototype.slice.call(arguments);
  var curve = new THREE.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise);
  this.curves.push(curve);
  var lastPoint = curve.getPoint(aClockwise ? 1 : 0);
  args.push(lastPoint.x);
  args.push(lastPoint.y);
  this.actions.push({action:THREE.PathActions.ELLIPSE, args:args})
};
THREE.Path.prototype.getSpacedPoints = function(divisions, closedPath) {
  if(!divisions) {
    divisions = 40
  }
  var points = [];
  for(var i = 0;i < divisions;i++) {
    points.push(this.getPoint(i / divisions))
  }
  return points
};
THREE.Path.prototype.getPoints = function(divisions, closedPath) {
  if(this.useSpacedPoints) {
    console.log("tata");
    return this.getSpacedPoints(divisions, closedPath)
  }
  divisions = divisions || 12;
  var points = [];
  var i, il, item, action, args;
  var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0, laste, j, t, tx, ty;
  for(i = 0, il = this.actions.length;i < il;i++) {
    item = this.actions[i];
    action = item.action;
    args = item.args;
    switch(action) {
      case THREE.PathActions.MOVE_TO:
        points.push(new THREE.Vector2(args[0], args[1]));
        break;
      case THREE.PathActions.LINE_TO:
        points.push(new THREE.Vector2(args[0], args[1]));
        break;
      case THREE.PathActions.QUADRATIC_CURVE_TO:
        cpx = args[2];
        cpy = args[3];
        cpx1 = args[0];
        cpy1 = args[1];
        if(points.length > 0) {
          laste = points[points.length - 1];
          cpx0 = laste.x;
          cpy0 = laste.y
        }else {
          laste = this.actions[i - 1].args;
          cpx0 = laste[laste.length - 2];
          cpy0 = laste[laste.length - 1]
        }
        for(j = 1;j <= divisions;j++) {
          t = j / divisions;
          tx = THREE.Shape.Utils.b2(t, cpx0, cpx1, cpx);
          ty = THREE.Shape.Utils.b2(t, cpy0, cpy1, cpy);
          points.push(new THREE.Vector2(tx, ty))
        }
        break;
      case THREE.PathActions.BEZIER_CURVE_TO:
        cpx = args[4];
        cpy = args[5];
        cpx1 = args[0];
        cpy1 = args[1];
        cpx2 = args[2];
        cpy2 = args[3];
        if(points.length > 0) {
          laste = points[points.length - 1];
          cpx0 = laste.x;
          cpy0 = laste.y
        }else {
          laste = this.actions[i - 1].args;
          cpx0 = laste[laste.length - 2];
          cpy0 = laste[laste.length - 1]
        }
        for(j = 1;j <= divisions;j++) {
          t = j / divisions;
          tx = THREE.Shape.Utils.b3(t, cpx0, cpx1, cpx2, cpx);
          ty = THREE.Shape.Utils.b3(t, cpy0, cpy1, cpy2, cpy);
          points.push(new THREE.Vector2(tx, ty))
        }
        break;
      case THREE.PathActions.CSPLINE_THRU:
        laste = this.actions[i - 1].args;
        var last = new THREE.Vector2(laste[laste.length - 2], laste[laste.length - 1]);
        var spts = [last];
        var n = divisions * args[0].length;
        spts = spts.concat(args[0]);
        var spline = new THREE.SplineCurve(spts);
        for(j = 1;j <= n;j++) {
          points.push(spline.getPointAt(j / n))
        }
        break;
      case THREE.PathActions.ARC:
        var aX = args[0], aY = args[1], aRadius = args[2], aStartAngle = args[3], aEndAngle = args[4], aClockwise = !!args[5];
        var deltaAngle = aEndAngle - aStartAngle;
        var angle;
        var tdivisions = divisions * 2;
        for(j = 1;j <= tdivisions;j++) {
          t = j / tdivisions;
          if(!aClockwise) {
            t = 1 - t
          }
          angle = aStartAngle + t * deltaAngle;
          tx = aX + aRadius * Math.cos(angle);
          ty = aY + aRadius * Math.sin(angle);
          points.push(new THREE.Vector2(tx, ty))
        }
        break;
      case THREE.PathActions.ELLIPSE:
        var aX = args[0], aY = args[1], xRadius = args[2], yRadius = args[3], aStartAngle = args[4], aEndAngle = args[5], aClockwise = !!args[6];
        var deltaAngle = aEndAngle - aStartAngle;
        var angle;
        var tdivisions = divisions * 2;
        for(j = 1;j <= tdivisions;j++) {
          t = j / tdivisions;
          if(!aClockwise) {
            t = 1 - t
          }
          angle = aStartAngle + t * deltaAngle;
          tx = aX + xRadius * Math.cos(angle);
          ty = aY + yRadius * Math.sin(angle);
          points.push(new THREE.Vector2(tx, ty))
        }
        break
    }
  }
  var lastPoint = points[points.length - 1];
  var EPSILON = 1E-10;
  if(Math.abs(lastPoint.x - points[0].x) < EPSILON && Math.abs(lastPoint.y - points[0].y) < EPSILON) {
    points.splice(points.length - 1, 1)
  }
  if(closedPath) {
    points.push(points[0])
  }
  return points
};
THREE.Path.prototype.toShapes = function() {
  var i, il, item, action, args;
  var subPaths = [], lastPath = new THREE.Path;
  for(i = 0, il = this.actions.length;i < il;i++) {
    item = this.actions[i];
    args = item.args;
    action = item.action;
    if(action == THREE.PathActions.MOVE_TO) {
      if(lastPath.actions.length != 0) {
        subPaths.push(lastPath);
        lastPath = new THREE.Path
      }
    }
    lastPath[action].apply(lastPath, args)
  }
  if(lastPath.actions.length != 0) {
    subPaths.push(lastPath)
  }
  if(subPaths.length == 0) {
    return[]
  }
  var tmpPath, tmpShape, shapes = [];
  var holesFirst = !THREE.Shape.Utils.isClockWise(subPaths[0].getPoints());
  if(subPaths.length == 1) {
    tmpPath = subPaths[0];
    tmpShape = new THREE.Shape;
    tmpShape.actions = tmpPath.actions;
    tmpShape.curves = tmpPath.curves;
    shapes.push(tmpShape);
    return shapes
  }
  if(holesFirst) {
    tmpShape = new THREE.Shape;
    for(i = 0, il = subPaths.length;i < il;i++) {
      tmpPath = subPaths[i];
      if(THREE.Shape.Utils.isClockWise(tmpPath.getPoints())) {
        tmpShape.actions = tmpPath.actions;
        tmpShape.curves = tmpPath.curves;
        shapes.push(tmpShape);
        tmpShape = new THREE.Shape
      }else {
        tmpShape.holes.push(tmpPath)
      }
    }
  }else {
    for(i = 0, il = subPaths.length;i < il;i++) {
      tmpPath = subPaths[i];
      if(THREE.Shape.Utils.isClockWise(tmpPath.getPoints())) {
        if(tmpShape) {
          shapes.push(tmpShape)
        }
        tmpShape = new THREE.Shape;
        tmpShape.actions = tmpPath.actions;
        tmpShape.curves = tmpPath.curves
      }else {
        tmpShape.holes.push(tmpPath)
      }
    }
    shapes.push(tmpShape)
  }
  return shapes
};
THREE.Shape = function() {
  THREE.Path.apply(this, arguments);
  this.holes = []
};
THREE.Shape.prototype = Object.create(THREE.Path.prototype);
THREE.Shape.prototype.extrude = function(options) {
  var extruded = new THREE.ExtrudeGeometry(this, options);
  return extruded
};
THREE.Shape.prototype.makeGeometry = function(options) {
  var geometry = new THREE.ShapeGeometry(this, options);
  return geometry
};
THREE.Shape.prototype.getPointsHoles = function(divisions) {
  var i, il = this.holes.length, holesPts = [];
  for(i = 0;i < il;i++) {
    holesPts[i] = this.holes[i].getTransformedPoints(divisions, this.bends)
  }
  return holesPts
};
THREE.Shape.prototype.getSpacedPointsHoles = function(divisions) {
  var i, il = this.holes.length, holesPts = [];
  for(i = 0;i < il;i++) {
    holesPts[i] = this.holes[i].getTransformedSpacedPoints(divisions, this.bends)
  }
  return holesPts
};
THREE.Shape.prototype.extractAllPoints = function(divisions) {
  return{shape:this.getTransformedPoints(divisions), holes:this.getPointsHoles(divisions)}
};
THREE.Shape.prototype.extractPoints = function(divisions) {
  if(this.useSpacedPoints) {
    return this.extractAllSpacedPoints(divisions)
  }
  return this.extractAllPoints(divisions)
};
THREE.Shape.prototype.extractAllSpacedPoints = function(divisions) {
  return{shape:this.getTransformedSpacedPoints(divisions), holes:this.getSpacedPointsHoles(divisions)}
};
THREE.Shape.Utils = {removeHoles:function(contour, holes) {
  var shape = contour.concat();
  var allpoints = shape.concat();
  var prevShapeVert, nextShapeVert, prevHoleVert, nextHoleVert, holeIndex, shapeIndex, shapeId, shapeGroup, h, h2, hole, shortest, d, p, pts1, pts2, tmpShape1, tmpShape2, tmpHole1, tmpHole2, verts = [];
  for(h = 0;h < holes.length;h++) {
    hole = holes[h];
    Array.prototype.push.apply(allpoints, hole);
    shortest = Number.POSITIVE_INFINITY;
    for(h2 = 0;h2 < hole.length;h2++) {
      pts1 = hole[h2];
      var dist = [];
      for(p = 0;p < shape.length;p++) {
        pts2 = shape[p];
        d = pts1.distanceToSquared(pts2);
        dist.push(d);
        if(d < shortest) {
          shortest = d;
          holeIndex = h2;
          shapeIndex = p
        }
      }
    }
    prevShapeVert = shapeIndex - 1 >= 0 ? shapeIndex - 1 : shape.length - 1;
    prevHoleVert = holeIndex - 1 >= 0 ? holeIndex - 1 : hole.length - 1;
    var areaapts = [hole[holeIndex], shape[shapeIndex], shape[prevShapeVert]];
    var areaa = THREE.FontUtils.Triangulate.area(areaapts);
    var areabpts = [hole[holeIndex], hole[prevHoleVert], shape[shapeIndex]];
    var areab = THREE.FontUtils.Triangulate.area(areabpts);
    var shapeOffset = 1;
    var holeOffset = -1;
    var oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;
    shapeIndex += shapeOffset;
    holeIndex += holeOffset;
    if(shapeIndex < 0) {
      shapeIndex += shape.length
    }
    shapeIndex %= shape.length;
    if(holeIndex < 0) {
      holeIndex += hole.length
    }
    holeIndex %= hole.length;
    prevShapeVert = shapeIndex - 1 >= 0 ? shapeIndex - 1 : shape.length - 1;
    prevHoleVert = holeIndex - 1 >= 0 ? holeIndex - 1 : hole.length - 1;
    areaapts = [hole[holeIndex], shape[shapeIndex], shape[prevShapeVert]];
    var areaa2 = THREE.FontUtils.Triangulate.area(areaapts);
    areabpts = [hole[holeIndex], hole[prevHoleVert], shape[shapeIndex]];
    var areab2 = THREE.FontUtils.Triangulate.area(areabpts);
    if(areaa + areab > areaa2 + areab2) {
      shapeIndex = oldShapeIndex;
      holeIndex = oldHoleIndex;
      if(shapeIndex < 0) {
        shapeIndex += shape.length
      }
      shapeIndex %= shape.length;
      if(holeIndex < 0) {
        holeIndex += hole.length
      }
      holeIndex %= hole.length;
      prevShapeVert = shapeIndex - 1 >= 0 ? shapeIndex - 1 : shape.length - 1;
      prevHoleVert = holeIndex - 1 >= 0 ? holeIndex - 1 : hole.length - 1
    }else {
    }
    tmpShape1 = shape.slice(0, shapeIndex);
    tmpShape2 = shape.slice(shapeIndex);
    tmpHole1 = hole.slice(holeIndex);
    tmpHole2 = hole.slice(0, holeIndex);
    var trianglea = [hole[holeIndex], shape[shapeIndex], shape[prevShapeVert]];
    var triangleb = [hole[holeIndex], hole[prevHoleVert], shape[shapeIndex]];
    verts.push(trianglea);
    verts.push(triangleb);
    shape = tmpShape1.concat(tmpHole1).concat(tmpHole2).concat(tmpShape2)
  }
  return{shape:shape, isolatedPts:verts, allpoints:allpoints}
}, triangulateShape:function(contour, holes) {
  var shapeWithoutHoles = THREE.Shape.Utils.removeHoles(contour, holes);
  var shape = shapeWithoutHoles.shape, allpoints = shapeWithoutHoles.allpoints, isolatedPts = shapeWithoutHoles.isolatedPts;
  var triangles = THREE.FontUtils.Triangulate(shape, false);
  var i, il, f, face, key, index, allPointsMap = {}, isolatedPointsMap = {};
  for(i = 0, il = allpoints.length;i < il;i++) {
    key = allpoints[i].x + ":" + allpoints[i].y;
    if(allPointsMap[key] !== undefined) {
      console.log("Duplicate point", key)
    }
    allPointsMap[key] = i
  }
  for(i = 0, il = triangles.length;i < il;i++) {
    face = triangles[i];
    for(f = 0;f < 3;f++) {
      key = face[f].x + ":" + face[f].y;
      index = allPointsMap[key];
      if(index !== undefined) {
        face[f] = index
      }
    }
  }
  for(i = 0, il = isolatedPts.length;i < il;i++) {
    face = isolatedPts[i];
    for(f = 0;f < 3;f++) {
      key = face[f].x + ":" + face[f].y;
      index = allPointsMap[key];
      if(index !== undefined) {
        face[f] = index
      }
    }
  }
  return triangles.concat(isolatedPts)
}, isClockWise:function(pts) {
  return THREE.FontUtils.Triangulate.area(pts) < 0
}, b2p0:function(t, p) {
  var k = 1 - t;
  return k * k * p
}, b2p1:function(t, p) {
  return 2 * (1 - t) * t * p
}, b2p2:function(t, p) {
  return t * t * p
}, b2:function(t, p0, p1, p2) {
  return this.b2p0(t, p0) + this.b2p1(t, p1) + this.b2p2(t, p2)
}, b3p0:function(t, p) {
  var k = 1 - t;
  return k * k * k * p
}, b3p1:function(t, p) {
  var k = 1 - t;
  return 3 * k * k * t * p
}, b3p2:function(t, p) {
  var k = 1 - t;
  return 3 * k * t * t * p
}, b3p3:function(t, p) {
  return t * t * t * p
}, b3:function(t, p0, p1, p2, p3) {
  return this.b3p0(t, p0) + this.b3p1(t, p1) + this.b3p2(t, p2) + this.b3p3(t, p3)
}};
THREE.AnimationHandler = function() {
  var playing = [];
  var library = {};
  var that = {};
  that.update = function(deltaTimeMS) {
    for(var i = 0;i < playing.length;i++) {
      playing[i].update(deltaTimeMS)
    }
  };
  that.addToUpdate = function(animation) {
    if(playing.indexOf(animation) === -1) {
      playing.push(animation)
    }
  };
  that.removeFromUpdate = function(animation) {
    var index = playing.indexOf(animation);
    if(index !== -1) {
      playing.splice(index, 1)
    }
  };
  that.add = function(data) {
    if(library[data.name] !== undefined) {
      console.log("THREE.AnimationHandler.add: Warning! " + data.name + " already exists in library. Overwriting.")
    }
    library[data.name] = data;
    initData(data)
  };
  that.get = function(name) {
    if(typeof name === "string") {
      if(library[name]) {
        return library[name]
      }else {
        console.log("THREE.AnimationHandler.get: Couldn't find animation " + name);
        return null
      }
    }else {
    }
  };
  that.parse = function(root) {
    var hierarchy = [];
    if(root instanceof THREE.SkinnedMesh) {
      for(var b = 0;b < root.bones.length;b++) {
        hierarchy.push(root.bones[b])
      }
    }else {
      parseRecurseHierarchy(root, hierarchy)
    }
    return hierarchy
  };
  var parseRecurseHierarchy = function(root, hierarchy) {
    hierarchy.push(root);
    for(var c = 0;c < root.children.length;c++) {
      parseRecurseHierarchy(root.children[c], hierarchy)
    }
  };
  var initData = function(data) {
    if(data.initialized === true) {
      return
    }
    for(var h = 0;h < data.hierarchy.length;h++) {
      for(var k = 0;k < data.hierarchy[h].keys.length;k++) {
        if(data.hierarchy[h].keys[k].time < 0) {
          data.hierarchy[h].keys[k].time = 0
        }
        if(data.hierarchy[h].keys[k].rot !== undefined && !(data.hierarchy[h].keys[k].rot instanceof THREE.Quaternion)) {
          var quat = data.hierarchy[h].keys[k].rot;
          data.hierarchy[h].keys[k].rot = new THREE.Quaternion(quat[0], quat[1], quat[2], quat[3])
        }
      }
      if(data.hierarchy[h].keys.length && data.hierarchy[h].keys[0].morphTargets !== undefined) {
        var usedMorphTargets = {};
        for(var k = 0;k < data.hierarchy[h].keys.length;k++) {
          for(var m = 0;m < data.hierarchy[h].keys[k].morphTargets.length;m++) {
            var morphTargetName = data.hierarchy[h].keys[k].morphTargets[m];
            usedMorphTargets[morphTargetName] = -1
          }
        }
        data.hierarchy[h].usedMorphTargets = usedMorphTargets;
        for(var k = 0;k < data.hierarchy[h].keys.length;k++) {
          var influences = {};
          for(var morphTargetName in usedMorphTargets) {
            for(var m = 0;m < data.hierarchy[h].keys[k].morphTargets.length;m++) {
              if(data.hierarchy[h].keys[k].morphTargets[m] === morphTargetName) {
                influences[morphTargetName] = data.hierarchy[h].keys[k].morphTargetsInfluences[m];
                break
              }
            }
            if(m === data.hierarchy[h].keys[k].morphTargets.length) {
              influences[morphTargetName] = 0
            }
          }
          data.hierarchy[h].keys[k].morphTargetsInfluences = influences
        }
      }
      for(var k = 1;k < data.hierarchy[h].keys.length;k++) {
        if(data.hierarchy[h].keys[k].time === data.hierarchy[h].keys[k - 1].time) {
          data.hierarchy[h].keys.splice(k, 1);
          k--
        }
      }
      for(var k = 0;k < data.hierarchy[h].keys.length;k++) {
        data.hierarchy[h].keys[k].index = k
      }
    }
    var lengthInFrames = parseInt(data.length * data.fps, 10);
    data.JIT = {};
    data.JIT.hierarchy = [];
    for(var h = 0;h < data.hierarchy.length;h++) {
      data.JIT.hierarchy.push(new Array(lengthInFrames))
    }
    data.initialized = true
  };
  that.LINEAR = 0;
  that.CATMULLROM = 1;
  that.CATMULLROM_FORWARD = 2;
  return that
}();
THREE.Animation = function(root, name, interpolationType) {
  this.root = root;
  this.data = THREE.AnimationHandler.get(name);
  this.hierarchy = THREE.AnimationHandler.parse(root);
  this.currentTime = 0;
  this.timeScale = 1;
  this.isPlaying = false;
  this.isPaused = true;
  this.loop = true;
  this.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;
  this.points = [];
  this.target = new THREE.Vector3
};
THREE.Animation.prototype.play = function(loop, startTimeMS) {
  if(this.isPlaying === false) {
    this.isPlaying = true;
    this.loop = loop !== undefined ? loop : true;
    this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;
    var h, hl = this.hierarchy.length, object;
    for(h = 0;h < hl;h++) {
      object = this.hierarchy[h];
      if(this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD) {
        object.useQuaternion = true
      }
      object.matrixAutoUpdate = true;
      if(object.animationCache === undefined) {
        object.animationCache = {};
        object.animationCache.prevKey = {pos:0, rot:0, scl:0};
        object.animationCache.nextKey = {pos:0, rot:0, scl:0};
        object.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix
      }
      var prevKey = object.animationCache.prevKey;
      var nextKey = object.animationCache.nextKey;
      prevKey.pos = this.data.hierarchy[h].keys[0];
      prevKey.rot = this.data.hierarchy[h].keys[0];
      prevKey.scl = this.data.hierarchy[h].keys[0];
      nextKey.pos = this.getNextKeyWith("pos", h, 1);
      nextKey.rot = this.getNextKeyWith("rot", h, 1);
      nextKey.scl = this.getNextKeyWith("scl", h, 1)
    }
    this.update(0)
  }
  this.isPaused = false;
  THREE.AnimationHandler.addToUpdate(this)
};
THREE.Animation.prototype.pause = function() {
  if(this.isPaused === true) {
    THREE.AnimationHandler.addToUpdate(this)
  }else {
    THREE.AnimationHandler.removeFromUpdate(this)
  }
  this.isPaused = !this.isPaused
};
THREE.Animation.prototype.stop = function() {
  this.isPlaying = false;
  this.isPaused = false;
  THREE.AnimationHandler.removeFromUpdate(this)
};
THREE.Animation.prototype.update = function(deltaTimeMS) {
  if(this.isPlaying === false) {
    return
  }
  var types = ["pos", "rot", "scl"];
  var type;
  var scale;
  var vector;
  var prevXYZ, nextXYZ;
  var prevKey, nextKey;
  var object;
  var animationCache;
  var frame;
  var JIThierarchy = this.data.JIT.hierarchy;
  var currentTime, unloopedCurrentTime;
  var currentPoint, forwardPoint, angle;
  this.currentTime += deltaTimeMS * this.timeScale;
  unloopedCurrentTime = this.currentTime;
  currentTime = this.currentTime = this.currentTime % this.data.length;
  frame = parseInt(Math.min(currentTime * this.data.fps, this.data.length * this.data.fps), 10);
  for(var h = 0, hl = this.hierarchy.length;h < hl;h++) {
    object = this.hierarchy[h];
    animationCache = object.animationCache;
    for(var t = 0;t < 3;t++) {
      type = types[t];
      prevKey = animationCache.prevKey[type];
      nextKey = animationCache.nextKey[type];
      if(nextKey.time <= unloopedCurrentTime) {
        if(currentTime < unloopedCurrentTime) {
          if(this.loop) {
            prevKey = this.data.hierarchy[h].keys[0];
            nextKey = this.getNextKeyWith(type, h, 1);
            while(nextKey.time < currentTime) {
              prevKey = nextKey;
              nextKey = this.getNextKeyWith(type, h, nextKey.index + 1)
            }
          }else {
            this.stop();
            return
          }
        }else {
          do {
            prevKey = nextKey;
            nextKey = this.getNextKeyWith(type, h, nextKey.index + 1)
          }while(nextKey.time < currentTime)
        }
        animationCache.prevKey[type] = prevKey;
        animationCache.nextKey[type] = nextKey
      }
      object.matrixAutoUpdate = true;
      object.matrixWorldNeedsUpdate = true;
      scale = (currentTime - prevKey.time) / (nextKey.time - prevKey.time);
      prevXYZ = prevKey[type];
      nextXYZ = nextKey[type];
      if(scale < 0 || scale > 1) {
        console.log("THREE.Animation.update: Warning! Scale out of bounds:" + scale + " on bone " + h);
        scale = scale < 0 ? 0 : 1
      }
      if(type === "pos") {
        vector = object.position;
        if(this.interpolationType === THREE.AnimationHandler.LINEAR) {
          vector.x = prevXYZ[0] + (nextXYZ[0] - prevXYZ[0]) * scale;
          vector.y = prevXYZ[1] + (nextXYZ[1] - prevXYZ[1]) * scale;
          vector.z = prevXYZ[2] + (nextXYZ[2] - prevXYZ[2]) * scale
        }else {
          if(this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) {
            this.points[0] = this.getPrevKeyWith("pos", h, prevKey.index - 1)["pos"];
            this.points[1] = prevXYZ;
            this.points[2] = nextXYZ;
            this.points[3] = this.getNextKeyWith("pos", h, nextKey.index + 1)["pos"];
            scale = scale * 0.33 + 0.33;
            currentPoint = this.interpolateCatmullRom(this.points, scale);
            vector.x = currentPoint[0];
            vector.y = currentPoint[1];
            vector.z = currentPoint[2];
            if(this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) {
              forwardPoint = this.interpolateCatmullRom(this.points, scale * 1.01);
              this.target.set(forwardPoint[0], forwardPoint[1], forwardPoint[2]);
              this.target.sub(vector);
              this.target.y = 0;
              this.target.normalize();
              angle = Math.atan2(this.target.x, this.target.z);
              object.rotation.set(0, angle, 0)
            }
          }
        }
      }else {
        if(type === "rot") {
          THREE.Quaternion.slerp(prevXYZ, nextXYZ, object.quaternion, scale)
        }else {
          if(type === "scl") {
            vector = object.scale;
            vector.x = prevXYZ[0] + (nextXYZ[0] - prevXYZ[0]) * scale;
            vector.y = prevXYZ[1] + (nextXYZ[1] - prevXYZ[1]) * scale;
            vector.z = prevXYZ[2] + (nextXYZ[2] - prevXYZ[2]) * scale
          }
        }
      }
    }
  }
};
THREE.Animation.prototype.interpolateCatmullRom = function(points, scale) {
  var c = [], v3 = [], point, intPoint, weight, w2, w3, pa, pb, pc, pd;
  point = (points.length - 1) * scale;
  intPoint = Math.floor(point);
  weight = point - intPoint;
  c[0] = intPoint === 0 ? intPoint : intPoint - 1;
  c[1] = intPoint;
  c[2] = intPoint > points.length - 2 ? intPoint : intPoint + 1;
  c[3] = intPoint > points.length - 3 ? intPoint : intPoint + 2;
  pa = points[c[0]];
  pb = points[c[1]];
  pc = points[c[2]];
  pd = points[c[3]];
  w2 = weight * weight;
  w3 = weight * w2;
  v3[0] = this.interpolate(pa[0], pb[0], pc[0], pd[0], weight, w2, w3);
  v3[1] = this.interpolate(pa[1], pb[1], pc[1], pd[1], weight, w2, w3);
  v3[2] = this.interpolate(pa[2], pb[2], pc[2], pd[2], weight, w2, w3);
  return v3
};
THREE.Animation.prototype.interpolate = function(p0, p1, p2, p3, t, t2, t3) {
  var v0 = (p2 - p0) * 0.5, v1 = (p3 - p1) * 0.5;
  return(2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1
};
THREE.Animation.prototype.getNextKeyWith = function(type, h, key) {
  var keys = this.data.hierarchy[h].keys;
  if(this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) {
    key = key < keys.length - 1 ? key : keys.length - 1
  }else {
    key = key % keys.length
  }
  for(;key < keys.length;key++) {
    if(keys[key][type] !== undefined) {
      return keys[key]
    }
  }
  return this.data.hierarchy[h].keys[0]
};
THREE.Animation.prototype.getPrevKeyWith = function(type, h, key) {
  var keys = this.data.hierarchy[h].keys;
  if(this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) {
    key = key > 0 ? key : 0
  }else {
    key = key >= 0 ? key : key + keys.length
  }
  for(;key >= 0;key--) {
    if(keys[key][type] !== undefined) {
      return keys[key]
    }
  }
  return this.data.hierarchy[h].keys[keys.length - 1]
};
THREE.KeyFrameAnimation = function(root, data, JITCompile) {
  this.root = root;
  this.data = THREE.AnimationHandler.get(data);
  this.hierarchy = THREE.AnimationHandler.parse(root);
  this.currentTime = 0;
  this.timeScale = 0.0010;
  this.isPlaying = false;
  this.isPaused = true;
  this.loop = true;
  this.JITCompile = JITCompile !== undefined ? JITCompile : true;
  for(var h = 0, hl = this.hierarchy.length;h < hl;h++) {
    var keys = this.data.hierarchy[h].keys, sids = this.data.hierarchy[h].sids, obj = this.hierarchy[h];
    if(keys.length && sids) {
      for(var s = 0;s < sids.length;s++) {
        var sid = sids[s], next = this.getNextKeyWith(sid, h, 0);
        if(next) {
          next.apply(sid)
        }
      }
      obj.matrixAutoUpdate = false;
      this.data.hierarchy[h].node.updateMatrix();
      obj.matrixWorldNeedsUpdate = true
    }
  }
};
THREE.KeyFrameAnimation.prototype.play = function(loop, startTimeMS) {
  if(!this.isPlaying) {
    this.isPlaying = true;
    this.loop = loop !== undefined ? loop : true;
    this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;
    this.startTimeMs = startTimeMS;
    this.startTime = 1E7;
    this.endTime = -this.startTime;
    var h, hl = this.hierarchy.length, object, node;
    for(h = 0;h < hl;h++) {
      object = this.hierarchy[h];
      node = this.data.hierarchy[h];
      object.useQuaternion = true;
      if(node.animationCache === undefined) {
        node.animationCache = {};
        node.animationCache.prevKey = null;
        node.animationCache.nextKey = null;
        node.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix
      }
      var keys = this.data.hierarchy[h].keys;
      if(keys.length) {
        node.animationCache.prevKey = keys[0];
        node.animationCache.nextKey = keys[1];
        this.startTime = Math.min(keys[0].time, this.startTime);
        this.endTime = Math.max(keys[keys.length - 1].time, this.endTime)
      }
    }
    this.update(0)
  }
  this.isPaused = false;
  THREE.AnimationHandler.addToUpdate(this)
};
THREE.KeyFrameAnimation.prototype.pause = function() {
  if(this.isPaused) {
    THREE.AnimationHandler.addToUpdate(this)
  }else {
    THREE.AnimationHandler.removeFromUpdate(this)
  }
  this.isPaused = !this.isPaused
};
THREE.KeyFrameAnimation.prototype.stop = function() {
  this.isPlaying = false;
  this.isPaused = false;
  THREE.AnimationHandler.removeFromUpdate(this);
  for(var h = 0;h < this.data.hierarchy.length;h++) {
    var obj = this.hierarchy[h];
    var node = this.data.hierarchy[h];
    if(node.animationCache !== undefined) {
      var original = node.animationCache.originalMatrix;
      if(obj instanceof THREE.Bone) {
        original.copy(obj.skinMatrix);
        obj.skinMatrix = original
      }else {
        original.copy(obj.matrix);
        obj.matrix = original
      }
      delete node.animationCache
    }
  }
};
THREE.KeyFrameAnimation.prototype.update = function(deltaTimeMS) {
  if(!this.isPlaying) {
    return
  }
  var prevKey, nextKey;
  var object;
  var node;
  var frame;
  var JIThierarchy = this.data.JIT.hierarchy;
  var currentTime, unloopedCurrentTime;
  var looped;
  this.currentTime += deltaTimeMS * this.timeScale;
  unloopedCurrentTime = this.currentTime;
  currentTime = this.currentTime = this.currentTime % this.data.length;
  if(currentTime < this.startTimeMs) {
    currentTime = this.currentTime = this.startTimeMs + currentTime
  }
  frame = parseInt(Math.min(currentTime * this.data.fps, this.data.length * this.data.fps), 10);
  looped = currentTime < unloopedCurrentTime;
  if(looped && !this.loop) {
    for(var h = 0, hl = this.hierarchy.length;h < hl;h++) {
      var keys = this.data.hierarchy[h].keys, sids = this.data.hierarchy[h].sids, end = keys.length - 1, obj = this.hierarchy[h];
      if(keys.length) {
        for(var s = 0;s < sids.length;s++) {
          var sid = sids[s], prev = this.getPrevKeyWith(sid, h, end);
          if(prev) {
            prev.apply(sid)
          }
        }
        this.data.hierarchy[h].node.updateMatrix();
        obj.matrixWorldNeedsUpdate = true
      }
    }
    this.stop();
    return
  }
  if(currentTime < this.startTime) {
    return
  }
  for(var h = 0, hl = this.hierarchy.length;h < hl;h++) {
    object = this.hierarchy[h];
    node = this.data.hierarchy[h];
    var keys = node.keys, animationCache = node.animationCache;
    if(this.JITCompile && JIThierarchy[h][frame] !== undefined) {
      if(object instanceof THREE.Bone) {
        object.skinMatrix = JIThierarchy[h][frame];
        object.matrixWorldNeedsUpdate = false
      }else {
        object.matrix = JIThierarchy[h][frame];
        object.matrixWorldNeedsUpdate = true
      }
    }else {
      if(keys.length) {
        if(this.JITCompile && animationCache) {
          if(object instanceof THREE.Bone) {
            object.skinMatrix = animationCache.originalMatrix
          }else {
            object.matrix = animationCache.originalMatrix
          }
        }
        prevKey = animationCache.prevKey;
        nextKey = animationCache.nextKey;
        if(prevKey && nextKey) {
          if(nextKey.time <= unloopedCurrentTime) {
            if(looped && this.loop) {
              prevKey = keys[0];
              nextKey = keys[1];
              while(nextKey.time < currentTime) {
                prevKey = nextKey;
                nextKey = keys[prevKey.index + 1]
              }
            }else {
              if(!looped) {
                var lastIndex = keys.length - 1;
                while(nextKey.time < currentTime && nextKey.index !== lastIndex) {
                  prevKey = nextKey;
                  nextKey = keys[prevKey.index + 1]
                }
              }
            }
            animationCache.prevKey = prevKey;
            animationCache.nextKey = nextKey
          }
          if(nextKey.time >= currentTime) {
            prevKey.interpolate(nextKey, currentTime)
          }else {
            prevKey.interpolate(nextKey, nextKey.time)
          }
        }
        this.data.hierarchy[h].node.updateMatrix();
        object.matrixWorldNeedsUpdate = true
      }
    }
  }
  if(this.JITCompile) {
    if(JIThierarchy[0][frame] === undefined) {
      this.hierarchy[0].updateMatrixWorld(true);
      for(var h = 0;h < this.hierarchy.length;h++) {
        if(this.hierarchy[h] instanceof THREE.Bone) {
          JIThierarchy[h][frame] = this.hierarchy[h].skinMatrix.clone()
        }else {
          JIThierarchy[h][frame] = this.hierarchy[h].matrix.clone()
        }
      }
    }
  }
};
THREE.KeyFrameAnimation.prototype.getNextKeyWith = function(sid, h, key) {
  var keys = this.data.hierarchy[h].keys;
  key = key % keys.length;
  for(;key < keys.length;key++) {
    if(keys[key].hasTarget(sid)) {
      return keys[key]
    }
  }
  return keys[0]
};
THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function(sid, h, key) {
  var keys = this.data.hierarchy[h].keys;
  key = key >= 0 ? key : key + keys.length;
  for(;key >= 0;key--) {
    if(keys[key].hasTarget(sid)) {
      return keys[key]
    }
  }
  return keys[keys.length - 1]
};
THREE.CubeCamera = function(near, far, cubeResolution) {
  THREE.Object3D.call(this);
  var fov = 90, aspect = 1;
  var cameraPX = new THREE.PerspectiveCamera(fov, aspect, near, far);
  cameraPX.up.set(0, -1, 0);
  cameraPX.lookAt(new THREE.Vector3(1, 0, 0));
  this.add(cameraPX);
  var cameraNX = new THREE.PerspectiveCamera(fov, aspect, near, far);
  cameraNX.up.set(0, -1, 0);
  cameraNX.lookAt(new THREE.Vector3(-1, 0, 0));
  this.add(cameraNX);
  var cameraPY = new THREE.PerspectiveCamera(fov, aspect, near, far);
  cameraPY.up.set(0, 0, 1);
  cameraPY.lookAt(new THREE.Vector3(0, 1, 0));
  this.add(cameraPY);
  var cameraNY = new THREE.PerspectiveCamera(fov, aspect, near, far);
  cameraNY.up.set(0, 0, -1);
  cameraNY.lookAt(new THREE.Vector3(0, -1, 0));
  this.add(cameraNY);
  var cameraPZ = new THREE.PerspectiveCamera(fov, aspect, near, far);
  cameraPZ.up.set(0, -1, 0);
  cameraPZ.lookAt(new THREE.Vector3(0, 0, 1));
  this.add(cameraPZ);
  var cameraNZ = new THREE.PerspectiveCamera(fov, aspect, near, far);
  cameraNZ.up.set(0, -1, 0);
  cameraNZ.lookAt(new THREE.Vector3(0, 0, -1));
  this.add(cameraNZ);
  this.renderTarget = new THREE.WebGLRenderTargetCube(cubeResolution, cubeResolution, {format:THREE.RGBFormat, magFilter:THREE.LinearFilter, minFilter:THREE.LinearFilter});
  this.updateCubeMap = function(renderer, scene) {
    var renderTarget = this.renderTarget;
    var generateMipmaps = renderTarget.generateMipmaps;
    renderTarget.generateMipmaps = false;
    renderTarget.activeCubeFace = 0;
    renderer.render(scene, cameraPX, renderTarget);
    renderTarget.activeCubeFace = 1;
    renderer.render(scene, cameraNX, renderTarget);
    renderTarget.activeCubeFace = 2;
    renderer.render(scene, cameraPY, renderTarget);
    renderTarget.activeCubeFace = 3;
    renderer.render(scene, cameraNY, renderTarget);
    renderTarget.activeCubeFace = 4;
    renderer.render(scene, cameraPZ, renderTarget);
    renderTarget.generateMipmaps = generateMipmaps;
    renderTarget.activeCubeFace = 5;
    renderer.render(scene, cameraNZ, renderTarget)
  }
};
THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);
THREE.CombinedCamera = function(width, height, fov, near, far, orthoNear, orthoFar) {
  THREE.Camera.call(this);
  this.fov = fov;
  this.left = -width / 2;
  this.right = width / 2;
  this.top = height / 2;
  this.bottom = -height / 2;
  this.cameraO = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, orthoNear, orthoFar);
  this.cameraP = new THREE.PerspectiveCamera(fov, width / height, near, far);
  this.zoom = 1;
  this.toPerspective();
  var aspect = width / height
};
THREE.CombinedCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.CombinedCamera.prototype.toPerspective = function() {
  this.near = this.cameraP.near;
  this.far = this.cameraP.far;
  this.cameraP.fov = this.fov / this.zoom;
  this.cameraP.updateProjectionMatrix();
  this.projectionMatrix = this.cameraP.projectionMatrix;
  this.inPerspectiveMode = true;
  this.inOrthographicMode = false
};
THREE.CombinedCamera.prototype.toOrthographic = function() {
  var fov = this.fov;
  var aspect = this.cameraP.aspect;
  var near = this.cameraP.near;
  var far = this.cameraP.far;
  var hyperfocus = (near + far) / 2;
  var halfHeight = Math.tan(fov / 2) * hyperfocus;
  var planeHeight = 2 * halfHeight;
  var planeWidth = planeHeight * aspect;
  var halfWidth = planeWidth / 2;
  halfHeight /= this.zoom;
  halfWidth /= this.zoom;
  this.cameraO.left = -halfWidth;
  this.cameraO.right = halfWidth;
  this.cameraO.top = halfHeight;
  this.cameraO.bottom = -halfHeight;
  this.cameraO.updateProjectionMatrix();
  this.near = this.cameraO.near;
  this.far = this.cameraO.far;
  this.projectionMatrix = this.cameraO.projectionMatrix;
  this.inPerspectiveMode = false;
  this.inOrthographicMode = true
};
THREE.CombinedCamera.prototype.setSize = function(width, height) {
  this.cameraP.aspect = width / height;
  this.left = -width / 2;
  this.right = width / 2;
  this.top = height / 2;
  this.bottom = -height / 2
};
THREE.CombinedCamera.prototype.setFov = function(fov) {
  this.fov = fov;
  if(this.inPerspectiveMode) {
    this.toPerspective()
  }else {
    this.toOrthographic()
  }
};
THREE.CombinedCamera.prototype.updateProjectionMatrix = function() {
  if(this.inPerspectiveMode) {
    this.toPerspective()
  }else {
    this.toPerspective();
    this.toOrthographic()
  }
};
THREE.CombinedCamera.prototype.setLens = function(focalLength, frameHeight) {
  if(frameHeight === undefined) {
    frameHeight = 24
  }
  var fov = 2 * THREE.Math.radToDeg(Math.atan(frameHeight / (focalLength * 2)));
  this.setFov(fov);
  return fov
};
THREE.CombinedCamera.prototype.setZoom = function(zoom) {
  this.zoom = zoom;
  if(this.inPerspectiveMode) {
    this.toPerspective()
  }else {
    this.toOrthographic()
  }
};
THREE.CombinedCamera.prototype.toFrontView = function() {
  this.rotation.x = 0;
  this.rotation.y = 0;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false
};
THREE.CombinedCamera.prototype.toBackView = function() {
  this.rotation.x = 0;
  this.rotation.y = Math.PI;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false
};
THREE.CombinedCamera.prototype.toLeftView = function() {
  this.rotation.x = 0;
  this.rotation.y = -Math.PI / 2;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false
};
THREE.CombinedCamera.prototype.toRightView = function() {
  this.rotation.x = 0;
  this.rotation.y = Math.PI / 2;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false
};
THREE.CombinedCamera.prototype.toTopView = function() {
  this.rotation.x = -Math.PI / 2;
  this.rotation.y = 0;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false
};
THREE.CombinedCamera.prototype.toBottomView = function() {
  this.rotation.x = Math.PI / 2;
  this.rotation.y = 0;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false
};
THREE.AsteriskGeometry = function(innerRadius, outerRadius) {
  THREE.Geometry.call(this);
  var sd = innerRadius;
  var ed = outerRadius;
  var sd2 = 0.707 * sd;
  var ed2 = 0.707 * ed;
  var rays = [[sd, 0, 0], [ed, 0, 0], [-sd, 0, 0], [-ed, 0, 0], [0, sd, 0], [0, ed, 0], [0, -sd, 0], [0, -ed, 0], [0, 0, sd], [0, 0, ed], [0, 0, -sd], [0, 0, -ed], [sd2, sd2, 0], [ed2, ed2, 0], [-sd2, -sd2, 0], [-ed2, -ed2, 0], [sd2, -sd2, 0], [ed2, -ed2, 0], [-sd2, sd2, 0], [-ed2, ed2, 0], [sd2, 0, sd2], [ed2, 0, ed2], [-sd2, 0, -sd2], [-ed2, 0, -ed2], [sd2, 0, -sd2], [ed2, 0, -ed2], [-sd2, 0, sd2], [-ed2, 0, ed2], [0, sd2, sd2], [0, ed2, ed2], [0, -sd2, -sd2], [0, -ed2, -ed2], [0, sd2, -sd2], [0, 
  ed2, -ed2], [0, -sd2, sd2], [0, -ed2, ed2]];
  for(var i = 0, il = rays.length;i < il;i++) {
    var x = rays[i][0];
    var y = rays[i][1];
    var z = rays[i][2];
    this.vertices.push(new THREE.Vector3(x, y, z))
  }
};
THREE.AsteriskGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CircleGeometry = function(radius, segments, thetaStart, thetaLength) {
  THREE.Geometry.call(this);
  radius = radius || 50;
  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
  segments = segments !== undefined ? Math.max(3, segments) : 8;
  var i, uvs = [], center = new THREE.Vector3, centerUV = new THREE.Vector2(0.5, 0.5);
  this.vertices.push(center);
  uvs.push(centerUV);
  for(i = 0;i <= segments;i++) {
    var vertex = new THREE.Vector3;
    vertex.x = radius * Math.cos(thetaStart + i / segments * thetaLength);
    vertex.y = radius * Math.sin(thetaStart + i / segments * thetaLength);
    this.vertices.push(vertex);
    uvs.push(new THREE.Vector2((vertex.x / radius + 1) / 2, -(vertex.y / radius + 1) / 2 + 1))
  }
  var n = new THREE.Vector3(0, 0, -1);
  for(i = 1;i <= segments;i++) {
    var v1 = i;
    var v2 = i + 1;
    var v3 = 0;
    this.faces.push(new THREE.Face3(v1, v2, v3, [n, n, n]));
    this.faceVertexUvs[0].push([uvs[i], uvs[i + 1], centerUV])
  }
  this.computeCentroids();
  this.computeFaceNormals();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, radius)
};
THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CubeGeometry = function(width, height, depth, widthSegments, heightSegments, depthSegments) {
  THREE.Geometry.call(this);
  var scope = this;
  this.width = width;
  this.height = height;
  this.depth = depth;
  this.widthSegments = widthSegments || 1;
  this.heightSegments = heightSegments || 1;
  this.depthSegments = depthSegments || 1;
  var width_half = this.width / 2;
  var height_half = this.height / 2;
  var depth_half = this.depth / 2;
  buildPlane("z", "y", -1, -1, this.depth, this.height, width_half, 0);
  buildPlane("z", "y", 1, -1, this.depth, this.height, -width_half, 1);
  buildPlane("x", "z", 1, 1, this.width, this.depth, height_half, 2);
  buildPlane("x", "z", 1, -1, this.width, this.depth, -height_half, 3);
  buildPlane("x", "y", 1, -1, this.width, this.height, depth_half, 4);
  buildPlane("x", "y", -1, -1, this.width, this.height, -depth_half, 5);
  function buildPlane(u, v, udir, vdir, width, height, depth, materialIndex) {
    var w, ix, iy, gridX = scope.widthSegments, gridY = scope.heightSegments, width_half = width / 2, height_half = height / 2, offset = scope.vertices.length;
    if(u === "x" && v === "y" || u === "y" && v === "x") {
      w = "z"
    }else {
      if(u === "x" && v === "z" || u === "z" && v === "x") {
        w = "y";
        gridY = scope.depthSegments
      }else {
        if(u === "z" && v === "y" || u === "y" && v === "z") {
          w = "x";
          gridX = scope.depthSegments
        }
      }
    }
    var gridX1 = gridX + 1, gridY1 = gridY + 1, segment_width = width / gridX, segment_height = height / gridY, normal = new THREE.Vector3;
    normal[w] = depth > 0 ? 1 : -1;
    for(iy = 0;iy < gridY1;iy++) {
      for(ix = 0;ix < gridX1;ix++) {
        var vector = new THREE.Vector3;
        vector[u] = (ix * segment_width - width_half) * udir;
        vector[v] = (iy * segment_height - height_half) * vdir;
        vector[w] = depth;
        scope.vertices.push(vector)
      }
    }
    for(iy = 0;iy < gridY;iy++) {
      for(ix = 0;ix < gridX;ix++) {
        var a = ix + gridX1 * iy;
        var b = ix + gridX1 * (iy + 1);
        var c = ix + 1 + gridX1 * (iy + 1);
        var d = ix + 1 + gridX1 * iy;
        var face = new THREE.Face4(a + offset, b + offset, c + offset, d + offset);
        face.normal.copy(normal);
        face.vertexNormals.push(normal.clone(), normal.clone(), normal.clone(), normal.clone());
        face.materialIndex = materialIndex;
        scope.faces.push(face);
        scope.faceVertexUvs[0].push([new THREE.Vector2(ix / gridX, 1 - iy / gridY), new THREE.Vector2(ix / gridX, 1 - (iy + 1) / gridY), new THREE.Vector2((ix + 1) / gridX, 1 - (iy + 1) / gridY), new THREE.Vector2((ix + 1) / gridX, 1 - iy / gridY)])
      }
    }
  }
  this.computeCentroids();
  this.mergeVertices()
};
THREE.CubeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CylinderGeometry = function(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded) {
  THREE.Geometry.call(this);
  radiusTop = radiusTop !== undefined ? radiusTop : 20;
  radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
  height = height !== undefined ? height : 100;
  var heightHalf = height / 2;
  var segmentsX = radiusSegments || 8;
  var segmentsY = heightSegments || 1;
  var x, y, vertices = [], uvs = [];
  for(y = 0;y <= segmentsY;y++) {
    var verticesRow = [];
    var uvsRow = [];
    var v = y / segmentsY;
    var radius = v * (radiusBottom - radiusTop) + radiusTop;
    for(x = 0;x <= segmentsX;x++) {
      var u = x / segmentsX;
      var vertex = new THREE.Vector3;
      vertex.x = radius * Math.sin(u * Math.PI * 2);
      vertex.y = -v * height + heightHalf;
      vertex.z = radius * Math.cos(u * Math.PI * 2);
      this.vertices.push(vertex);
      verticesRow.push(this.vertices.length - 1);
      uvsRow.push(new THREE.Vector2(u, 1 - v))
    }
    vertices.push(verticesRow);
    uvs.push(uvsRow)
  }
  var tanTheta = (radiusBottom - radiusTop) / height;
  var na, nb;
  for(x = 0;x < segmentsX;x++) {
    if(radiusTop !== 0) {
      na = this.vertices[vertices[0][x]].clone();
      nb = this.vertices[vertices[0][x + 1]].clone()
    }else {
      na = this.vertices[vertices[1][x]].clone();
      nb = this.vertices[vertices[1][x + 1]].clone()
    }
    na.setY(Math.sqrt(na.x * na.x + na.z * na.z) * tanTheta).normalize();
    nb.setY(Math.sqrt(nb.x * nb.x + nb.z * nb.z) * tanTheta).normalize();
    for(y = 0;y < segmentsY;y++) {
      var v1 = vertices[y][x];
      var v2 = vertices[y + 1][x];
      var v3 = vertices[y + 1][x + 1];
      var v4 = vertices[y][x + 1];
      var n1 = na.clone();
      var n2 = na.clone();
      var n3 = nb.clone();
      var n4 = nb.clone();
      var uv1 = uvs[y][x].clone();
      var uv2 = uvs[y + 1][x].clone();
      var uv3 = uvs[y + 1][x + 1].clone();
      var uv4 = uvs[y][x + 1].clone();
      this.faces.push(new THREE.Face4(v1, v2, v3, v4, [n1, n2, n3, n4]));
      this.faceVertexUvs[0].push([uv1, uv2, uv3, uv4])
    }
  }
  if(!openEnded && radiusTop > 0) {
    this.vertices.push(new THREE.Vector3(0, heightHalf, 0));
    for(x = 0;x < segmentsX;x++) {
      var v1 = vertices[0][x];
      var v2 = vertices[0][x + 1];
      var v3 = this.vertices.length - 1;
      var n1 = new THREE.Vector3(0, 1, 0);
      var n2 = new THREE.Vector3(0, 1, 0);
      var n3 = new THREE.Vector3(0, 1, 0);
      var uv1 = uvs[0][x].clone();
      var uv2 = uvs[0][x + 1].clone();
      var uv3 = new THREE.Vector2(uv2.u, 0);
      this.faces.push(new THREE.Face3(v1, v2, v3, [n1, n2, n3]));
      this.faceVertexUvs[0].push([uv1, uv2, uv3])
    }
  }
  if(!openEnded && radiusBottom > 0) {
    this.vertices.push(new THREE.Vector3(0, -heightHalf, 0));
    for(x = 0;x < segmentsX;x++) {
      var v1 = vertices[y][x + 1];
      var v2 = vertices[y][x];
      var v3 = this.vertices.length - 1;
      var n1 = new THREE.Vector3(0, -1, 0);
      var n2 = new THREE.Vector3(0, -1, 0);
      var n3 = new THREE.Vector3(0, -1, 0);
      var uv1 = uvs[y][x + 1].clone();
      var uv2 = uvs[y][x].clone();
      var uv3 = new THREE.Vector2(uv2.u, 1);
      this.faces.push(new THREE.Face3(v1, v2, v3, [n1, n2, n3]));
      this.faceVertexUvs[0].push([uv1, uv2, uv3])
    }
  }
  this.computeCentroids();
  this.computeFaceNormals()
};
THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ExtrudeGeometry = function(shapes, options) {
  if(typeof shapes === "undefined") {
    shapes = [];
    return
  }
  THREE.Geometry.call(this);
  shapes = shapes instanceof Array ? shapes : [shapes];
  this.shapebb = shapes[shapes.length - 1].getBoundingBox();
  this.addShapeList(shapes, options);
  this.computeCentroids();
  this.computeFaceNormals()
};
THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ExtrudeGeometry.prototype.addShapeList = function(shapes, options) {
  var sl = shapes.length;
  for(var s = 0;s < sl;s++) {
    var shape = shapes[s];
    this.addShape(shape, options)
  }
};
THREE.ExtrudeGeometry.prototype.addShape = function(shape, options) {
  var amount = options.amount !== undefined ? options.amount : 100;
  var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
  var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
  var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
  var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
  var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
  var steps = options.steps !== undefined ? options.steps : 1;
  var extrudePath = options.extrudePath;
  var extrudePts, extrudeByPath = false;
  var material = options.material;
  var extrudeMaterial = options.extrudeMaterial;
  var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;
  var shapebb = this.shapebb;
  var splineTube, binormal, normal, position2;
  if(extrudePath) {
    extrudePts = extrudePath.getSpacedPoints(steps);
    extrudeByPath = true;
    bevelEnabled = false;
    splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);
    binormal = new THREE.Vector3;
    normal = new THREE.Vector3;
    position2 = new THREE.Vector3
  }
  if(!bevelEnabled) {
    bevelSegments = 0;
    bevelThickness = 0;
    bevelSize = 0
  }
  var ahole, h, hl;
  var scope = this;
  var bevelPoints = [];
  var shapesOffset = this.vertices.length;
  var shapePoints = shape.extractPoints(curveSegments);
  var vertices = shapePoints.shape;
  var holes = shapePoints.holes;
  var reverse = !THREE.Shape.Utils.isClockWise(vertices);
  if(reverse) {
    vertices = vertices.reverse();
    for(h = 0, hl = holes.length;h < hl;h++) {
      ahole = holes[h];
      if(THREE.Shape.Utils.isClockWise(ahole)) {
        holes[h] = ahole.reverse()
      }
    }
    reverse = false
  }
  var faces = THREE.Shape.Utils.triangulateShape(vertices, holes);
  var contour = vertices;
  for(h = 0, hl = holes.length;h < hl;h++) {
    ahole = holes[h];
    vertices = vertices.concat(ahole)
  }
  function scalePt2(pt, vec, size) {
    if(!vec) {
      console.log("die")
    }
    return vec.clone().multiplyScalar(size).add(pt)
  }
  var b, bs, t, z, vert, vlen = vertices.length, face, flen = faces.length, cont, clen = contour.length;
  var RAD_TO_DEGREES = 180 / Math.PI;
  function getBevelVec(pt_i, pt_j, pt_k) {
    return getBevelVec2(pt_i, pt_j, pt_k)
  }
  function getBevelVec1(pt_i, pt_j, pt_k) {
    var anglea = Math.atan2(pt_j.y - pt_i.y, pt_j.x - pt_i.x);
    var angleb = Math.atan2(pt_k.y - pt_i.y, pt_k.x - pt_i.x);
    if(anglea > angleb) {
      angleb += Math.PI * 2
    }
    var anglec = (anglea + angleb) / 2;
    var x = -Math.cos(anglec);
    var y = -Math.sin(anglec);
    var vec = new THREE.Vector2(x, y);
    return vec
  }
  function getBevelVec2(pt_i, pt_j, pt_k) {
    var a = THREE.ExtrudeGeometry.__v1, b = THREE.ExtrudeGeometry.__v2, v_hat = THREE.ExtrudeGeometry.__v3, w_hat = THREE.ExtrudeGeometry.__v4, p = THREE.ExtrudeGeometry.__v5, q = THREE.ExtrudeGeometry.__v6, v, w, v_dot_w_hat, q_sub_p_dot_w_hat, s, intersection;
    a.set(pt_i.x - pt_j.x, pt_i.y - pt_j.y);
    b.set(pt_i.x - pt_k.x, pt_i.y - pt_k.y);
    v = a.normalize();
    w = b.normalize();
    v_hat.set(-v.y, v.x);
    w_hat.set(w.y, -w.x);
    p.copy(pt_i).add(v_hat);
    q.copy(pt_i).add(w_hat);
    if(p.equals(q)) {
      return w_hat.clone()
    }
    p.copy(pt_j).add(v_hat);
    q.copy(pt_k).add(w_hat);
    v_dot_w_hat = v.dot(w_hat);
    q_sub_p_dot_w_hat = q.sub(p).dot(w_hat);
    if(v_dot_w_hat === 0) {
      console.log("Either infinite or no solutions!");
      if(q_sub_p_dot_w_hat === 0) {
        console.log("Its finite solutions.")
      }else {
        console.log("Too bad, no solutions.")
      }
    }
    s = q_sub_p_dot_w_hat / v_dot_w_hat;
    if(s < 0) {
      return getBevelVec1(pt_i, pt_j, pt_k)
    }
    intersection = v.multiplyScalar(s).add(p);
    return intersection.sub(pt_i).clone()
  }
  var contourMovements = [];
  for(var i = 0, il = contour.length, j = il - 1, k = i + 1;i < il;i++, j++, k++) {
    if(j === il) {
      j = 0
    }
    if(k === il) {
      k = 0
    }
    var pt_i = contour[i];
    var pt_j = contour[j];
    var pt_k = contour[k];
    contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k])
  }
  var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();
  for(h = 0, hl = holes.length;h < hl;h++) {
    ahole = holes[h];
    oneHoleMovements = [];
    for(i = 0, il = ahole.length, j = il - 1, k = i + 1;i < il;i++, j++, k++) {
      if(j === il) {
        j = 0
      }
      if(k === il) {
        k = 0
      }
      oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k])
    }
    holesMovements.push(oneHoleMovements);
    verticesMovements = verticesMovements.concat(oneHoleMovements)
  }
  for(b = 0;b < bevelSegments;b++) {
    t = b / bevelSegments;
    z = bevelThickness * (1 - t);
    bs = bevelSize * Math.sin(t * Math.PI / 2);
    for(i = 0, il = contour.length;i < il;i++) {
      vert = scalePt2(contour[i], contourMovements[i], bs);
      v(vert.x, vert.y, -z)
    }
    for(h = 0, hl = holes.length;h < hl;h++) {
      ahole = holes[h];
      oneHoleMovements = holesMovements[h];
      for(i = 0, il = ahole.length;i < il;i++) {
        vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
        v(vert.x, vert.y, -z)
      }
    }
  }
  bs = bevelSize;
  for(i = 0;i < vlen;i++) {
    vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
    if(!extrudeByPath) {
      v(vert.x, vert.y, 0)
    }else {
      normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
      binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
      position2.copy(extrudePts[0]).add(normal).add(binormal);
      v(position2.x, position2.y, position2.z)
    }
  }
  var s;
  for(s = 1;s <= steps;s++) {
    for(i = 0;i < vlen;i++) {
      vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
      if(!extrudeByPath) {
        v(vert.x, vert.y, amount / steps * s)
      }else {
        normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
        binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
        position2.copy(extrudePts[s]).add(normal).add(binormal);
        v(position2.x, position2.y, position2.z)
      }
    }
  }
  for(b = bevelSegments - 1;b >= 0;b--) {
    t = b / bevelSegments;
    z = bevelThickness * (1 - t);
    bs = bevelSize * Math.sin(t * Math.PI / 2);
    for(i = 0, il = contour.length;i < il;i++) {
      vert = scalePt2(contour[i], contourMovements[i], bs);
      v(vert.x, vert.y, amount + z)
    }
    for(h = 0, hl = holes.length;h < hl;h++) {
      ahole = holes[h];
      oneHoleMovements = holesMovements[h];
      for(i = 0, il = ahole.length;i < il;i++) {
        vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
        if(!extrudeByPath) {
          v(vert.x, vert.y, amount + z)
        }else {
          v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z)
        }
      }
    }
  }
  buildLidFaces();
  buildSideFaces();
  function buildLidFaces() {
    if(bevelEnabled) {
      var layer = 0;
      var offset = vlen * layer;
      for(i = 0;i < flen;i++) {
        face = faces[i];
        f3(face[2] + offset, face[1] + offset, face[0] + offset, true)
      }
      layer = steps + bevelSegments * 2;
      offset = vlen * layer;
      for(i = 0;i < flen;i++) {
        face = faces[i];
        f3(face[0] + offset, face[1] + offset, face[2] + offset, false)
      }
    }else {
      for(i = 0;i < flen;i++) {
        face = faces[i];
        f3(face[2], face[1], face[0], true)
      }
      for(i = 0;i < flen;i++) {
        face = faces[i];
        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps, false)
      }
    }
  }
  function buildSideFaces() {
    var layeroffset = 0;
    sidewalls(contour, layeroffset);
    layeroffset += contour.length;
    for(h = 0, hl = holes.length;h < hl;h++) {
      ahole = holes[h];
      sidewalls(ahole, layeroffset);
      layeroffset += ahole.length
    }
  }
  function sidewalls(contour, layeroffset) {
    var j, k;
    i = contour.length;
    while(--i >= 0) {
      j = i;
      k = i - 1;
      if(k < 0) {
        k = contour.length - 1
      }
      var s = 0, sl = steps + bevelSegments * 2;
      for(s = 0;s < sl;s++) {
        var slen1 = vlen * s;
        var slen2 = vlen * (s + 1);
        var a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
        f4(a, b, c, d, contour, s, sl, j, k)
      }
    }
  }
  function v(x, y, z) {
    scope.vertices.push(new THREE.Vector3(x, y, z))
  }
  function f3(a, b, c, isBottom) {
    a += shapesOffset;
    b += shapesOffset;
    c += shapesOffset;
    scope.faces.push(new THREE.Face3(a, b, c, null, null, material));
    var uvs = isBottom ? uvgen.generateBottomUV(scope, shape, options, a, b, c) : uvgen.generateTopUV(scope, shape, options, a, b, c);
    scope.faceVertexUvs[0].push(uvs)
  }
  function f4(a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2) {
    a += shapesOffset;
    b += shapesOffset;
    c += shapesOffset;
    d += shapesOffset;
    scope.faces.push(new THREE.Face4(a, b, c, d, null, null, extrudeMaterial));
    var uvs = uvgen.generateSideWallUV(scope, shape, wallContour, options, a, b, c, d, stepIndex, stepsLength, contourIndex1, contourIndex2);
    scope.faceVertexUvs[0].push(uvs)
  }
};
THREE.ExtrudeGeometry.WorldUVGenerator = {generateTopUV:function(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC) {
  var ax = geometry.vertices[indexA].x, ay = geometry.vertices[indexA].y, bx = geometry.vertices[indexB].x, by = geometry.vertices[indexB].y, cx = geometry.vertices[indexC].x, cy = geometry.vertices[indexC].y;
  return[new THREE.Vector2(ax, ay), new THREE.Vector2(bx, by), new THREE.Vector2(cx, cy)]
}, generateBottomUV:function(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC) {
  return this.generateTopUV(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC)
}, generateSideWallUV:function(geometry, extrudedShape, wallContour, extrudeOptions, indexA, indexB, indexC, indexD, stepIndex, stepsLength, contourIndex1, contourIndex2) {
  var ax = geometry.vertices[indexA].x, ay = geometry.vertices[indexA].y, az = geometry.vertices[indexA].z, bx = geometry.vertices[indexB].x, by = geometry.vertices[indexB].y, bz = geometry.vertices[indexB].z, cx = geometry.vertices[indexC].x, cy = geometry.vertices[indexC].y, cz = geometry.vertices[indexC].z, dx = geometry.vertices[indexD].x, dy = geometry.vertices[indexD].y, dz = geometry.vertices[indexD].z;
  if(Math.abs(ay - by) < 0.01) {
    return[new THREE.Vector2(ax, 1 - az), new THREE.Vector2(bx, 1 - bz), new THREE.Vector2(cx, 1 - cz), new THREE.Vector2(dx, 1 - dz)]
  }else {
    return[new THREE.Vector2(ay, 1 - az), new THREE.Vector2(by, 1 - bz), new THREE.Vector2(cy, 1 - cz), new THREE.Vector2(dy, 1 - dz)]
  }
}};
THREE.ExtrudeGeometry.__v1 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v2 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v3 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v4 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v5 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v6 = new THREE.Vector2;
THREE.ShapeGeometry = function(shapes, options) {
  THREE.Geometry.call(this);
  if(shapes instanceof Array === false) {
    shapes = [shapes]
  }
  this.shapebb = shapes[shapes.length - 1].getBoundingBox();
  this.addShapeList(shapes, options);
  this.computeCentroids();
  this.computeFaceNormals()
};
THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ShapeGeometry.prototype.addShapeList = function(shapes, options) {
  for(var i = 0, l = shapes.length;i < l;i++) {
    this.addShape(shapes[i], options)
  }
  return this
};
THREE.ShapeGeometry.prototype.addShape = function(shape, options) {
  if(options === undefined) {
    options = {}
  }
  var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
  var material = options.material;
  var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;
  var shapebb = this.shapebb;
  var i, l, hole, s;
  var shapesOffset = this.vertices.length;
  var shapePoints = shape.extractPoints(curveSegments);
  var vertices = shapePoints.shape;
  var holes = shapePoints.holes;
  var reverse = !THREE.Shape.Utils.isClockWise(vertices);
  if(reverse) {
    vertices = vertices.reverse();
    for(i = 0, l = holes.length;i < l;i++) {
      hole = holes[i];
      if(THREE.Shape.Utils.isClockWise(hole)) {
        holes[i] = hole.reverse()
      }
    }
    reverse = false
  }
  var faces = THREE.Shape.Utils.triangulateShape(vertices, holes);
  var contour = vertices;
  for(i = 0, l = holes.length;i < l;i++) {
    hole = holes[i];
    vertices = vertices.concat(hole)
  }
  var vert, vlen = vertices.length;
  var face, flen = faces.length;
  var cont, clen = contour.length;
  for(i = 0;i < vlen;i++) {
    vert = vertices[i];
    this.vertices.push(new THREE.Vector3(vert.x, vert.y, 0))
  }
  for(i = 0;i < flen;i++) {
    face = faces[i];
    var a = face[0] + shapesOffset;
    var b = face[1] + shapesOffset;
    var c = face[2] + shapesOffset;
    this.faces.push(new THREE.Face3(a, b, c, null, null, material));
    this.faceVertexUvs[0].push(uvgen.generateBottomUV(this, shape, options, a, b, c))
  }
};
THREE.LatheGeometry = function(points, segments, phiStart, phiLength) {
  THREE.Geometry.call(this);
  segments = segments || 12;
  phiStart = phiStart || 0;
  phiLength = phiLength || 2 * Math.PI;
  var inversePointLength = 1 / (points.length - 1);
  var inverseSegments = 1 / segments;
  for(var i = 0, il = segments;i <= il;i++) {
    var phi = phiStart + i * inverseSegments * phiLength;
    var c = Math.cos(phi), s = Math.sin(phi);
    for(var j = 0, jl = points.length;j < jl;j++) {
      var pt = points[j];
      var vertex = new THREE.Vector3;
      vertex.x = c * pt.x - s * pt.y;
      vertex.y = s * pt.x + c * pt.y;
      vertex.z = pt.z;
      this.vertices.push(vertex)
    }
  }
  var np = points.length;
  for(var i = 0, il = segments;i < il;i++) {
    for(var j = 0, jl = points.length - 1;j < jl;j++) {
      var base = j + np * i;
      var a = base;
      var b = base + np;
      var c = base + 1 + np;
      var d = base + 1;
      this.faces.push(new THREE.Face4(a, b, c, d));
      var u0 = i * inverseSegments;
      var v0 = j * inversePointLength;
      var u1 = u0 + inverseSegments;
      var v1 = v0 + inversePointLength;
      this.faceVertexUvs[0].push([new THREE.Vector2(u0, v0), new THREE.Vector2(u1, v0), new THREE.Vector2(u1, v1), new THREE.Vector2(u0, v1)])
    }
  }
  this.mergeVertices();
  this.computeCentroids();
  this.computeFaceNormals();
  this.computeVertexNormals()
};
THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.PlaneGeometry = function(width, height, widthSegments, heightSegments) {
  THREE.Geometry.call(this);
  this.width = width;
  this.height = height;
  this.widthSegments = widthSegments || 1;
  this.heightSegments = heightSegments || 1;
  var ix, iz;
  var width_half = width / 2;
  var height_half = height / 2;
  var gridX = this.widthSegments;
  var gridZ = this.heightSegments;
  var gridX1 = gridX + 1;
  var gridZ1 = gridZ + 1;
  var segment_width = this.width / gridX;
  var segment_height = this.height / gridZ;
  var normal = new THREE.Vector3(0, 0, 1);
  for(iz = 0;iz < gridZ1;iz++) {
    for(ix = 0;ix < gridX1;ix++) {
      var x = ix * segment_width - width_half;
      var y = iz * segment_height - height_half;
      this.vertices.push(new THREE.Vector3(x, -y, 0))
    }
  }
  for(iz = 0;iz < gridZ;iz++) {
    for(ix = 0;ix < gridX;ix++) {
      var a = ix + gridX1 * iz;
      var b = ix + gridX1 * (iz + 1);
      var c = ix + 1 + gridX1 * (iz + 1);
      var d = ix + 1 + gridX1 * iz;
      var face = new THREE.Face4(a, b, c, d);
      face.normal.copy(normal);
      face.vertexNormals.push(normal.clone(), normal.clone(), normal.clone(), normal.clone());
      this.faces.push(face);
      this.faceVertexUvs[0].push([new THREE.Vector2(ix / gridX, 1 - iz / gridZ), new THREE.Vector2(ix / gridX, 1 - (iz + 1) / gridZ), new THREE.Vector2((ix + 1) / gridX, 1 - (iz + 1) / gridZ), new THREE.Vector2((ix + 1) / gridX, 1 - iz / gridZ)])
    }
  }
  this.computeCentroids()
};
THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.SphereGeometry = function(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  THREE.Geometry.call(this);
  this.radius = radius || 50;
  this.widthSegments = Math.max(3, Math.floor(widthSegments) || 8);
  this.heightSegments = Math.max(2, Math.floor(heightSegments) || 6);
  phiStart = phiStart !== undefined ? phiStart : 0;
  phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
  var x, y, vertices = [], uvs = [];
  for(y = 0;y <= this.heightSegments;y++) {
    var verticesRow = [];
    var uvsRow = [];
    for(x = 0;x <= this.widthSegments;x++) {
      var u = x / this.widthSegments;
      var v = y / this.heightSegments;
      var vertex = new THREE.Vector3;
      vertex.x = -this.radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
      vertex.y = this.radius * Math.cos(thetaStart + v * thetaLength);
      vertex.z = this.radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
      this.vertices.push(vertex);
      verticesRow.push(this.vertices.length - 1);
      uvsRow.push(new THREE.Vector2(u, 1 - v))
    }
    vertices.push(verticesRow);
    uvs.push(uvsRow)
  }
  for(y = 0;y < this.heightSegments;y++) {
    for(x = 0;x < this.widthSegments;x++) {
      var v1 = vertices[y][x + 1];
      var v2 = vertices[y][x];
      var v3 = vertices[y + 1][x];
      var v4 = vertices[y + 1][x + 1];
      var n1 = this.vertices[v1].clone().normalize();
      var n2 = this.vertices[v2].clone().normalize();
      var n3 = this.vertices[v3].clone().normalize();
      var n4 = this.vertices[v4].clone().normalize();
      var uv1 = uvs[y][x + 1].clone();
      var uv2 = uvs[y][x].clone();
      var uv3 = uvs[y + 1][x].clone();
      var uv4 = uvs[y + 1][x + 1].clone();
      if(Math.abs(this.vertices[v1].y) === this.radius) {
        this.faces.push(new THREE.Face3(v1, v3, v4, [n1, n3, n4]));
        this.faceVertexUvs[0].push([uv1, uv3, uv4])
      }else {
        if(Math.abs(this.vertices[v3].y) === this.radius) {
          this.faces.push(new THREE.Face3(v1, v2, v3, [n1, n2, n3]));
          this.faceVertexUvs[0].push([uv1, uv2, uv3])
        }else {
          this.faces.push(new THREE.Face4(v1, v2, v3, v4, [n1, n2, n3, n4]));
          this.faceVertexUvs[0].push([uv1, uv2, uv3, uv4])
        }
      }
    }
  }
  this.computeCentroids();
  this.computeFaceNormals();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, radius)
};
THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TextGeometry = function(text, parameters) {
  var textShapes = THREE.FontUtils.generateShapes(text, parameters);
  parameters.amount = parameters.height !== undefined ? parameters.height : 50;
  if(parameters.bevelThickness === undefined) {
    parameters.bevelThickness = 10
  }
  if(parameters.bevelSize === undefined) {
    parameters.bevelSize = 8
  }
  if(parameters.bevelEnabled === undefined) {
    parameters.bevelEnabled = false
  }
  THREE.ExtrudeGeometry.call(this, textShapes, parameters)
};
THREE.TextGeometry.prototype = Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TorusGeometry = function(radius, tube, radialSegments, tubularSegments, arc) {
  THREE.Geometry.call(this);
  var scope = this;
  this.radius = radius || 100;
  this.tube = tube || 40;
  this.radialSegments = radialSegments || 8;
  this.tubularSegments = tubularSegments || 6;
  this.arc = arc || Math.PI * 2;
  var center = new THREE.Vector3, uvs = [], normals = [];
  for(var j = 0;j <= this.radialSegments;j++) {
    for(var i = 0;i <= this.tubularSegments;i++) {
      var u = i / this.tubularSegments * this.arc;
      var v = j / this.radialSegments * Math.PI * 2;
      center.x = this.radius * Math.cos(u);
      center.y = this.radius * Math.sin(u);
      var vertex = new THREE.Vector3;
      vertex.x = (this.radius + this.tube * Math.cos(v)) * Math.cos(u);
      vertex.y = (this.radius + this.tube * Math.cos(v)) * Math.sin(u);
      vertex.z = this.tube * Math.sin(v);
      this.vertices.push(vertex);
      uvs.push(new THREE.Vector2(i / this.tubularSegments, j / this.radialSegments));
      normals.push(vertex.clone().sub(center).normalize())
    }
  }
  for(var j = 1;j <= this.radialSegments;j++) {
    for(var i = 1;i <= this.tubularSegments;i++) {
      var a = (this.tubularSegments + 1) * j + i - 1;
      var b = (this.tubularSegments + 1) * (j - 1) + i - 1;
      var c = (this.tubularSegments + 1) * (j - 1) + i;
      var d = (this.tubularSegments + 1) * j + i;
      var face = new THREE.Face4(a, b, c, d, [normals[a], normals[b], normals[c], normals[d]]);
      face.normal.add(normals[a]);
      face.normal.add(normals[b]);
      face.normal.add(normals[c]);
      face.normal.add(normals[d]);
      face.normal.normalize();
      this.faces.push(face);
      this.faceVertexUvs[0].push([uvs[a].clone(), uvs[b].clone(), uvs[c].clone(), uvs[d].clone()])
    }
  }
  this.computeCentroids()
};
THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TorusKnotGeometry = function(radius, tube, radialSegments, tubularSegments, p, q, heightScale) {
  THREE.Geometry.call(this);
  var scope = this;
  this.radius = radius || 100;
  this.tube = tube || 40;
  this.radialSegments = radialSegments || 64;
  this.tubularSegments = tubularSegments || 8;
  this.p = p || 2;
  this.q = q || 3;
  this.heightScale = heightScale || 1;
  this.grid = new Array(this.radialSegments);
  var tang = new THREE.Vector3;
  var n = new THREE.Vector3;
  var bitan = new THREE.Vector3;
  for(var i = 0;i < this.radialSegments;++i) {
    this.grid[i] = new Array(this.tubularSegments);
    for(var j = 0;j < this.tubularSegments;++j) {
      var u = i / this.radialSegments * 2 * this.p * Math.PI;
      var v = j / this.tubularSegments * 2 * Math.PI;
      var p1 = getPos(u, v, this.q, this.p, this.radius, this.heightScale);
      var p2 = getPos(u + 0.01, v, this.q, this.p, this.radius, this.heightScale);
      var cx, cy;
      tang.subVectors(p2, p1);
      n.addVectors(p2, p1);
      bitan.crossVectors(tang, n);
      n.crossVectors(bitan, tang);
      bitan.normalize();
      n.normalize();
      cx = -this.tube * Math.cos(v);
      cy = this.tube * Math.sin(v);
      p1.x += cx * n.x + cy * bitan.x;
      p1.y += cx * n.y + cy * bitan.y;
      p1.z += cx * n.z + cy * bitan.z;
      this.grid[i][j] = vert(p1.x, p1.y, p1.z)
    }
  }
  for(var i = 0;i < this.radialSegments;++i) {
    for(var j = 0;j < this.tubularSegments;++j) {
      var ip = (i + 1) % this.radialSegments;
      var jp = (j + 1) % this.tubularSegments;
      var a = this.grid[i][j];
      var b = this.grid[ip][j];
      var c = this.grid[ip][jp];
      var d = this.grid[i][jp];
      var uva = new THREE.Vector2(i / this.radialSegments, j / this.tubularSegments);
      var uvb = new THREE.Vector2((i + 1) / this.radialSegments, j / this.tubularSegments);
      var uvc = new THREE.Vector2((i + 1) / this.radialSegments, (j + 1) / this.tubularSegments);
      var uvd = new THREE.Vector2(i / this.radialSegments, (j + 1) / this.tubularSegments);
      this.faces.push(new THREE.Face4(a, b, c, d));
      this.faceVertexUvs[0].push([uva, uvb, uvc, uvd])
    }
  }
  this.computeCentroids();
  this.computeFaceNormals();
  this.computeVertexNormals();
  function vert(x, y, z) {
    return scope.vertices.push(new THREE.Vector3(x, y, z)) - 1
  }
  function getPos(u, v, in_q, in_p, radius, heightScale) {
    var cu = Math.cos(u);
    var cv = Math.cos(v);
    var su = Math.sin(u);
    var quOverP = in_q / in_p * u;
    var cs = Math.cos(quOverP);
    var tx = radius * (2 + cs) * 0.5 * cu;
    var ty = radius * (2 + cs) * su * 0.5;
    var tz = heightScale * radius * Math.sin(quOverP) * 0.5;
    return new THREE.Vector3(tx, ty, tz)
  }
};
THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry = function(path, segments, radius, radiusSegments, closed, debug) {
  THREE.Geometry.call(this);
  this.path = path;
  this.segments = segments || 64;
  this.radius = radius || 1;
  this.radiusSegments = radiusSegments || 8;
  this.closed = closed || false;
  if(debug) {
    this.debug = new THREE.Object3D
  }
  this.grid = [];
  var scope = this, tangent, normal, binormal, numpoints = this.segments + 1, x, y, z, tx, ty, tz, u, v, cx, cy, pos, pos2 = new THREE.Vector3, i, j, ip, jp, a, b, c, d, uva, uvb, uvc, uvd;
  var frames = new THREE.TubeGeometry.FrenetFrames(this.path, this.segments, this.closed), tangents = frames.tangents, normals = frames.normals, binormals = frames.binormals;
  this.tangents = tangents;
  this.normals = normals;
  this.binormals = binormals;
  function vert(x, y, z) {
    return scope.vertices.push(new THREE.Vector3(x, y, z)) - 1
  }
  for(i = 0;i < numpoints;i++) {
    this.grid[i] = [];
    u = i / (numpoints - 1);
    pos = path.getPointAt(u);
    tangent = tangents[i];
    normal = normals[i];
    binormal = binormals[i];
    if(this.debug) {
      this.debug.add(new THREE.ArrowHelper(tangent, pos, radius, 255));
      this.debug.add(new THREE.ArrowHelper(normal, pos, radius, 16711680));
      this.debug.add(new THREE.ArrowHelper(binormal, pos, radius, 65280))
    }
    for(j = 0;j < this.radiusSegments;j++) {
      v = j / this.radiusSegments * 2 * Math.PI;
      cx = -this.radius * Math.cos(v);
      cy = this.radius * Math.sin(v);
      pos2.copy(pos);
      pos2.x += cx * normal.x + cy * binormal.x;
      pos2.y += cx * normal.y + cy * binormal.y;
      pos2.z += cx * normal.z + cy * binormal.z;
      this.grid[i][j] = vert(pos2.x, pos2.y, pos2.z)
    }
  }
  for(i = 0;i < this.segments;i++) {
    for(j = 0;j < this.radiusSegments;j++) {
      ip = this.closed ? (i + 1) % this.segments : i + 1;
      jp = (j + 1) % this.radiusSegments;
      a = this.grid[i][j];
      b = this.grid[ip][j];
      c = this.grid[ip][jp];
      d = this.grid[i][jp];
      uva = new THREE.Vector2(i / this.segments, j / this.radiusSegments);
      uvb = new THREE.Vector2((i + 1) / this.segments, j / this.radiusSegments);
      uvc = new THREE.Vector2((i + 1) / this.segments, (j + 1) / this.radiusSegments);
      uvd = new THREE.Vector2(i / this.segments, (j + 1) / this.radiusSegments);
      this.faces.push(new THREE.Face4(a, b, c, d));
      this.faceVertexUvs[0].push([uva, uvb, uvc, uvd])
    }
  }
  this.computeCentroids();
  this.computeFaceNormals();
  this.computeVertexNormals()
};
THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {
  var tangent = new THREE.Vector3, normal = new THREE.Vector3, binormal = new THREE.Vector3, tangents = [], normals = [], binormals = [], vec = new THREE.Vector3, mat = new THREE.Matrix4, numpoints = segments + 1, theta, epsilon = 1E-4, smallest, tx, ty, tz, i, u, v;
  this.tangents = tangents;
  this.normals = normals;
  this.binormals = binormals;
  for(i = 0;i < numpoints;i++) {
    u = i / (numpoints - 1);
    tangents[i] = path.getTangentAt(u);
    tangents[i].normalize()
  }
  initialNormal3();
  function initialNormal1(lastBinormal) {
    normals[0] = new THREE.Vector3;
    binormals[0] = new THREE.Vector3;
    if(lastBinormal === undefined) {
      lastBinormal = new THREE.Vector3(0, 0, 1)
    }
    normals[0].crossVectors(lastBinormal, tangents[0]).normalize();
    binormals[0].crossVectors(tangents[0], normals[0]).normalize()
  }
  function initialNormal2() {
    var t2 = path.getTangentAt(epsilon);
    normals[0] = (new THREE.Vector3).subVectors(t2, tangents[0]).normalize();
    binormals[0] = (new THREE.Vector3).crossVectors(tangents[0], normals[0]);
    normals[0].crossVectors(binormals[0], tangents[0]).normalize();
    binormals[0].crossVectors(tangents[0], normals[0]).normalize()
  }
  function initialNormal3() {
    normals[0] = new THREE.Vector3;
    binormals[0] = new THREE.Vector3;
    smallest = Number.MAX_VALUE;
    tx = Math.abs(tangents[0].x);
    ty = Math.abs(tangents[0].y);
    tz = Math.abs(tangents[0].z);
    if(tx <= smallest) {
      smallest = tx;
      normal.set(1, 0, 0)
    }
    if(ty <= smallest) {
      smallest = ty;
      normal.set(0, 1, 0)
    }
    if(tz <= smallest) {
      normal.set(0, 0, 1)
    }
    vec.crossVectors(tangents[0], normal).normalize();
    normals[0].crossVectors(tangents[0], vec);
    binormals[0].crossVectors(tangents[0], normals[0])
  }
  for(i = 1;i < numpoints;i++) {
    normals[i] = normals[i - 1].clone();
    binormals[i] = binormals[i - 1].clone();
    vec.crossVectors(tangents[i - 1], tangents[i]);
    if(vec.length() > epsilon) {
      vec.normalize();
      theta = Math.acos(tangents[i - 1].dot(tangents[i]));
      normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta))
    }
    binormals[i].crossVectors(tangents[i], normals[i])
  }
  if(closed) {
    theta = Math.acos(normals[0].dot(normals[numpoints - 1]));
    theta /= numpoints - 1;
    if(tangents[0].dot(vec.crossVectors(normals[0], normals[numpoints - 1])) > 0) {
      theta = -theta
    }
    for(i = 1;i < numpoints;i++) {
      normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
      binormals[i].crossVectors(tangents[i], normals[i])
    }
  }
};
THREE.PolyhedronGeometry = function(vertices, faces, radius, detail) {
  THREE.Geometry.call(this);
  radius = radius || 1;
  detail = detail || 0;
  var that = this;
  for(var i = 0, l = vertices.length;i < l;i++) {
    prepare(new THREE.Vector3(vertices[i][0], vertices[i][1], vertices[i][2]))
  }
  var midpoints = [], p = this.vertices;
  for(var i = 0, l = faces.length;i < l;i++) {
    make(p[faces[i][0]], p[faces[i][1]], p[faces[i][2]], detail)
  }
  this.mergeVertices();
  for(var i = 0, l = this.vertices.length;i < l;i++) {
    this.vertices[i].multiplyScalar(radius)
  }
  function prepare(vector) {
    var vertex = vector.normalize().clone();
    vertex.index = that.vertices.push(vertex) - 1;
    var u = azimuth(vector) / 2 / Math.PI + 0.5;
    var v = inclination(vector) / Math.PI + 0.5;
    vertex.uv = new THREE.Vector2(u, 1 - v);
    return vertex
  }
  function make(v1, v2, v3, detail) {
    if(detail < 1) {
      var face = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);
      face.centroid.add(v1).add(v2).add(v3).divideScalar(3);
      face.normal = face.centroid.clone().normalize();
      that.faces.push(face);
      var azi = azimuth(face.centroid);
      that.faceVertexUvs[0].push([correctUV(v1.uv, v1, azi), correctUV(v2.uv, v2, azi), correctUV(v3.uv, v3, azi)])
    }else {
      detail -= 1;
      make(v1, midpoint(v1, v2), midpoint(v1, v3), detail);
      make(midpoint(v1, v2), v2, midpoint(v2, v3), detail);
      make(midpoint(v1, v3), midpoint(v2, v3), v3, detail);
      make(midpoint(v1, v2), midpoint(v2, v3), midpoint(v1, v3), detail)
    }
  }
  function midpoint(v1, v2) {
    if(!midpoints[v1.index]) {
      midpoints[v1.index] = []
    }
    if(!midpoints[v2.index]) {
      midpoints[v2.index] = []
    }
    var mid = midpoints[v1.index][v2.index];
    if(mid === undefined) {
      midpoints[v1.index][v2.index] = midpoints[v2.index][v1.index] = mid = prepare((new THREE.Vector3).addVectors(v1, v2).divideScalar(2))
    }
    return mid
  }
  function azimuth(vector) {
    return Math.atan2(vector.z, -vector.x)
  }
  function inclination(vector) {
    return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z))
  }
  function correctUV(uv, vector, azimuth) {
    if(azimuth < 0 && uv.x === 1) {
      uv = new THREE.Vector2(uv.x - 1, uv.y)
    }
    if(vector.x === 0 && vector.z === 0) {
      uv = new THREE.Vector2(azimuth / 2 / Math.PI + 0.5, uv.y)
    }
    return uv
  }
  this.computeCentroids();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, radius)
};
THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry = function(radius, detail) {
  var t = (1 + Math.sqrt(5)) / 2;
  var vertices = [[-1, t, 0], [1, t, 0], [-1, -t, 0], [1, -t, 0], [0, -1, t], [0, 1, t], [0, -1, -t], [0, 1, -t], [t, 0, -1], [t, 0, 1], [-t, 0, -1], [-t, 0, 1]];
  var faces = [[0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11], [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8], [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9], [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]];
  THREE.PolyhedronGeometry.call(this, vertices, faces, radius, detail)
};
THREE.IcosahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.OctahedronGeometry = function(radius, detail) {
  var vertices = [[1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, -1, 0], [0, 0, 1], [0, 0, -1]];
  var faces = [[0, 2, 4], [0, 4, 3], [0, 3, 5], [0, 5, 2], [1, 2, 5], [1, 5, 3], [1, 3, 4], [1, 4, 2]];
  THREE.PolyhedronGeometry.call(this, vertices, faces, radius, detail)
};
THREE.OctahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TetrahedronGeometry = function(radius, detail) {
  var vertices = [[1, 1, 1], [-1, -1, 1], [-1, 1, -1], [1, -1, -1]];
  var faces = [[2, 1, 0], [0, 3, 2], [1, 3, 0], [2, 3, 1]];
  THREE.PolyhedronGeometry.call(this, vertices, faces, radius, detail)
};
THREE.TetrahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ParametricGeometry = function(func, slices, stacks, useTris) {
  THREE.Geometry.call(this);
  var verts = this.vertices;
  var faces = this.faces;
  var uvs = this.faceVertexUvs[0];
  useTris = useTris === undefined ? false : useTris;
  var i, il, j, p;
  var u, v;
  var stackCount = stacks + 1;
  var sliceCount = slices + 1;
  for(i = 0;i <= stacks;i++) {
    v = i / stacks;
    for(j = 0;j <= slices;j++) {
      u = j / slices;
      p = func(u, v);
      verts.push(p)
    }
  }
  var a, b, c, d;
  var uva, uvb, uvc, uvd;
  for(i = 0;i < stacks;i++) {
    for(j = 0;j < slices;j++) {
      a = i * sliceCount + j;
      b = i * sliceCount + j + 1;
      c = (i + 1) * sliceCount + j;
      d = (i + 1) * sliceCount + j + 1;
      uva = new THREE.Vector2(j / slices, i / stacks);
      uvb = new THREE.Vector2((j + 1) / slices, i / stacks);
      uvc = new THREE.Vector2(j / slices, (i + 1) / stacks);
      uvd = new THREE.Vector2((j + 1) / slices, (i + 1) / stacks);
      if(useTris) {
        faces.push(new THREE.Face3(a, b, c));
        faces.push(new THREE.Face3(b, d, c));
        uvs.push([uva, uvb, uvc]);
        uvs.push([uvb, uvd, uvc])
      }else {
        faces.push(new THREE.Face4(a, b, d, c));
        uvs.push([uva, uvb, uvd, uvc])
      }
    }
  }
  this.computeCentroids();
  this.computeFaceNormals();
  this.computeVertexNormals()
};
THREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ConvexGeometry = function(vertices) {
  THREE.Geometry.call(this);
  var faces = [[0, 1, 2], [0, 2, 1]];
  for(var i = 3;i < vertices.length;i++) {
    addPoint(i)
  }
  function addPoint(vertexId) {
    var vertex = vertices[vertexId].clone();
    var mag = vertex.length();
    vertex.x += mag * randomOffset();
    vertex.y += mag * randomOffset();
    vertex.z += mag * randomOffset();
    var hole = [];
    for(var f = 0;f < faces.length;) {
      var face = faces[f];
      if(visible(face, vertex)) {
        for(var e = 0;e < 3;e++) {
          var edge = [face[e], face[(e + 1) % 3]];
          var boundary = true;
          for(var h = 0;h < hole.length;h++) {
            if(equalEdge(hole[h], edge)) {
              hole[h] = hole[hole.length - 1];
              hole.pop();
              boundary = false;
              break
            }
          }
          if(boundary) {
            hole.push(edge)
          }
        }
        faces[f] = faces[faces.length - 1];
        faces.pop()
      }else {
        f++
      }
    }
    for(var h = 0;h < hole.length;h++) {
      faces.push([hole[h][0], hole[h][1], vertexId])
    }
  }
  function visible(face, vertex) {
    var va = vertices[face[0]];
    var vb = vertices[face[1]];
    var vc = vertices[face[2]];
    var n = normal(va, vb, vc);
    var dist = n.dot(va);
    return n.dot(vertex) >= dist
  }
  function normal(va, vb, vc) {
    var cb = new THREE.Vector3;
    var ab = new THREE.Vector3;
    cb.subVectors(vc, vb);
    ab.subVectors(va, vb);
    cb.cross(ab);
    cb.normalize();
    return cb
  }
  function equalEdge(ea, eb) {
    return ea[0] === eb[1] && ea[1] === eb[0]
  }
  function randomOffset() {
    return(Math.random() - 0.5) * 2 * 1E-6
  }
  function vertexUv(vertex) {
    var mag = vertex.length();
    return new THREE.Vector2(vertex.x / mag, vertex.y / mag)
  }
  var id = 0;
  var newId = new Array(vertices.length);
  for(var i = 0;i < faces.length;i++) {
    var face = faces[i];
    for(var j = 0;j < 3;j++) {
      if(newId[face[j]] === undefined) {
        newId[face[j]] = id++;
        this.vertices.push(vertices[face[j]])
      }
      face[j] = newId[face[j]]
    }
  }
  for(var i = 0;i < faces.length;i++) {
    this.faces.push(new THREE.Face3(faces[i][0], faces[i][1], faces[i][2]))
  }
  for(var i = 0;i < this.faces.length;i++) {
    var face = this.faces[i];
    this.faceVertexUvs[0].push([vertexUv(this.vertices[face.a]), vertexUv(this.vertices[face.b]), vertexUv(this.vertices[face.c])])
  }
  this.computeCentroids();
  this.computeFaceNormals();
  this.computeVertexNormals()
};
THREE.ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.AxisHelper = function(size) {
  var geometry = new THREE.Geometry;
  geometry.vertices.push(new THREE.Vector3, new THREE.Vector3(size || 1, 0, 0), new THREE.Vector3, new THREE.Vector3(0, size || 1, 0), new THREE.Vector3, new THREE.Vector3(0, 0, size || 1));
  geometry.colors.push(new THREE.Color(16711680), new THREE.Color(16755200), new THREE.Color(65280), new THREE.Color(11206400), new THREE.Color(255), new THREE.Color(43775));
  var material = new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});
  THREE.Line.call(this, geometry, material, THREE.LinePieces)
};
THREE.AxisHelper.prototype = Object.create(THREE.Line.prototype);
THREE.ArrowHelper = function(dir, origin, length, hex) {
  THREE.Object3D.call(this);
  if(length === undefined) {
    length = 20
  }
  if(hex === undefined) {
    hex = 16776960
  }
  var lineGeometry = new THREE.Geometry;
  lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0));
  lineGeometry.vertices.push(new THREE.Vector3(0, 1, 0));
  this.line = new THREE.Line(lineGeometry, new THREE.LineBasicMaterial({color:hex}));
  this.add(this.line);
  var coneGeometry = new THREE.CylinderGeometry(0, 0.05, 0.25, 5, 1);
  this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color:hex}));
  this.cone.position.set(0, 1, 0);
  this.add(this.cone);
  if(origin instanceof THREE.Vector3) {
    this.position = origin
  }
  this.setDirection(dir);
  this.setLength(length)
};
THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.ArrowHelper.prototype.setDirection = function(dir) {
  var d = THREE.ArrowHelper.__v1.copy(dir).normalize();
  if(d.y > 0.999) {
    this.rotation.set(0, 0, 0)
  }else {
    if(d.y < -0.999) {
      this.rotation.set(Math.PI, 0, 0)
    }else {
      var axis = THREE.ArrowHelper.__v2.set(d.z, 0, -d.x).normalize();
      var radians = Math.acos(d.y);
      var quaternion = THREE.ArrowHelper.__q1.setFromAxisAngle(axis, radians);
      this.rotation.setEulerFromQuaternion(quaternion, this.eulerOrder)
    }
  }
};
THREE.ArrowHelper.prototype.setLength = function(length) {
  this.scale.set(length, length, length)
};
THREE.ArrowHelper.prototype.setColor = function(hex) {
  this.line.material.color.setHex(hex);
  this.cone.material.color.setHex(hex)
};
THREE.ArrowHelper.__v1 = new THREE.Vector3;
THREE.ArrowHelper.__v2 = new THREE.Vector3;
THREE.ArrowHelper.__q1 = new THREE.Quaternion;
THREE.CameraHelper = function(camera) {
  THREE.Line.call(this);
  var scope = this;
  this.geometry = new THREE.Geometry;
  this.material = new THREE.LineBasicMaterial({color:16777215, vertexColors:THREE.FaceColors});
  this.type = THREE.LinePieces;
  this.matrixWorld = camera.matrixWorld;
  this.matrixAutoUpdate = false;
  this.pointMap = {};
  var hexFrustum = 16755200;
  var hexCone = 16711680;
  var hexUp = 43775;
  var hexTarget = 16777215;
  var hexCross = 3355443;
  addLine("n1", "n2", hexFrustum);
  addLine("n2", "n4", hexFrustum);
  addLine("n4", "n3", hexFrustum);
  addLine("n3", "n1", hexFrustum);
  addLine("f1", "f2", hexFrustum);
  addLine("f2", "f4", hexFrustum);
  addLine("f4", "f3", hexFrustum);
  addLine("f3", "f1", hexFrustum);
  addLine("n1", "f1", hexFrustum);
  addLine("n2", "f2", hexFrustum);
  addLine("n3", "f3", hexFrustum);
  addLine("n4", "f4", hexFrustum);
  addLine("p", "n1", hexCone);
  addLine("p", "n2", hexCone);
  addLine("p", "n3", hexCone);
  addLine("p", "n4", hexCone);
  addLine("u1", "u2", hexUp);
  addLine("u2", "u3", hexUp);
  addLine("u3", "u1", hexUp);
  addLine("c", "t", hexTarget);
  addLine("p", "c", hexCross);
  addLine("cn1", "cn2", hexCross);
  addLine("cn3", "cn4", hexCross);
  addLine("cf1", "cf2", hexCross);
  addLine("cf3", "cf4", hexCross);
  this.camera = camera;
  function addLine(a, b, hex) {
    addPoint(a, hex);
    addPoint(b, hex)
  }
  function addPoint(id, hex) {
    scope.geometry.vertices.push(new THREE.Vector3);
    scope.geometry.colors.push(new THREE.Color(hex));
    if(scope.pointMap[id] === undefined) {
      scope.pointMap[id] = []
    }
    scope.pointMap[id].push(scope.geometry.vertices.length - 1)
  }
  this.update(camera)
};
THREE.CameraHelper.prototype = Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update = function() {
  var scope = this;
  var w = 1, h = 1;
  THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);
  setPoint("c", 0, 0, -1);
  setPoint("t", 0, 0, 1);
  setPoint("n1", -w, -h, -1);
  setPoint("n2", w, -h, -1);
  setPoint("n3", -w, h, -1);
  setPoint("n4", w, h, -1);
  setPoint("f1", -w, -h, 1);
  setPoint("f2", w, -h, 1);
  setPoint("f3", -w, h, 1);
  setPoint("f4", w, h, 1);
  setPoint("u1", w * 0.7, h * 1.1, -1);
  setPoint("u2", -w * 0.7, h * 1.1, -1);
  setPoint("u3", 0, h * 2, -1);
  setPoint("cf1", -w, 0, 1);
  setPoint("cf2", w, 0, 1);
  setPoint("cf3", 0, -h, 1);
  setPoint("cf4", 0, h, 1);
  setPoint("cn1", -w, 0, -1);
  setPoint("cn2", w, 0, -1);
  setPoint("cn3", 0, -h, -1);
  setPoint("cn4", 0, h, -1);
  function setPoint(point, x, y, z) {
    THREE.CameraHelper.__v.set(x, y, z);
    THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v, THREE.CameraHelper.__c);
    var points = scope.pointMap[point];
    if(points !== undefined) {
      for(var i = 0, il = points.length;i < il;i++) {
        scope.geometry.vertices[points[i]].copy(THREE.CameraHelper.__v)
      }
    }
  }
  this.geometry.verticesNeedUpdate = true
};
THREE.CameraHelper.__projector = new THREE.Projector;
THREE.CameraHelper.__v = new THREE.Vector3;
THREE.CameraHelper.__c = new THREE.Camera;
THREE.DirectionalLightHelper = function(light, sphereSize) {
  THREE.Object3D.call(this);
  this.light = light;
  this.position = light.position;
  this.direction = new THREE.Vector3;
  this.direction.subVectors(light.target.position, light.position);
  var intensity = THREE.Math.clamp(light.intensity, 0, 1);
  this.color = light.color.clone();
  this.color.multiplyScalar(intensity);
  var hexColor = this.color.getHex();
  var bulbGeometry = new THREE.SphereGeometry(sphereSize, 16, 8);
  var raysGeometry = new THREE.AsteriskGeometry(sphereSize * 1.25, sphereSize * 2.25);
  var bulbMaterial = new THREE.MeshBasicMaterial({color:hexColor, fog:false});
  var raysMaterial = new THREE.LineBasicMaterial({color:hexColor, fog:false});
  this.lightSphere = new THREE.Mesh(bulbGeometry, bulbMaterial);
  this.lightRays = new THREE.Line(raysGeometry, raysMaterial, THREE.LinePieces);
  this.add(this.lightSphere);
  this.add(this.lightRays);
  this.lightSphere.properties.isGizmo = true;
  this.lightSphere.properties.gizmoSubject = light;
  this.lightSphere.properties.gizmoRoot = this;
  this.targetSphere = null;
  if(light.target.properties.targetInverse !== undefined) {
    var targetGeo = new THREE.SphereGeometry(sphereSize, 8, 4);
    var targetMaterial = new THREE.MeshBasicMaterial({color:hexColor, wireframe:true, fog:false});
    this.targetSphere = new THREE.Mesh(targetGeo, targetMaterial);
    this.targetSphere.position = light.target.position;
    this.targetSphere.properties.isGizmo = true;
    this.targetSphere.properties.gizmoSubject = light.target;
    this.targetSphere.properties.gizmoRoot = this.targetSphere;
    var lineMaterial = new THREE.LineDashedMaterial({color:hexColor, dashSize:4, gapSize:4, opacity:0.75, transparent:true, fog:false});
    var lineGeometry = new THREE.Geometry;
    lineGeometry.vertices.push(this.position.clone());
    lineGeometry.vertices.push(this.targetSphere.position.clone());
    lineGeometry.computeLineDistances();
    this.targetLine = new THREE.Line(lineGeometry, lineMaterial);
    this.targetLine.properties.isGizmo = true
  }
  this.properties.isGizmo = true
};
THREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update = function() {
  this.direction.subVectors(this.light.target.position, this.light.position);
  var intensity = THREE.Math.clamp(this.light.intensity, 0, 1);
  this.color.copy(this.light.color);
  this.color.multiplyScalar(intensity);
  this.lightSphere.material.color.copy(this.color);
  this.lightRays.material.color.copy(this.color);
  if(this.targetSphere !== null) {
    this.targetSphere.material.color.copy(this.color);
    this.targetLine.material.color.copy(this.color);
    this.targetLine.geometry.vertices[0].copy(this.light.position);
    this.targetLine.geometry.vertices[1].copy(this.light.target.position);
    this.targetLine.geometry.computeLineDistances();
    this.targetLine.geometry.verticesNeedUpdate = true
  }
};
THREE.HemisphereLightHelper = function(light, sphereSize, arrowLength, domeSize) {
  THREE.Object3D.call(this);
  this.light = light;
  this.position = light.position;
  var intensity = THREE.Math.clamp(light.intensity, 0, 1);
  this.color = light.color.clone();
  this.color.multiplyScalar(intensity);
  var hexColor = this.color.getHex();
  this.groundColor = light.groundColor.clone();
  this.groundColor.multiplyScalar(intensity);
  var hexColorGround = this.groundColor.getHex();
  var bulbGeometry = new THREE.SphereGeometry(sphereSize, 16, 8, 0, Math.PI * 2, 0, Math.PI * 0.5);
  var bulbGroundGeometry = new THREE.SphereGeometry(sphereSize, 16, 8, 0, Math.PI * 2, Math.PI * 0.5, Math.PI);
  var bulbSkyMaterial = new THREE.MeshBasicMaterial({color:hexColor, fog:false});
  var bulbGroundMaterial = new THREE.MeshBasicMaterial({color:hexColorGround, fog:false});
  for(var i = 0, il = bulbGeometry.faces.length;i < il;i++) {
    bulbGeometry.faces[i].materialIndex = 0
  }
  for(var i = 0, il = bulbGroundGeometry.faces.length;i < il;i++) {
    bulbGroundGeometry.faces[i].materialIndex = 1
  }
  THREE.GeometryUtils.merge(bulbGeometry, bulbGroundGeometry);
  this.lightSphere = new THREE.Mesh(bulbGeometry, new THREE.MeshFaceMaterial([bulbSkyMaterial, bulbGroundMaterial]));
  this.lightArrow = new THREE.ArrowHelper(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, (sphereSize + arrowLength) * 1.1, 0), arrowLength, hexColor);
  this.lightArrow.rotation.x = Math.PI;
  this.lightArrowGround = new THREE.ArrowHelper(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, (sphereSize + arrowLength) * -1.1, 0), arrowLength, hexColorGround);
  var joint = new THREE.Object3D;
  joint.rotation.x = -Math.PI * 0.5;
  joint.add(this.lightSphere);
  joint.add(this.lightArrow);
  joint.add(this.lightArrowGround);
  this.add(joint);
  this.lightSphere.properties.isGizmo = true;
  this.lightSphere.properties.gizmoSubject = light;
  this.lightSphere.properties.gizmoRoot = this;
  this.properties.isGizmo = true;
  this.target = new THREE.Vector3;
  this.lookAt(this.target)
};
THREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.update = function() {
  var intensity = THREE.Math.clamp(this.light.intensity, 0, 1);
  this.color.copy(this.light.color);
  this.color.multiplyScalar(intensity);
  this.groundColor.copy(this.light.groundColor);
  this.groundColor.multiplyScalar(intensity);
  this.lightSphere.material.materials[0].color.copy(this.color);
  this.lightSphere.material.materials[1].color.copy(this.groundColor);
  this.lightArrow.setColor(this.color.getHex());
  this.lightArrowGround.setColor(this.groundColor.getHex());
  this.lookAt(this.target)
};
THREE.PointLightHelper = function(light, sphereSize) {
  THREE.Object3D.call(this);
  this.light = light;
  this.position = light.position;
  var intensity = THREE.Math.clamp(light.intensity, 0, 1);
  this.color = light.color.clone();
  this.color.multiplyScalar(intensity);
  var hexColor = this.color.getHex();
  var bulbGeometry = new THREE.SphereGeometry(sphereSize, 16, 8);
  var raysGeometry = new THREE.AsteriskGeometry(sphereSize * 1.25, sphereSize * 2.25);
  var distanceGeometry = new THREE.IcosahedronGeometry(1, 2);
  var bulbMaterial = new THREE.MeshBasicMaterial({color:hexColor, fog:false});
  var raysMaterial = new THREE.LineBasicMaterial({color:hexColor, fog:false});
  var distanceMaterial = new THREE.MeshBasicMaterial({color:hexColor, fog:false, wireframe:true, opacity:0.1, transparent:true});
  this.lightSphere = new THREE.Mesh(bulbGeometry, bulbMaterial);
  this.lightRays = new THREE.Line(raysGeometry, raysMaterial, THREE.LinePieces);
  this.lightDistance = new THREE.Mesh(distanceGeometry, distanceMaterial);
  var d = light.distance;
  if(d === 0) {
    this.lightDistance.visible = false
  }else {
    this.lightDistance.scale.set(d, d, d)
  }
  this.add(this.lightSphere);
  this.add(this.lightRays);
  this.add(this.lightDistance);
  this.lightSphere.properties.isGizmo = true;
  this.lightSphere.properties.gizmoSubject = light;
  this.lightSphere.properties.gizmoRoot = this;
  this.properties.isGizmo = true
};
THREE.PointLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.PointLightHelper.prototype.update = function() {
  var intensity = THREE.Math.clamp(this.light.intensity, 0, 1);
  this.color.copy(this.light.color);
  this.color.multiplyScalar(intensity);
  this.lightSphere.material.color.copy(this.color);
  this.lightRays.material.color.copy(this.color);
  this.lightDistance.material.color.copy(this.color);
  var d = this.light.distance;
  if(d === 0) {
    this.lightDistance.visible = false
  }else {
    this.lightDistance.visible = true;
    this.lightDistance.scale.set(d, d, d)
  }
};
THREE.SpotLightHelper = function(light, sphereSize) {
  THREE.Object3D.call(this);
  this.light = light;
  this.position = light.position;
  this.direction = new THREE.Vector3;
  this.direction.subVectors(light.target.position, light.position);
  var intensity = THREE.Math.clamp(light.intensity, 0, 1);
  this.color = light.color.clone();
  this.color.multiplyScalar(intensity);
  var hexColor = this.color.getHex();
  var bulbGeometry = new THREE.SphereGeometry(sphereSize, 16, 8);
  var raysGeometry = new THREE.AsteriskGeometry(sphereSize * 1.25, sphereSize * 2.25);
  var coneGeometry = new THREE.CylinderGeometry(1E-4, 1, 1, 8, 1, true);
  var coneMatrix = new THREE.Matrix4;
  coneMatrix.rotateX(-Math.PI / 2);
  coneMatrix.translate(new THREE.Vector3(0, -0.5, 0));
  coneGeometry.applyMatrix(coneMatrix);
  var bulbMaterial = new THREE.MeshBasicMaterial({color:hexColor, fog:false});
  var raysMaterial = new THREE.LineBasicMaterial({color:hexColor, fog:false});
  var coneMaterial = new THREE.MeshBasicMaterial({color:hexColor, fog:false, wireframe:true, opacity:0.3, transparent:true});
  this.lightSphere = new THREE.Mesh(bulbGeometry, bulbMaterial);
  this.lightCone = new THREE.Mesh(coneGeometry, coneMaterial);
  var coneLength = light.distance ? light.distance : 1E4;
  var coneWidth = coneLength * Math.tan(light.angle * 0.5) * 2;
  this.lightCone.scale.set(coneWidth, coneWidth, coneLength);
  this.lightRays = new THREE.Line(raysGeometry, raysMaterial, THREE.LinePieces);
  this.gyroscope = new THREE.Gyroscope;
  this.gyroscope.add(this.lightSphere);
  this.gyroscope.add(this.lightRays);
  this.add(this.gyroscope);
  this.add(this.lightCone);
  this.lookAt(light.target.position);
  this.lightSphere.properties.isGizmo = true;
  this.lightSphere.properties.gizmoSubject = light;
  this.lightSphere.properties.gizmoRoot = this;
  this.targetSphere = null;
  if(light.target.properties.targetInverse !== undefined) {
    var targetGeo = new THREE.SphereGeometry(sphereSize, 8, 4);
    var targetMaterial = new THREE.MeshBasicMaterial({color:hexColor, wireframe:true, fog:false});
    this.targetSphere = new THREE.Mesh(targetGeo, targetMaterial);
    this.targetSphere.position = light.target.position;
    this.targetSphere.properties.isGizmo = true;
    this.targetSphere.properties.gizmoSubject = light.target;
    this.targetSphere.properties.gizmoRoot = this.targetSphere;
    var lineMaterial = new THREE.LineDashedMaterial({color:hexColor, dashSize:4, gapSize:4, opacity:0.75, transparent:true, fog:false});
    var lineGeometry = new THREE.Geometry;
    lineGeometry.vertices.push(this.position.clone());
    lineGeometry.vertices.push(this.targetSphere.position.clone());
    lineGeometry.computeLineDistances();
    this.targetLine = new THREE.Line(lineGeometry, lineMaterial);
    this.targetLine.properties.isGizmo = true
  }
  this.properties.isGizmo = true
};
THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update = function() {
  this.direction.subVectors(this.light.target.position, this.light.position);
  this.lookAt(this.light.target.position);
  var coneLength = this.light.distance ? this.light.distance : 1E4;
  var coneWidth = coneLength * Math.tan(this.light.angle * 0.5) * 2;
  this.lightCone.scale.set(coneWidth, coneWidth, coneLength);
  var intensity = THREE.Math.clamp(this.light.intensity, 0, 1);
  this.color.copy(this.light.color);
  this.color.multiplyScalar(intensity);
  this.lightSphere.material.color.copy(this.color);
  this.lightRays.material.color.copy(this.color);
  this.lightCone.material.color.copy(this.color);
  if(this.targetSphere !== null) {
    this.targetSphere.material.color.copy(this.color);
    this.targetLine.material.color.copy(this.color);
    this.targetLine.geometry.vertices[0].copy(this.light.position);
    this.targetLine.geometry.vertices[1].copy(this.light.target.position);
    this.targetLine.geometry.computeLineDistances();
    this.targetLine.geometry.verticesNeedUpdate = true
  }
};
THREE.ImmediateRenderObject = function() {
  THREE.Object3D.call(this);
  this.render = function(renderCallback) {
  }
};
THREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);
THREE.LensFlare = function(texture, size, distance, blending, color) {
  THREE.Object3D.call(this);
  this.lensFlares = [];
  this.positionScreen = new THREE.Vector3;
  this.customUpdateCallback = undefined;
  if(texture !== undefined) {
    this.add(texture, size, distance, blending, color)
  }
};
THREE.LensFlare.prototype = Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add = function(texture, size, distance, blending, color, opacity) {
  if(size === undefined) {
    size = -1
  }
  if(distance === undefined) {
    distance = 0
  }
  if(opacity === undefined) {
    opacity = 1
  }
  if(color === undefined) {
    color = new THREE.Color(16777215)
  }
  if(blending === undefined) {
    blending = THREE.NormalBlending
  }
  distance = Math.min(distance, Math.max(0, distance));
  this.lensFlares.push({texture:texture, size:size, distance:distance, x:0, y:0, z:0, scale:1, rotation:1, opacity:opacity, color:color, blending:blending})
};
THREE.LensFlare.prototype.updateLensFlares = function() {
  var f, fl = this.lensFlares.length;
  var flare;
  var vecX = -this.positionScreen.x * 2;
  var vecY = -this.positionScreen.y * 2;
  for(f = 0;f < fl;f++) {
    flare = this.lensFlares[f];
    flare.x = this.positionScreen.x + vecX * flare.distance;
    flare.y = this.positionScreen.y + vecY * flare.distance;
    flare.wantedRotation = flare.x * Math.PI * 0.25;
    flare.rotation += (flare.wantedRotation - flare.rotation) * 0.25
  }
};
THREE.MorphBlendMesh = function(geometry, material) {
  THREE.Mesh.call(this, geometry, material);
  this.animationsMap = {};
  this.animationsList = [];
  var numFrames = this.geometry.morphTargets.length;
  var name = "__default";
  var startFrame = 0;
  var endFrame = numFrames - 1;
  var fps = numFrames / 1;
  this.createAnimation(name, startFrame, endFrame, fps);
  this.setAnimationWeight(name, 1)
};
THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.createAnimation = function(name, start, end, fps) {
  var animation = {startFrame:start, endFrame:end, length:end - start + 1, fps:fps, duration:(end - start) / fps, lastFrame:0, currentFrame:0, active:false, time:0, direction:1, weight:1, directionBackwards:false, mirroredLoop:false};
  this.animationsMap[name] = animation;
  this.animationsList.push(animation)
};
THREE.MorphBlendMesh.prototype.autoCreateAnimations = function(fps) {
  var pattern = /([a-z]+)(\d+)/;
  var firstAnimation, frameRanges = {};
  var geometry = this.geometry;
  for(var i = 0, il = geometry.morphTargets.length;i < il;i++) {
    var morph = geometry.morphTargets[i];
    var chunks = morph.name.match(pattern);
    if(chunks && chunks.length > 1) {
      var name = chunks[1];
      var num = chunks[2];
      if(!frameRanges[name]) {
        frameRanges[name] = {start:Infinity, end:-Infinity}
      }
      var range = frameRanges[name];
      if(i < range.start) {
        range.start = i
      }
      if(i > range.end) {
        range.end = i
      }
      if(!firstAnimation) {
        firstAnimation = name
      }
    }
  }
  for(var name in frameRanges) {
    var range = frameRanges[name];
    this.createAnimation(name, range.start, range.end, fps)
  }
  this.firstAnimation = firstAnimation
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function(name) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.direction = 1;
    animation.directionBackwards = false
  }
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function(name) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.direction = -1;
    animation.directionBackwards = true
  }
};
THREE.MorphBlendMesh.prototype.setAnimationFPS = function(name, fps) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.fps = fps;
    animation.duration = (animation.end - animation.start) / animation.fps
  }
};
THREE.MorphBlendMesh.prototype.setAnimationDuration = function(name, duration) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.duration = duration;
    animation.fps = (animation.end - animation.start) / animation.duration
  }
};
THREE.MorphBlendMesh.prototype.setAnimationWeight = function(name, weight) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.weight = weight
  }
};
THREE.MorphBlendMesh.prototype.setAnimationTime = function(name, time) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.time = time
  }
};
THREE.MorphBlendMesh.prototype.getAnimationTime = function(name) {
  var time = 0;
  var animation = this.animationsMap[name];
  if(animation) {
    time = animation.time
  }
  return time
};
THREE.MorphBlendMesh.prototype.getAnimationDuration = function(name) {
  var duration = -1;
  var animation = this.animationsMap[name];
  if(animation) {
    duration = animation.duration
  }
  return duration
};
THREE.MorphBlendMesh.prototype.playAnimation = function(name) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.time = 0;
    animation.active = true
  }else {
    console.warn("animation[" + name + "] undefined")
  }
};
THREE.MorphBlendMesh.prototype.stopAnimation = function(name) {
  var animation = this.animationsMap[name];
  if(animation) {
    animation.active = false
  }
};
THREE.MorphBlendMesh.prototype.update = function(delta) {
  for(var i = 0, il = this.animationsList.length;i < il;i++) {
    var animation = this.animationsList[i];
    if(!animation.active) {
      continue
    }
    var frameTime = animation.duration / animation.length;
    animation.time += animation.direction * delta;
    if(animation.mirroredLoop) {
      if(animation.time > animation.duration || animation.time < 0) {
        animation.direction *= -1;
        if(animation.time > animation.duration) {
          animation.time = animation.duration;
          animation.directionBackwards = true
        }
        if(animation.time < 0) {
          animation.time = 0;
          animation.directionBackwards = false
        }
      }
    }else {
      animation.time = animation.time % animation.duration;
      if(animation.time < 0) {
        animation.time += animation.duration
      }
    }
    var keyframe = animation.startFrame + THREE.Math.clamp(Math.floor(animation.time / frameTime), 0, animation.length - 1);
    var weight = animation.weight;
    if(keyframe !== animation.currentFrame) {
      this.morphTargetInfluences[animation.lastFrame] = 0;
      this.morphTargetInfluences[animation.currentFrame] = 1 * weight;
      this.morphTargetInfluences[keyframe] = 0;
      animation.lastFrame = animation.currentFrame;
      animation.currentFrame = keyframe
    }
    var mix = animation.time % frameTime / frameTime;
    if(animation.directionBackwards) {
      mix = 1 - mix
    }
    this.morphTargetInfluences[animation.currentFrame] = mix * weight;
    this.morphTargetInfluences[animation.lastFrame] = (1 - mix) * weight
  }
};
THREE.LensFlarePlugin = function() {
  var _gl, _renderer, _precision, _lensFlare = {};
  this.init = function(renderer) {
    _gl = renderer.context;
    _renderer = renderer;
    _precision = renderer.getPrecision();
    _lensFlare.vertices = new Float32Array(8 + 8);
    _lensFlare.faces = new Uint16Array(6);
    var i = 0;
    _lensFlare.vertices[i++] = -1;
    _lensFlare.vertices[i++] = -1;
    _lensFlare.vertices[i++] = 0;
    _lensFlare.vertices[i++] = 0;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = -1;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = 0;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = -1;
    _lensFlare.vertices[i++] = 1;
    _lensFlare.vertices[i++] = 0;
    _lensFlare.vertices[i++] = 1;
    i = 0;
    _lensFlare.faces[i++] = 0;
    _lensFlare.faces[i++] = 1;
    _lensFlare.faces[i++] = 2;
    _lensFlare.faces[i++] = 0;
    _lensFlare.faces[i++] = 2;
    _lensFlare.faces[i++] = 3;
    _lensFlare.vertexBuffer = _gl.createBuffer();
    _lensFlare.elementBuffer = _gl.createBuffer();
    _gl.bindBuffer(_gl.ARRAY_BUFFER, _lensFlare.vertexBuffer);
    _gl.bufferData(_gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW);
    _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer);
    _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW);
    _lensFlare.tempTexture = _gl.createTexture();
    _lensFlare.occlusionTexture = _gl.createTexture();
    _gl.bindTexture(_gl.TEXTURE_2D, _lensFlare.tempTexture);
    _gl.texImage2D(_gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST);
    _gl.bindTexture(_gl.TEXTURE_2D, _lensFlare.occlusionTexture);
    _gl.texImage2D(_gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST);
    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST);
    if(_gl.getParameter(_gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) <= 0) {
      _lensFlare.hasVertexTexture = false;
      _lensFlare.program = createProgram(THREE.ShaderFlares["lensFlare"], _precision)
    }else {
      _lensFlare.hasVertexTexture = true;
      _lensFlare.program = createProgram(THREE.ShaderFlares["lensFlareVertexTexture"], _precision)
    }
    _lensFlare.attributes = {};
    _lensFlare.uniforms = {};
    _lensFlare.attributes.vertex = _gl.getAttribLocation(_lensFlare.program, "position");
    _lensFlare.attributes.uv = _gl.getAttribLocation(_lensFlare.program, "uv");
    _lensFlare.uniforms.renderType = _gl.getUniformLocation(_lensFlare.program, "renderType");
    _lensFlare.uniforms.map = _gl.getUniformLocation(_lensFlare.program, "map");
    _lensFlare.uniforms.occlusionMap = _gl.getUniformLocation(_lensFlare.program, "occlusionMap");
    _lensFlare.uniforms.opacity = _gl.getUniformLocation(_lensFlare.program, "opacity");
    _lensFlare.uniforms.color = _gl.getUniformLocation(_lensFlare.program, "color");
    _lensFlare.uniforms.scale = _gl.getUniformLocation(_lensFlare.program, "scale");
    _lensFlare.uniforms.rotation = _gl.getUniformLocation(_lensFlare.program, "rotation");
    _lensFlare.uniforms.screenPosition = _gl.getUniformLocation(_lensFlare.program, "screenPosition")
  };
  this.render = function(scene, camera, viewportWidth, viewportHeight) {
    var flares = scene.__webglFlares, nFlares = flares.length;
    if(!nFlares) {
      return
    }
    var tempPosition = new THREE.Vector3;
    var invAspect = viewportHeight / viewportWidth, halfViewportWidth = viewportWidth * 0.5, halfViewportHeight = viewportHeight * 0.5;
    var size = 16 / viewportHeight, scale = new THREE.Vector2(size * invAspect, size);
    var screenPosition = new THREE.Vector3(1, 1, 0), screenPositionPixels = new THREE.Vector2(1, 1);
    var uniforms = _lensFlare.uniforms, attributes = _lensFlare.attributes;
    _gl.useProgram(_lensFlare.program);
    _gl.enableVertexAttribArray(_lensFlare.attributes.vertex);
    _gl.enableVertexAttribArray(_lensFlare.attributes.uv);
    _gl.uniform1i(uniforms.occlusionMap, 0);
    _gl.uniform1i(uniforms.map, 1);
    _gl.bindBuffer(_gl.ARRAY_BUFFER, _lensFlare.vertexBuffer);
    _gl.vertexAttribPointer(attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0);
    _gl.vertexAttribPointer(attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8);
    _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer);
    _gl.disable(_gl.CULL_FACE);
    _gl.depthMask(false);
    var i, j, jl, flare, sprite;
    for(i = 0;i < nFlares;i++) {
      size = 16 / viewportHeight;
      scale.set(size * invAspect, size);
      flare = flares[i];
      tempPosition.set(flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14]);
      tempPosition.applyMatrix4(camera.matrixWorldInverse);
      tempPosition.applyProjection(camera.projectionMatrix);
      screenPosition.copy(tempPosition);
      screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
      screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;
      if(_lensFlare.hasVertexTexture || screenPositionPixels.x > 0 && screenPositionPixels.x < viewportWidth && screenPositionPixels.y > 0 && screenPositionPixels.y < viewportHeight) {
        _gl.activeTexture(_gl.TEXTURE1);
        _gl.bindTexture(_gl.TEXTURE_2D, _lensFlare.tempTexture);
        _gl.copyTexImage2D(_gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0);
        _gl.uniform1i(uniforms.renderType, 0);
        _gl.uniform2f(uniforms.scale, scale.x, scale.y);
        _gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);
        _gl.disable(_gl.BLEND);
        _gl.enable(_gl.DEPTH_TEST);
        _gl.drawElements(_gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0);
        _gl.activeTexture(_gl.TEXTURE0);
        _gl.bindTexture(_gl.TEXTURE_2D, _lensFlare.occlusionTexture);
        _gl.copyTexImage2D(_gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0);
        _gl.uniform1i(uniforms.renderType, 1);
        _gl.disable(_gl.DEPTH_TEST);
        _gl.activeTexture(_gl.TEXTURE1);
        _gl.bindTexture(_gl.TEXTURE_2D, _lensFlare.tempTexture);
        _gl.drawElements(_gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0);
        flare.positionScreen.copy(screenPosition);
        if(flare.customUpdateCallback) {
          flare.customUpdateCallback(flare)
        }else {
          flare.updateLensFlares()
        }
        _gl.uniform1i(uniforms.renderType, 2);
        _gl.enable(_gl.BLEND);
        for(j = 0, jl = flare.lensFlares.length;j < jl;j++) {
          sprite = flare.lensFlares[j];
          if(sprite.opacity > 0.0010 && sprite.scale > 0.0010) {
            screenPosition.x = sprite.x;
            screenPosition.y = sprite.y;
            screenPosition.z = sprite.z;
            size = sprite.size * sprite.scale / viewportHeight;
            scale.x = size * invAspect;
            scale.y = size;
            _gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);
            _gl.uniform2f(uniforms.scale, scale.x, scale.y);
            _gl.uniform1f(uniforms.rotation, sprite.rotation);
            _gl.uniform1f(uniforms.opacity, sprite.opacity);
            _gl.uniform3f(uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b);
            _renderer.setBlending(sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst);
            _renderer.setTexture(sprite.texture, 1);
            _gl.drawElements(_gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0)
          }
        }
      }
    }
    _gl.enable(_gl.CULL_FACE);
    _gl.enable(_gl.DEPTH_TEST);
    _gl.depthMask(true)
  };
  function createProgram(shader, precision) {
    var program = _gl.createProgram();
    var fragmentShader = _gl.createShader(_gl.FRAGMENT_SHADER);
    var vertexShader = _gl.createShader(_gl.VERTEX_SHADER);
    var prefix = "precision " + precision + " float;\n";
    _gl.shaderSource(fragmentShader, prefix + shader.fragmentShader);
    _gl.shaderSource(vertexShader, prefix + shader.vertexShader);
    _gl.compileShader(fragmentShader);
    _gl.compileShader(vertexShader);
    _gl.attachShader(program, fragmentShader);
    _gl.attachShader(program, vertexShader);
    _gl.linkProgram(program);
    return program
  }
};
THREE.ShadowMapPlugin = function() {
  var _gl, _renderer, _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin, _frustum = new THREE.Frustum, _projScreenMatrix = new THREE.Matrix4, _min = new THREE.Vector3, _max = new THREE.Vector3;
  this.init = function(renderer) {
    _gl = renderer.context;
    _renderer = renderer;
    var depthShader = THREE.ShaderLib["depthRGBA"];
    var depthUniforms = THREE.UniformsUtils.clone(depthShader.uniforms);
    _depthMaterial = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms});
    _depthMaterialMorph = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms, morphTargets:true});
    _depthMaterialSkin = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms, skinning:true});
    _depthMaterialMorphSkin = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms, morphTargets:true, skinning:true});
    _depthMaterial._shadowPass = true;
    _depthMaterialMorph._shadowPass = true;
    _depthMaterialSkin._shadowPass = true;
    _depthMaterialMorphSkin._shadowPass = true
  };
  this.render = function(scene, camera) {
    if(!(_renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate)) {
      return
    }
    this.update(scene, camera)
  };
  this.update = function(scene, camera) {
    var i, il, j, jl, n, shadowMap, shadowMatrix, shadowCamera, program, buffer, material, webglObject, object, light, renderList, lights = [], k = 0, fog = null;
    _gl.clearColor(1, 1, 1, 1);
    _gl.disable(_gl.BLEND);
    _gl.enable(_gl.CULL_FACE);
    _gl.frontFace(_gl.CCW);
    if(_renderer.shadowMapCullFace === THREE.CullFaceFront) {
      _gl.cullFace(_gl.FRONT)
    }else {
      _gl.cullFace(_gl.BACK)
    }
    _renderer.setDepthTest(true);
    for(i = 0, il = scene.__lights.length;i < il;i++) {
      light = scene.__lights[i];
      if(!light.castShadow) {
        continue
      }
      if(light instanceof THREE.DirectionalLight && light.shadowCascade) {
        for(n = 0;n < light.shadowCascadeCount;n++) {
          var virtualLight;
          if(!light.shadowCascadeArray[n]) {
            virtualLight = createVirtualLight(light, n);
            virtualLight.originalCamera = camera;
            var gyro = new THREE.Gyroscope;
            gyro.position = light.shadowCascadeOffset;
            gyro.add(virtualLight);
            gyro.add(virtualLight.target);
            camera.add(gyro);
            light.shadowCascadeArray[n] = virtualLight;
            console.log("Created virtualLight", virtualLight)
          }else {
            virtualLight = light.shadowCascadeArray[n]
          }
          updateVirtualLight(light, n);
          lights[k] = virtualLight;
          k++
        }
      }else {
        lights[k] = light;
        k++
      }
    }
    for(i = 0, il = lights.length;i < il;i++) {
      light = lights[i];
      if(!light.shadowMap) {
        var shadowFilter = THREE.LinearFilter;
        if(_renderer.shadowMapType === THREE.PCFSoftShadowMap) {
          shadowFilter = THREE.NearestFilter
        }
        var pars = {minFilter:shadowFilter, magFilter:shadowFilter, format:THREE.RGBAFormat};
        light.shadowMap = new THREE.WebGLRenderTarget(light.shadowMapWidth, light.shadowMapHeight, pars);
        light.shadowMapSize = new THREE.Vector2(light.shadowMapWidth, light.shadowMapHeight);
        light.shadowMatrix = new THREE.Matrix4
      }
      if(!light.shadowCamera) {
        if(light instanceof THREE.SpotLight) {
          light.shadowCamera = new THREE.PerspectiveCamera(light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar)
        }else {
          if(light instanceof THREE.DirectionalLight) {
            light.shadowCamera = new THREE.OrthographicCamera(light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar)
          }else {
            console.error("Unsupported light type for shadow");
            continue
          }
        }
        scene.add(light.shadowCamera);
        if(_renderer.autoUpdateScene) {
          scene.updateMatrixWorld()
        }
      }
      if(light.shadowCameraVisible && !light.cameraHelper) {
        light.cameraHelper = new THREE.CameraHelper(light.shadowCamera);
        light.shadowCamera.add(light.cameraHelper)
      }
      if(light.isVirtual && virtualLight.originalCamera == camera) {
        updateShadowCamera(camera, light)
      }
      shadowMap = light.shadowMap;
      shadowMatrix = light.shadowMatrix;
      shadowCamera = light.shadowCamera;
      shadowCamera.position.copy(light.matrixWorld.getPosition());
      shadowCamera.lookAt(light.target.matrixWorld.getPosition());
      shadowCamera.updateMatrixWorld();
      shadowCamera.matrixWorldInverse.getInverse(shadowCamera.matrixWorld);
      if(light.cameraHelper) {
        light.cameraHelper.visible = light.shadowCameraVisible
      }
      if(light.shadowCameraVisible) {
        light.cameraHelper.update()
      }
      shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
      shadowMatrix.multiply(shadowCamera.projectionMatrix);
      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
      _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
      _frustum.setFromMatrix(_projScreenMatrix);
      _renderer.setRenderTarget(shadowMap);
      _renderer.clear();
      renderList = scene.__webglObjects;
      for(j = 0, jl = renderList.length;j < jl;j++) {
        webglObject = renderList[j];
        object = webglObject.object;
        webglObject.render = false;
        if(object.visible && object.castShadow) {
          if(!(object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem) || !object.frustumCulled || _frustum.intersectsObject(object)) {
            object._modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
            webglObject.render = true
          }
        }
      }
      var objectMaterial, useMorphing, useSkinning;
      for(j = 0, jl = renderList.length;j < jl;j++) {
        webglObject = renderList[j];
        if(webglObject.render) {
          object = webglObject.object;
          buffer = webglObject.buffer;
          objectMaterial = getObjectMaterial(object);
          useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
          useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;
          if(object.customDepthMaterial) {
            material = object.customDepthMaterial
          }else {
            if(useSkinning) {
              material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin
            }else {
              if(useMorphing) {
                material = _depthMaterialMorph
              }else {
                material = _depthMaterial
              }
            }
          }
          if(buffer instanceof THREE.BufferGeometry) {
            _renderer.renderBufferDirect(shadowCamera, scene.__lights, fog, material, buffer, object)
          }else {
            _renderer.renderBuffer(shadowCamera, scene.__lights, fog, material, buffer, object)
          }
        }
      }
      renderList = scene.__webglObjectsImmediate;
      for(j = 0, jl = renderList.length;j < jl;j++) {
        webglObject = renderList[j];
        object = webglObject.object;
        if(object.visible && object.castShadow) {
          object._modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          _renderer.renderImmediateObject(shadowCamera, scene.__lights, fog, _depthMaterial, object)
        }
      }
    }
    var clearColor = _renderer.getClearColor(), clearAlpha = _renderer.getClearAlpha();
    _gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearAlpha);
    _gl.enable(_gl.BLEND);
    if(_renderer.shadowMapCullFace === THREE.CullFaceFront) {
      _gl.cullFace(_gl.BACK)
    }
  };
  function createVirtualLight(light, cascade) {
    var virtualLight = new THREE.DirectionalLight;
    virtualLight.isVirtual = true;
    virtualLight.onlyShadow = true;
    virtualLight.castShadow = true;
    virtualLight.shadowCameraNear = light.shadowCameraNear;
    virtualLight.shadowCameraFar = light.shadowCameraFar;
    virtualLight.shadowCameraLeft = light.shadowCameraLeft;
    virtualLight.shadowCameraRight = light.shadowCameraRight;
    virtualLight.shadowCameraBottom = light.shadowCameraBottom;
    virtualLight.shadowCameraTop = light.shadowCameraTop;
    virtualLight.shadowCameraVisible = light.shadowCameraVisible;
    virtualLight.shadowDarkness = light.shadowDarkness;
    virtualLight.shadowBias = light.shadowCascadeBias[cascade];
    virtualLight.shadowMapWidth = light.shadowCascadeWidth[cascade];
    virtualLight.shadowMapHeight = light.shadowCascadeHeight[cascade];
    virtualLight.pointsWorld = [];
    virtualLight.pointsFrustum = [];
    var pointsWorld = virtualLight.pointsWorld, pointsFrustum = virtualLight.pointsFrustum;
    for(var i = 0;i < 8;i++) {
      pointsWorld[i] = new THREE.Vector3;
      pointsFrustum[i] = new THREE.Vector3
    }
    var nearZ = light.shadowCascadeNearZ[cascade];
    var farZ = light.shadowCascadeFarZ[cascade];
    pointsFrustum[0].set(-1, -1, nearZ);
    pointsFrustum[1].set(1, -1, nearZ);
    pointsFrustum[2].set(-1, 1, nearZ);
    pointsFrustum[3].set(1, 1, nearZ);
    pointsFrustum[4].set(-1, -1, farZ);
    pointsFrustum[5].set(1, -1, farZ);
    pointsFrustum[6].set(-1, 1, farZ);
    pointsFrustum[7].set(1, 1, farZ);
    return virtualLight
  }
  function updateVirtualLight(light, cascade) {
    var virtualLight = light.shadowCascadeArray[cascade];
    virtualLight.position.copy(light.position);
    virtualLight.target.position.copy(light.target.position);
    virtualLight.lookAt(virtualLight.target);
    virtualLight.shadowCameraVisible = light.shadowCameraVisible;
    virtualLight.shadowDarkness = light.shadowDarkness;
    virtualLight.shadowBias = light.shadowCascadeBias[cascade];
    var nearZ = light.shadowCascadeNearZ[cascade];
    var farZ = light.shadowCascadeFarZ[cascade];
    var pointsFrustum = virtualLight.pointsFrustum;
    pointsFrustum[0].z = nearZ;
    pointsFrustum[1].z = nearZ;
    pointsFrustum[2].z = nearZ;
    pointsFrustum[3].z = nearZ;
    pointsFrustum[4].z = farZ;
    pointsFrustum[5].z = farZ;
    pointsFrustum[6].z = farZ;
    pointsFrustum[7].z = farZ
  }
  function updateShadowCamera(camera, light) {
    var shadowCamera = light.shadowCamera, pointsFrustum = light.pointsFrustum, pointsWorld = light.pointsWorld;
    _min.set(Infinity, Infinity, Infinity);
    _max.set(-Infinity, -Infinity, -Infinity);
    for(var i = 0;i < 8;i++) {
      var p = pointsWorld[i];
      p.copy(pointsFrustum[i]);
      THREE.ShadowMapPlugin.__projector.unprojectVector(p, camera);
      p.applyMatrix4(shadowCamera.matrixWorldInverse);
      if(p.x < _min.x) {
        _min.x = p.x
      }
      if(p.x > _max.x) {
        _max.x = p.x
      }
      if(p.y < _min.y) {
        _min.y = p.y
      }
      if(p.y > _max.y) {
        _max.y = p.y
      }
      if(p.z < _min.z) {
        _min.z = p.z
      }
      if(p.z > _max.z) {
        _max.z = p.z
      }
    }
    shadowCamera.left = _min.x;
    shadowCamera.right = _max.x;
    shadowCamera.top = _max.y;
    shadowCamera.bottom = _min.y;
    shadowCamera.updateProjectionMatrix()
  }
  function getObjectMaterial(object) {
    return object.material instanceof THREE.MeshFaceMaterial ? object.material.materials[0] : object.material
  }
};
THREE.ShadowMapPlugin.__projector = new THREE.Projector;
THREE.SpritePlugin = function() {
  var _gl, _renderer, _precision, _sprite = {};
  this.init = function(renderer) {
    _gl = renderer.context;
    _renderer = renderer;
    _precision = renderer.getPrecision();
    _sprite.vertices = new Float32Array(8 + 8);
    _sprite.faces = new Uint16Array(6);
    var i = 0;
    _sprite.vertices[i++] = -1;
    _sprite.vertices[i++] = -1;
    _sprite.vertices[i++] = 0;
    _sprite.vertices[i++] = 0;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = -1;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = 0;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = -1;
    _sprite.vertices[i++] = 1;
    _sprite.vertices[i++] = 0;
    _sprite.vertices[i++] = 1;
    i = 0;
    _sprite.faces[i++] = 0;
    _sprite.faces[i++] = 1;
    _sprite.faces[i++] = 2;
    _sprite.faces[i++] = 0;
    _sprite.faces[i++] = 2;
    _sprite.faces[i++] = 3;
    _sprite.vertexBuffer = _gl.createBuffer();
    _sprite.elementBuffer = _gl.createBuffer();
    _gl.bindBuffer(_gl.ARRAY_BUFFER, _sprite.vertexBuffer);
    _gl.bufferData(_gl.ARRAY_BUFFER, _sprite.vertices, _gl.STATIC_DRAW);
    _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer);
    _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, _sprite.faces, _gl.STATIC_DRAW);
    _sprite.program = createProgram(THREE.ShaderSprite["sprite"], _precision);
    _sprite.attributes = {};
    _sprite.uniforms = {};
    _sprite.attributes.position = _gl.getAttribLocation(_sprite.program, "position");
    _sprite.attributes.uv = _gl.getAttribLocation(_sprite.program, "uv");
    _sprite.uniforms.uvOffset = _gl.getUniformLocation(_sprite.program, "uvOffset");
    _sprite.uniforms.uvScale = _gl.getUniformLocation(_sprite.program, "uvScale");
    _sprite.uniforms.rotation = _gl.getUniformLocation(_sprite.program, "rotation");
    _sprite.uniforms.scale = _gl.getUniformLocation(_sprite.program, "scale");
    _sprite.uniforms.alignment = _gl.getUniformLocation(_sprite.program, "alignment");
    _sprite.uniforms.color = _gl.getUniformLocation(_sprite.program, "color");
    _sprite.uniforms.map = _gl.getUniformLocation(_sprite.program, "map");
    _sprite.uniforms.opacity = _gl.getUniformLocation(_sprite.program, "opacity");
    _sprite.uniforms.useScreenCoordinates = _gl.getUniformLocation(_sprite.program, "useScreenCoordinates");
    _sprite.uniforms.sizeAttenuation = _gl.getUniformLocation(_sprite.program, "sizeAttenuation");
    _sprite.uniforms.screenPosition = _gl.getUniformLocation(_sprite.program, "screenPosition");
    _sprite.uniforms.modelViewMatrix = _gl.getUniformLocation(_sprite.program, "modelViewMatrix");
    _sprite.uniforms.projectionMatrix = _gl.getUniformLocation(_sprite.program, "projectionMatrix");
    _sprite.uniforms.fogType = _gl.getUniformLocation(_sprite.program, "fogType");
    _sprite.uniforms.fogDensity = _gl.getUniformLocation(_sprite.program, "fogDensity");
    _sprite.uniforms.fogNear = _gl.getUniformLocation(_sprite.program, "fogNear");
    _sprite.uniforms.fogFar = _gl.getUniformLocation(_sprite.program, "fogFar");
    _sprite.uniforms.fogColor = _gl.getUniformLocation(_sprite.program, "fogColor");
    _sprite.uniforms.alphaTest = _gl.getUniformLocation(_sprite.program, "alphaTest")
  };
  this.render = function(scene, camera, viewportWidth, viewportHeight) {
    var sprites = scene.__webglSprites, nSprites = sprites.length;
    if(!nSprites) {
      return
    }
    var attributes = _sprite.attributes, uniforms = _sprite.uniforms;
    var invAspect = viewportHeight / viewportWidth;
    var halfViewportWidth = viewportWidth * 0.5, halfViewportHeight = viewportHeight * 0.5;
    _gl.useProgram(_sprite.program);
    _gl.enableVertexAttribArray(attributes.position);
    _gl.enableVertexAttribArray(attributes.uv);
    _gl.disable(_gl.CULL_FACE);
    _gl.enable(_gl.BLEND);
    _gl.bindBuffer(_gl.ARRAY_BUFFER, _sprite.vertexBuffer);
    _gl.vertexAttribPointer(attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0);
    _gl.vertexAttribPointer(attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8);
    _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer);
    _gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);
    _gl.activeTexture(_gl.TEXTURE0);
    _gl.uniform1i(uniforms.map, 0);
    var oldFogType = 0;
    var sceneFogType = 0;
    var fog = scene.fog;
    if(fog) {
      _gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);
      if(fog instanceof THREE.Fog) {
        _gl.uniform1f(uniforms.fogNear, fog.near);
        _gl.uniform1f(uniforms.fogFar, fog.far);
        _gl.uniform1i(uniforms.fogType, 1);
        oldFogType = 1;
        sceneFogType = 1
      }else {
        if(fog instanceof THREE.FogExp2) {
          _gl.uniform1f(uniforms.fogDensity, fog.density);
          _gl.uniform1i(uniforms.fogType, 2);
          oldFogType = 2;
          sceneFogType = 2
        }
      }
    }else {
      _gl.uniform1i(uniforms.fogType, 0);
      oldFogType = 0;
      sceneFogType = 0
    }
    var i, sprite, material, screenPosition, size, fogType, scale = [];
    for(i = 0;i < nSprites;i++) {
      sprite = sprites[i];
      material = sprite.material;
      if(!sprite.visible || material.opacity === 0) {
        continue
      }
      if(!material.useScreenCoordinates) {
        sprite._modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);
        sprite.z = -sprite._modelViewMatrix.elements[14]
      }else {
        sprite.z = -sprite.position.z
      }
    }
    sprites.sort(painterSortStable);
    for(i = 0;i < nSprites;i++) {
      sprite = sprites[i];
      material = sprite.material;
      if(!sprite.visible || material.opacity === 0) {
        continue
      }
      if(material.map && material.map.image && material.map.image.width) {
        _gl.uniform1f(uniforms.alphaTest, material.alphaTest);
        if(material.useScreenCoordinates === true) {
          _gl.uniform1i(uniforms.useScreenCoordinates, 1);
          _gl.uniform3f(uniforms.screenPosition, (sprite.position.x * _renderer.devicePixelRatio - halfViewportWidth) / halfViewportWidth, (halfViewportHeight - sprite.position.y * _renderer.devicePixelRatio) / halfViewportHeight, Math.max(0, Math.min(1, sprite.position.z)));
          scale[0] = _renderer.devicePixelRatio;
          scale[1] = _renderer.devicePixelRatio
        }else {
          _gl.uniform1i(uniforms.useScreenCoordinates, 0);
          _gl.uniform1i(uniforms.sizeAttenuation, material.sizeAttenuation ? 1 : 0);
          _gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements);
          scale[0] = 1;
          scale[1] = 1
        }
        if(scene.fog && material.fog) {
          fogType = sceneFogType
        }else {
          fogType = 0
        }
        if(oldFogType !== fogType) {
          _gl.uniform1i(uniforms.fogType, fogType);
          oldFogType = fogType
        }
        size = 1 / (material.scaleByViewport ? viewportHeight : 1);
        scale[0] *= size * invAspect * sprite.scale.x;
        scale[1] *= size * sprite.scale.y;
        _gl.uniform2f(uniforms.uvScale, material.uvScale.x, material.uvScale.y);
        _gl.uniform2f(uniforms.uvOffset, material.uvOffset.x, material.uvOffset.y);
        _gl.uniform2f(uniforms.alignment, material.alignment.x, material.alignment.y);
        _gl.uniform1f(uniforms.opacity, material.opacity);
        _gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);
        _gl.uniform1f(uniforms.rotation, sprite.rotation);
        _gl.uniform2fv(uniforms.scale, scale);
        _renderer.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst);
        _renderer.setDepthTest(material.depthTest);
        _renderer.setDepthWrite(material.depthWrite);
        _renderer.setTexture(material.map, 0);
        _gl.drawElements(_gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0)
      }
    }
    _gl.enable(_gl.CULL_FACE)
  };
  function createProgram(shader, precision) {
    var program = _gl.createProgram();
    var fragmentShader = _gl.createShader(_gl.FRAGMENT_SHADER);
    var vertexShader = _gl.createShader(_gl.VERTEX_SHADER);
    var prefix = "precision " + precision + " float;\n";
    _gl.shaderSource(fragmentShader, prefix + shader.fragmentShader);
    _gl.shaderSource(vertexShader, prefix + shader.vertexShader);
    _gl.compileShader(fragmentShader);
    _gl.compileShader(vertexShader);
    _gl.attachShader(program, fragmentShader);
    _gl.attachShader(program, vertexShader);
    _gl.linkProgram(program);
    return program
  }
  function painterSortStable(a, b) {
    if(a.z !== b.z) {
      return b.z - a.z
    }else {
      return b.id - a.id
    }
  }
};
THREE.DepthPassPlugin = function() {
  this.enabled = false;
  this.renderTarget = null;
  var _gl, _renderer, _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin, _frustum = new THREE.Frustum, _projScreenMatrix = new THREE.Matrix4;
  this.init = function(renderer) {
    _gl = renderer.context;
    _renderer = renderer;
    var depthShader = THREE.ShaderLib["depthRGBA"];
    var depthUniforms = THREE.UniformsUtils.clone(depthShader.uniforms);
    _depthMaterial = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms});
    _depthMaterialMorph = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms, morphTargets:true});
    _depthMaterialSkin = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms, skinning:true});
    _depthMaterialMorphSkin = new THREE.ShaderMaterial({fragmentShader:depthShader.fragmentShader, vertexShader:depthShader.vertexShader, uniforms:depthUniforms, morphTargets:true, skinning:true});
    _depthMaterial._shadowPass = true;
    _depthMaterialMorph._shadowPass = true;
    _depthMaterialSkin._shadowPass = true;
    _depthMaterialMorphSkin._shadowPass = true
  };
  this.render = function(scene, camera) {
    if(!this.enabled) {
      return
    }
    this.update(scene, camera)
  };
  this.update = function(scene, camera) {
    var i, il, j, jl, n, program, buffer, material, webglObject, object, light, renderList, fog = null;
    _gl.clearColor(1, 1, 1, 1);
    _gl.disable(_gl.BLEND);
    _renderer.setDepthTest(true);
    if(_renderer.autoUpdateScene) {
      scene.updateMatrixWorld()
    }
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    _frustum.setFromMatrix(_projScreenMatrix);
    _renderer.setRenderTarget(this.renderTarget);
    _renderer.clear();
    renderList = scene.__webglObjects;
    for(j = 0, jl = renderList.length;j < jl;j++) {
      webglObject = renderList[j];
      object = webglObject.object;
      webglObject.render = false;
      if(object.visible) {
        if(!(object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem) || !object.frustumCulled || _frustum.intersectsObject(object)) {
          object._modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
          webglObject.render = true
        }
      }
    }
    var objectMaterial, useMorphing, useSkinning;
    for(j = 0, jl = renderList.length;j < jl;j++) {
      webglObject = renderList[j];
      if(webglObject.render) {
        object = webglObject.object;
        buffer = webglObject.buffer;
        if(object instanceof THREE.ParticleSystem && !object.customDepthMaterial) {
          continue
        }
        objectMaterial = getObjectMaterial(object);
        if(objectMaterial) {
          _renderer.setMaterialFaces(object.material)
        }
        useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
        useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;
        if(object.customDepthMaterial) {
          material = object.customDepthMaterial
        }else {
          if(useSkinning) {
            material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin
          }else {
            if(useMorphing) {
              material = _depthMaterialMorph
            }else {
              material = _depthMaterial
            }
          }
        }
        if(buffer instanceof THREE.BufferGeometry) {
          _renderer.renderBufferDirect(camera, scene.__lights, fog, material, buffer, object)
        }else {
          _renderer.renderBuffer(camera, scene.__lights, fog, material, buffer, object)
        }
      }
    }
    renderList = scene.__webglObjectsImmediate;
    for(j = 0, jl = renderList.length;j < jl;j++) {
      webglObject = renderList[j];
      object = webglObject.object;
      if(object.visible) {
        object._modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        _renderer.renderImmediateObject(camera, scene.__lights, fog, _depthMaterial, object)
      }
    }
    var clearColor = _renderer.getClearColor(), clearAlpha = _renderer.getClearAlpha();
    _gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearAlpha);
    _gl.enable(_gl.BLEND)
  };
  function getObjectMaterial(object) {
    return object.material instanceof THREE.MeshFaceMaterial ? object.material.materials[0] : object.material
  }
};
THREE.ShaderFlares = {"lensFlareVertexTexture":{vertexShader:["uniform lowp int renderType;", "uniform vec3 screenPosition;", "uniform vec2 scale;", "uniform float rotation;", "uniform sampler2D occlusionMap;", "attribute vec2 position;", "attribute vec2 uv;", "varying vec2 vUV;", "varying float vVisibility;", "void main() {", "vUV \x3d uv;", "vec2 pos \x3d position;", "if( renderType \x3d\x3d 2 ) {", "vec4 visibility \x3d texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +", "texture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +", 
"texture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +", "texture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +", "texture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +", "texture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +", "texture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +", "texture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +", "texture2D( occlusionMap, vec2( 0.5, 0.5 ) );", "vVisibility \x3d (       visibility.r / 9.0 ) *", "( 1.0 - visibility.g / 9.0 ) *", "(       visibility.b / 9.0 ) *", "( 1.0 - visibility.a / 9.0 );", "pos.x \x3d cos( rotation ) * position.x - sin( rotation ) * position.y;", 
"pos.y \x3d sin( rotation ) * position.x + cos( rotation ) * position.y;", "}", "gl_Position \x3d vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );", "}"].join("\n"), fragmentShader:["uniform lowp int renderType;", "uniform sampler2D map;", "uniform float opacity;", "uniform vec3 color;", "varying vec2 vUV;", "varying float vVisibility;", "void main() {", "if( renderType \x3d\x3d 0 ) {", "gl_FragColor \x3d vec4( 1.0, 0.0, 1.0, 0.0 );", "} else if( renderType \x3d\x3d 1 ) {", 
"gl_FragColor \x3d texture2D( map, vUV );", "} else {", "vec4 texture \x3d texture2D( map, vUV );", "texture.a *\x3d opacity * vVisibility;", "gl_FragColor \x3d texture;", "gl_FragColor.rgb *\x3d color;", "}", "}"].join("\n")}, "lensFlare":{vertexShader:["uniform lowp int renderType;", "uniform vec3 screenPosition;", "uniform vec2 scale;", "uniform float rotation;", "attribute vec2 position;", "attribute vec2 uv;", "varying vec2 vUV;", "void main() {", "vUV \x3d uv;", "vec2 pos \x3d position;", "if( renderType \x3d\x3d 2 ) {", 
"pos.x \x3d cos( rotation ) * position.x - sin( rotation ) * position.y;", "pos.y \x3d sin( rotation ) * position.x + cos( rotation ) * position.y;", "}", "gl_Position \x3d vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );", "}"].join("\n"), fragmentShader:["precision mediump float;", "uniform lowp int renderType;", "uniform sampler2D map;", "uniform sampler2D occlusionMap;", "uniform float opacity;", "uniform vec3 color;", "varying vec2 vUV;", "void main() {", "if( renderType \x3d\x3d 0 ) {", 
"gl_FragColor \x3d vec4( texture2D( map, vUV ).rgb, 0.0 );", "} else if( renderType \x3d\x3d 1 ) {", "gl_FragColor \x3d texture2D( map, vUV );", "} else {", "float visibility \x3d texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +", "texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +", "texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +", "texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;", "visibility \x3d ( 1.0 - visibility / 4.0 );", "vec4 texture \x3d texture2D( map, vUV );", "texture.a *\x3d opacity * visibility;", 
"gl_FragColor \x3d texture;", "gl_FragColor.rgb *\x3d color;", "}", "}"].join("\n")}};
THREE.ShaderSprite = {"sprite":{vertexShader:["uniform int useScreenCoordinates;", "uniform int sizeAttenuation;", "uniform vec3 screenPosition;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform float rotation;", "uniform vec2 scale;", "uniform vec2 alignment;", "uniform vec2 uvOffset;", "uniform vec2 uvScale;", "attribute vec2 position;", "attribute vec2 uv;", "varying vec2 vUV;", "void main() {", "vUV \x3d uvOffset + uv * uvScale;", "vec2 alignedPosition \x3d position + alignment;", 
"vec2 rotatedPosition;", "rotatedPosition.x \x3d ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;", "rotatedPosition.y \x3d ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;", "vec4 finalPosition;", "if( useScreenCoordinates !\x3d 0 ) {", "finalPosition \x3d vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );", "} else {", "finalPosition \x3d projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );", 
"finalPosition.xy +\x3d rotatedPosition * ( sizeAttenuation \x3d\x3d 1 ? 1.0 : finalPosition.z );", "}", "gl_Position \x3d finalPosition;", "}"].join("\n"), fragmentShader:["uniform vec3 color;", "uniform sampler2D map;", "uniform float opacity;", "uniform int fogType;", "uniform vec3 fogColor;", "uniform float fogDensity;", "uniform float fogNear;", "uniform float fogFar;", "uniform float alphaTest;", "varying vec2 vUV;", "void main() {", "vec4 texture \x3d texture2D( map, vUV );", "if ( texture.a \x3c alphaTest ) discard;", 
"gl_FragColor \x3d vec4( color * texture.xyz, texture.a * opacity );", "if ( fogType \x3e 0 ) {", "float depth \x3d gl_FragCoord.z / gl_FragCoord.w;", "float fogFactor \x3d 0.0;", "if ( fogType \x3d\x3d 1 ) {", "fogFactor \x3d smoothstep( fogNear, fogFar, depth );", "} else {", "const float LOG2 \x3d 1.442695;", "float fogFactor \x3d exp2( - fogDensity * fogDensity * depth * depth * LOG2 );", "fogFactor \x3d 1.0 - clamp( fogFactor, 0.0, 1.0 );", "}", "gl_FragColor \x3d mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );", 
"}", "}"].join("\n")}};
THREE.Object3D._matrixAux = new THREE.Matrix4;
THREE.Object3D.prototype.rotateAroundWorldAxis = function(axis, radians) {
  THREE.Object3D._matrixAux.makeRotationAxis(axis, radians);
  this.matrix.multiplyMatrices(THREE.Object3D._matrixAux, this.matrix);
  THREE.Object3D._matrixAux.extractRotation(this.matrix);
  this.rotation.setEulerFromRotationMatrix(THREE.Object3D._matrixAux, this.eulerOrder);
  this.position.getPositionFromMatrix(this.matrix)
};
THREE.Object3D.prototype.rotateAroundWorldAxisX = function(radians) {
  this._vector.set(1, 0, 0);
  this.rotateAroundWorldAxis(this._vector, radians)
};
THREE.Object3D.prototype.rotateAroundWorldAxisY = function(radians) {
  this._vector.set(0, 1, 0);
  this.rotateAroundWorldAxis(this._vector, radians)
};
THREE.Object3D.prototype.rotateAroundWorldAxisZ = function(degrees) {
  this._vector.set(0, 0, 1);
  this.rotateAroundWorldAxis(this._vector, degrees)
};
goog.provide("multiplay.views.arena");
goog.require("cljs.core");
goog.require("multiplay.utils");
goog.require("cljs.core.async");
goog.require("multiplay.game.params");
goog.require("tween");
goog.require("three");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("multiplay.game.params");
goog.require("multiplay.utils");
goog.require("cljs.core.async");
multiplay.views.arena.voxel_edge = 20;
multiplay.views.arena.window_width = window.innerWidth;
multiplay.views.arena.window_height = window.innerHeight;
multiplay.views.arena.camera = function() {
  var camera = new THREE.OrthographicCamera(multiplay.views.arena.window_width / -2, multiplay.views.arena.window_width / 2, multiplay.views.arena.window_height / 2, multiplay.views.arena.window_height / -2, 1, 1E5);
  var pi = Math.PI;
  camera.position.x = 1600;
  camera.position.y = 0;
  camera.position.z = 0;
  camera.lookAt(cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0, new cljs.core.Keyword(null, "z", "z", 1013904364), 0], true)));
  return camera
}();
multiplay.views.arena.scene = new THREE.Scene;
multiplay.views.arena.renderer = new THREE.CanvasRenderer;
multiplay.views.arena.mouse2d = new THREE.Vector3(0, 1E4, 0.5);
multiplay.views.arena.projector = new THREE.Projector;
multiplay.views.arena.cube = new THREE.CubeGeometry(multiplay.views.arena.voxel_edge, multiplay.views.arena.voxel_edge, multiplay.views.arena.voxel_edge);
multiplay.views.arena.make_voxel = function make_voxel(p__64773, color) {
  var vec__64775 = p__64773;
  var x = cljs.core.nth.call(null, vec__64775, 0, null);
  var y = cljs.core.nth.call(null, vec__64775, 1, null);
  var z = cljs.core.nth.call(null, vec__64775, 2, null);
  var brush_materials = cljs.core.clj__GT_js.call(null, cljs.core.PersistentVector.fromArray([new THREE.MeshBasicMaterial(cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "vertexColors", "vertexColors", 3198714790), THREE.VertexColors, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1, new cljs.core.Keyword(null, "color", "color", 1108746965), color], true))), new THREE.MeshBasicMaterial(cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, 
  "color", "color", 1108746965), 0, new cljs.core.Keyword(null, "wireframe", "wireframe", 4367087482), true], true)))], true));
  var brush = THREE.SceneUtils.createMultiMaterialObject(multiplay.views.arena.cube, brush_materials);
  brush.isBrush = true;
  brush.position.x = x;
  brush.position.y = y;
  brush.position.z = z;
  brush.overdraw = true;
  return brush
};
multiplay.views.arena.animate = function animate() {
  requestAnimationFrame(animate);
  multiplay.views.arena.renderer.render(multiplay.views.arena.scene, multiplay.views.arena.camera);
  return TWEEN.update()
};
multiplay.views.arena.deg__GT_rad = function deg__GT_rad(deg) {
  return deg * (Math.PI / 180)
};
multiplay.views.arena.offset_3d = multiplay.game.params.game_dimension / 2 * multiplay.views.arena.voxel_edge - multiplay.views.arena.voxel_edge / 2;
multiplay.views.arena.to_3d_coords = function to_3d_coords(p__64776) {
  var vec__64778 = p__64776;
  var x = cljs.core.nth.call(null, vec__64778, 0, null);
  var y = cljs.core.nth.call(null, vec__64778, 1, null);
  var z = cljs.core.nth.call(null, vec__64778, 2, null);
  return cljs.core.PersistentVector.fromArray([x * multiplay.views.arena.voxel_edge - multiplay.views.arena.offset_3d, y * multiplay.views.arena.voxel_edge - multiplay.views.arena.offset_3d, z * multiplay.views.arena.voxel_edge - multiplay.views.arena.offset_3d], true)
};
multiplay.views.arena.create_context = function create_context() {
  var container = document.createElement("div");
  multiplay.views.arena.renderer.setSize(multiplay.views.arena.window_width, multiplay.views.arena.window_height);
  container.appendChild(multiplay.views.arena.renderer.domElement);
  return container
};
multiplay.views.arena.draw_line = function draw_line(geometry, x, y, z) {
  return geometry.vertices.push(new THREE.Vector3(x, y, z))
};
multiplay.views.arena.draw_grid = function draw_grid(container, scene) {
  var extent = multiplay.game.params.game_dimension / 2 * multiplay.views.arena.voxel_edge;
  var material = new THREE.LineBasicMaterial(cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "color", "color", 1108746965), 11184810], true)));
  var geometry = new THREE.Geometry;
  var seq__64783 = cljs.core.seq.call(null, cljs.core.range.call(null, -extent, extent + 1, multiplay.views.arena.voxel_edge));
  var chunk__64784 = null;
  var count__64785 = 0;
  var i__64786 = 0;
  while(true) {
    if(i__64786 < count__64785) {
      var i = cljs.core._nth.call(null, chunk__64784, i__64786);
      multiplay.views.arena.draw_line.call(null, geometry, 0, -extent, i);
      multiplay.views.arena.draw_line.call(null, geometry, 0, extent, i);
      multiplay.views.arena.draw_line.call(null, geometry, 0, i, -extent);
      multiplay.views.arena.draw_line.call(null, geometry, 0, i, extent);
      multiplay.views.arena.draw_line.call(null, geometry, -extent, 0, i);
      multiplay.views.arena.draw_line.call(null, geometry, extent, 0, i);
      multiplay.views.arena.draw_line.call(null, geometry, i, 0, -extent);
      multiplay.views.arena.draw_line.call(null, geometry, i, 0, extent);
      multiplay.views.arena.draw_line.call(null, geometry, -extent, i, 0);
      multiplay.views.arena.draw_line.call(null, geometry, extent, i, 0);
      multiplay.views.arena.draw_line.call(null, geometry, i, -extent, 0);
      multiplay.views.arena.draw_line.call(null, geometry, i, extent, 0);
      var line_64787 = new THREE.Line(geometry, material);
      line_64787.type = THREE.LinePieces;
      container.add(line_64787);
      var G__64788 = seq__64783;
      var G__64789 = chunk__64784;
      var G__64790 = count__64785;
      var G__64791 = i__64786 + 1;
      seq__64783 = G__64788;
      chunk__64784 = G__64789;
      count__64785 = G__64790;
      i__64786 = G__64791;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__64783);
      if(temp__4092__auto__) {
        var seq__64783__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__64783__$1)) {
          var c__3625__auto__ = cljs.core.chunk_first.call(null, seq__64783__$1);
          var G__64792 = cljs.core.chunk_rest.call(null, seq__64783__$1);
          var G__64793 = c__3625__auto__;
          var G__64794 = cljs.core.count.call(null, c__3625__auto__);
          var G__64795 = 0;
          seq__64783 = G__64792;
          chunk__64784 = G__64793;
          count__64785 = G__64794;
          i__64786 = G__64795;
          continue
        }else {
          var i = cljs.core.first.call(null, seq__64783__$1);
          multiplay.views.arena.draw_line.call(null, geometry, 0, -extent, i);
          multiplay.views.arena.draw_line.call(null, geometry, 0, extent, i);
          multiplay.views.arena.draw_line.call(null, geometry, 0, i, -extent);
          multiplay.views.arena.draw_line.call(null, geometry, 0, i, extent);
          multiplay.views.arena.draw_line.call(null, geometry, -extent, 0, i);
          multiplay.views.arena.draw_line.call(null, geometry, extent, 0, i);
          multiplay.views.arena.draw_line.call(null, geometry, i, 0, -extent);
          multiplay.views.arena.draw_line.call(null, geometry, i, 0, extent);
          multiplay.views.arena.draw_line.call(null, geometry, -extent, i, 0);
          multiplay.views.arena.draw_line.call(null, geometry, extent, i, 0);
          multiplay.views.arena.draw_line.call(null, geometry, i, -extent, 0);
          multiplay.views.arena.draw_line.call(null, geometry, i, extent, 0);
          var line_64796 = new THREE.Line(geometry, material);
          line_64796.type = THREE.LinePieces;
          container.add(line_64796);
          var G__64797 = cljs.core.next.call(null, seq__64783__$1);
          var G__64798 = null;
          var G__64799 = 0;
          var G__64800 = 0;
          seq__64783 = G__64797;
          chunk__64784 = G__64798;
          count__64785 = G__64799;
          i__64786 = G__64800;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
multiplay.views.arena.remove_all = function remove_all(scene) {
  var seq__64805 = cljs.core.seq.call(null, scene.children);
  var chunk__64806 = null;
  var count__64807 = 0;
  var i__64808 = 0;
  while(true) {
    if(i__64808 < count__64807) {
      var child = cljs.core._nth.call(null, chunk__64806, i__64808);
      scene.remove(child);
      var G__64809 = seq__64805;
      var G__64810 = chunk__64806;
      var G__64811 = count__64807;
      var G__64812 = i__64808 + 1;
      seq__64805 = G__64809;
      chunk__64806 = G__64810;
      count__64807 = G__64811;
      i__64808 = G__64812;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__64805);
      if(temp__4092__auto__) {
        var seq__64805__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__64805__$1)) {
          var c__3625__auto__ = cljs.core.chunk_first.call(null, seq__64805__$1);
          var G__64813 = cljs.core.chunk_rest.call(null, seq__64805__$1);
          var G__64814 = c__3625__auto__;
          var G__64815 = cljs.core.count.call(null, c__3625__auto__);
          var G__64816 = 0;
          seq__64805 = G__64813;
          chunk__64806 = G__64814;
          count__64807 = G__64815;
          i__64808 = G__64816;
          continue
        }else {
          var child = cljs.core.first.call(null, seq__64805__$1);
          scene.remove(child);
          var G__64817 = cljs.core.next.call(null, seq__64805__$1);
          var G__64818 = null;
          var G__64819 = 0;
          var G__64820 = 0;
          seq__64805 = G__64817;
          chunk__64806 = G__64818;
          count__64807 = G__64819;
          i__64808 = G__64820;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
multiplay.views.arena.draw_3d_walls = function draw_3d_walls(container, walls) {
  var seq__64825 = cljs.core.seq.call(null, walls);
  var chunk__64826 = null;
  var count__64827 = 0;
  var i__64828 = 0;
  while(true) {
    if(i__64828 < count__64827) {
      var wall = cljs.core._nth.call(null, chunk__64826, i__64828);
      container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, wall), 0));
      var G__64829 = seq__64825;
      var G__64830 = chunk__64826;
      var G__64831 = count__64827;
      var G__64832 = i__64828 + 1;
      seq__64825 = G__64829;
      chunk__64826 = G__64830;
      count__64827 = G__64831;
      i__64828 = G__64832;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__64825);
      if(temp__4092__auto__) {
        var seq__64825__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__64825__$1)) {
          var c__3625__auto__ = cljs.core.chunk_first.call(null, seq__64825__$1);
          var G__64833 = cljs.core.chunk_rest.call(null, seq__64825__$1);
          var G__64834 = c__3625__auto__;
          var G__64835 = cljs.core.count.call(null, c__3625__auto__);
          var G__64836 = 0;
          seq__64825 = G__64833;
          chunk__64826 = G__64834;
          count__64827 = G__64835;
          i__64828 = G__64836;
          continue
        }else {
          var wall = cljs.core.first.call(null, seq__64825__$1);
          container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, wall), 0));
          var G__64837 = cljs.core.next.call(null, seq__64825__$1);
          var G__64838 = null;
          var G__64839 = 0;
          var G__64840 = 0;
          seq__64825 = G__64837;
          chunk__64826 = G__64838;
          count__64827 = G__64839;
          i__64828 = G__64840;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
multiplay.views.arena.draw_3d_apples = function draw_3d_apples(container, apples) {
  var seq__64845 = cljs.core.seq.call(null, apples);
  var chunk__64846 = null;
  var count__64847 = 0;
  var i__64848 = 0;
  while(true) {
    if(i__64848 < count__64847) {
      var apple = cljs.core._nth.call(null, chunk__64846, i__64848);
      container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, apple), 16711680));
      var G__64849 = seq__64845;
      var G__64850 = chunk__64846;
      var G__64851 = count__64847;
      var G__64852 = i__64848 + 1;
      seq__64845 = G__64849;
      chunk__64846 = G__64850;
      count__64847 = G__64851;
      i__64848 = G__64852;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__64845);
      if(temp__4092__auto__) {
        var seq__64845__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__64845__$1)) {
          var c__3625__auto__ = cljs.core.chunk_first.call(null, seq__64845__$1);
          var G__64853 = cljs.core.chunk_rest.call(null, seq__64845__$1);
          var G__64854 = c__3625__auto__;
          var G__64855 = cljs.core.count.call(null, c__3625__auto__);
          var G__64856 = 0;
          seq__64845 = G__64853;
          chunk__64846 = G__64854;
          count__64847 = G__64855;
          i__64848 = G__64856;
          continue
        }else {
          var apple = cljs.core.first.call(null, seq__64845__$1);
          container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, apple), 16711680));
          var G__64857 = cljs.core.next.call(null, seq__64845__$1);
          var G__64858 = null;
          var G__64859 = 0;
          var G__64860 = 0;
          seq__64845 = G__64857;
          chunk__64846 = G__64858;
          count__64847 = G__64859;
          i__64848 = G__64860;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
multiplay.views.arena.draw_3d_snakes = function draw_3d_snakes(container, snakes, player_id) {
  var seq__64873 = cljs.core.seq.call(null, snakes);
  var chunk__64878 = null;
  var count__64879 = 0;
  var i__64880 = 0;
  while(true) {
    if(i__64880 < count__64879) {
      var snake = cljs.core._nth.call(null, chunk__64878, i__64880);
      var seq__64881_64885 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "body", "body", 1016933652)).call(null, snake));
      var chunk__64882_64886 = null;
      var count__64883_64887 = 0;
      var i__64884_64888 = 0;
      while(true) {
        if(i__64884_64888 < count__64883_64887) {
          var voxel_64889 = cljs.core._nth.call(null, chunk__64882_64886, i__64884_64888);
          var color_64890 = cljs.core._EQ_.call(null, player_id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).call(null, snake)) ? 255 : 0;
          container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, voxel_64889), color_64890));
          var G__64891 = seq__64881_64885;
          var G__64892 = chunk__64882_64886;
          var G__64893 = count__64883_64887;
          var G__64894 = i__64884_64888 + 1;
          seq__64881_64885 = G__64891;
          chunk__64882_64886 = G__64892;
          count__64883_64887 = G__64893;
          i__64884_64888 = G__64894;
          continue
        }else {
          var temp__4092__auto___64895 = cljs.core.seq.call(null, seq__64881_64885);
          if(temp__4092__auto___64895) {
            var seq__64881_64896__$1 = temp__4092__auto___64895;
            if(cljs.core.chunked_seq_QMARK_.call(null, seq__64881_64896__$1)) {
              var c__3625__auto___64897 = cljs.core.chunk_first.call(null, seq__64881_64896__$1);
              var G__64898 = cljs.core.chunk_rest.call(null, seq__64881_64896__$1);
              var G__64899 = c__3625__auto___64897;
              var G__64900 = cljs.core.count.call(null, c__3625__auto___64897);
              var G__64901 = 0;
              seq__64881_64885 = G__64898;
              chunk__64882_64886 = G__64899;
              count__64883_64887 = G__64900;
              i__64884_64888 = G__64901;
              continue
            }else {
              var voxel_64902 = cljs.core.first.call(null, seq__64881_64896__$1);
              var color_64903 = cljs.core._EQ_.call(null, player_id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).call(null, snake)) ? 255 : 0;
              container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, voxel_64902), color_64903));
              var G__64904 = cljs.core.next.call(null, seq__64881_64896__$1);
              var G__64905 = null;
              var G__64906 = 0;
              var G__64907 = 0;
              seq__64881_64885 = G__64904;
              chunk__64882_64886 = G__64905;
              count__64883_64887 = G__64906;
              i__64884_64888 = G__64907;
              continue
            }
          }else {
          }
        }
        break
      }
      var G__64908 = seq__64873;
      var G__64909 = chunk__64878;
      var G__64910 = count__64879;
      var G__64911 = i__64880 + 1;
      seq__64873 = G__64908;
      chunk__64878 = G__64909;
      count__64879 = G__64910;
      i__64880 = G__64911;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__64873);
      if(temp__4092__auto__) {
        var seq__64873__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__64873__$1)) {
          var c__3625__auto__ = cljs.core.chunk_first.call(null, seq__64873__$1);
          var G__64912 = cljs.core.chunk_rest.call(null, seq__64873__$1);
          var G__64913 = c__3625__auto__;
          var G__64914 = cljs.core.count.call(null, c__3625__auto__);
          var G__64915 = 0;
          seq__64873 = G__64912;
          chunk__64878 = G__64913;
          count__64879 = G__64914;
          i__64880 = G__64915;
          continue
        }else {
          var snake = cljs.core.first.call(null, seq__64873__$1);
          var seq__64874_64916 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "body", "body", 1016933652)).call(null, snake));
          var chunk__64875_64917 = null;
          var count__64876_64918 = 0;
          var i__64877_64919 = 0;
          while(true) {
            if(i__64877_64919 < count__64876_64918) {
              var voxel_64920 = cljs.core._nth.call(null, chunk__64875_64917, i__64877_64919);
              var color_64921 = cljs.core._EQ_.call(null, player_id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).call(null, snake)) ? 255 : 0;
              container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, voxel_64920), color_64921));
              var G__64922 = seq__64874_64916;
              var G__64923 = chunk__64875_64917;
              var G__64924 = count__64876_64918;
              var G__64925 = i__64877_64919 + 1;
              seq__64874_64916 = G__64922;
              chunk__64875_64917 = G__64923;
              count__64876_64918 = G__64924;
              i__64877_64919 = G__64925;
              continue
            }else {
              var temp__4092__auto___64926__$1 = cljs.core.seq.call(null, seq__64874_64916);
              if(temp__4092__auto___64926__$1) {
                var seq__64874_64927__$1 = temp__4092__auto___64926__$1;
                if(cljs.core.chunked_seq_QMARK_.call(null, seq__64874_64927__$1)) {
                  var c__3625__auto___64928 = cljs.core.chunk_first.call(null, seq__64874_64927__$1);
                  var G__64929 = cljs.core.chunk_rest.call(null, seq__64874_64927__$1);
                  var G__64930 = c__3625__auto___64928;
                  var G__64931 = cljs.core.count.call(null, c__3625__auto___64928);
                  var G__64932 = 0;
                  seq__64874_64916 = G__64929;
                  chunk__64875_64917 = G__64930;
                  count__64876_64918 = G__64931;
                  i__64877_64919 = G__64932;
                  continue
                }else {
                  var voxel_64933 = cljs.core.first.call(null, seq__64874_64927__$1);
                  var color_64934 = cljs.core._EQ_.call(null, player_id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).call(null, snake)) ? 255 : 0;
                  container.add(multiplay.views.arena.make_voxel.call(null, multiplay.views.arena.to_3d_coords.call(null, voxel_64933), color_64934));
                  var G__64935 = cljs.core.next.call(null, seq__64874_64927__$1);
                  var G__64936 = null;
                  var G__64937 = 0;
                  var G__64938 = 0;
                  seq__64874_64916 = G__64935;
                  chunk__64875_64917 = G__64936;
                  count__64876_64918 = G__64937;
                  i__64877_64919 = G__64938;
                  continue
                }
              }else {
              }
            }
            break
          }
          var G__64939 = cljs.core.next.call(null, seq__64873__$1);
          var G__64940 = null;
          var G__64941 = 0;
          var G__64942 = 0;
          seq__64873 = G__64939;
          chunk__64878 = G__64940;
          count__64879 = G__64941;
          i__64880 = G__64942;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
multiplay.views.arena.vecs = cljs.core.PersistentVector.fromArray([new THREE.Vector3(0, 1, 0), new THREE.Vector3(1, 0, 0), new THREE.Vector3(0, 0, 1)], true);
multiplay.views.arena.update_rotation = function update_rotation(container, orientation) {
  var v = cljs.core.get.call(null, multiplay.views.arena.vecs, orientation);
  var quat = container.quaternion;
  var start = quat.clone();
  var end = (new THREE.Quaternion).setFromAxisAngle(v, 90 * (Math.PI / 180));
  var interpolator = cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "interpolant", "interpolant", 3298282440), 0], true));
  var update = function(v, quat, start, end, interpolator) {
    return function() {
      return THREE.Quaternion.slerp(start, end, quat, interpolator.interpolant)
    }
  }(v, quat, start, end, interpolator);
  var rot_forward = cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "interpolant", "interpolant", 3298282440), 1], true));
  var forward = (new TWEEN.Tween(interpolator)).to(rot_forward, 1E3).onUpdate(update).easing(TWEEN.Easing.Quintic.Out);
  return forward.start()
};
multiplay.views.arena.update_3d_view = function update_3d_view(container, game_state) {
  multiplay.views.arena.draw_3d_snakes.call(null, container, (new cljs.core.Keyword(null, "snakes", "snakes", 4410839717)).call(null, game_state), (new cljs.core.Keyword(null, "player-id", "player-id", 3436779257)).call(null, game_state));
  multiplay.views.arena.draw_3d_apples.call(null, container, (new cljs.core.Keyword(null, "apples", "apples", 3897809867)).call(null, game_state));
  var player = cljs.core.first.call(null, cljs.core.filter.call(null, function(p1__64943_SHARP_) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "id", "id", 1013907597)).call(null, p1__64943_SHARP_), (new cljs.core.Keyword(null, "player-id", "player-id", 3436779257)).call(null, game_state))
  }, (new cljs.core.Keyword(null, "snakes", "snakes", 4410839717)).call(null, game_state)));
  return multiplay.views.arena.update_rotation.call(null, container, (new cljs.core.Keyword(null, "orientation", "orientation", 3869370690)).call(null, player))
};
multiplay.views.arena.arena = function() {
  var obj = new THREE.Object3D;
  obj.useQuaternion = true;
  return obj
}();
multiplay.views.arena.render = function render() {
  console.log("Rendering");
  return multiplay.views.arena.renderer.render(multiplay.views.arena.scene, multiplay.views.arena.camera)
};
multiplay.views.arena.create_BANG_ = function create_BANG_() {
  var c = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
  var container = multiplay.views.arena.create_context.call(null);
  document.body.appendChild(container);
  multiplay.views.arena.scene.add(multiplay.views.arena.arena);
  multiplay.views.arena.animate.call(null);
  var c__5150__auto___64990 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5151__auto__ = function() {
      var switch__5100__auto__ = function(state_64980) {
        var state_val_64981 = state_64980[1];
        if(state_val_64981 === 5) {
          var inst_64975 = state_64980[2];
          var inst_64969 = inst_64975;
          var state_64980__$1 = function() {
            var statearr_64982 = state_64980;
            statearr_64982[5] = inst_64969;
            return statearr_64982
          }();
          var statearr_64983_64991 = state_64980__$1;
          statearr_64983_64991[2] = null;
          statearr_64983_64991[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_64981 === 4) {
            var inst_64978 = state_64980[2];
            var state_64980__$1 = state_64980;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_64980__$1, inst_64978)
          }else {
            if(state_val_64981 === 3) {
              var inst_64969 = state_64980[5];
              var inst_64971 = multiplay.views.arena.remove_all.call(null, multiplay.views.arena.arena);
              var inst_64972 = multiplay.views.arena.draw_grid.call(null, multiplay.views.arena.arena, multiplay.views.arena.scene);
              var inst_64973 = multiplay.views.arena.update_3d_view.call(null, multiplay.views.arena.arena, inst_64969);
              var state_64980__$1 = function() {
                var statearr_64984 = state_64980;
                statearr_64984[6] = inst_64971;
                statearr_64984[7] = inst_64972;
                statearr_64984[8] = inst_64973;
                return statearr_64984
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_64980__$1, 5, c)
            }else {
              if(state_val_64981 === 2) {
                var inst_64968 = state_64980[2];
                var inst_64969 = inst_64968;
                var state_64980__$1 = function() {
                  var statearr_64985 = state_64980;
                  statearr_64985[5] = inst_64969;
                  return statearr_64985
                }();
                var statearr_64986_64992 = state_64980__$1;
                statearr_64986_64992[2] = null;
                statearr_64986_64992[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_64981 === 1) {
                  var state_64980__$1 = state_64980;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_64980__$1, 2, c)
                }else {
                  return null
                }
              }
            }
          }
        }
      };
      return function(switch__5100__auto__) {
        return function() {
          var state_machine__5101__auto__ = null;
          var state_machine__5101__auto____0 = function() {
            var statearr_64988 = new Array(9);
            statearr_64988[0] = state_machine__5101__auto__;
            statearr_64988[1] = 1;
            return statearr_64988
          };
          var state_machine__5101__auto____1 = function(state_64980) {
            while(true) {
              var result__5102__auto__ = switch__5100__auto__.call(null, state_64980);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5102__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5102__auto__
              }
              break
            }
          };
          state_machine__5101__auto__ = function(state_64980) {
            switch(arguments.length) {
              case 0:
                return state_machine__5101__auto____0.call(this);
              case 1:
                return state_machine__5101__auto____1.call(this, state_64980)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5101__auto____0;
          state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5101__auto____1;
          return state_machine__5101__auto__
        }()
      }(switch__5100__auto__)
    }();
    var state__5152__auto__ = function() {
      var statearr_64989 = f__5151__auto__.call(null);
      statearr_64989[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5150__auto___64990;
      return statearr_64989
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5152__auto__)
  });
  return c
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if(typeof col.getCount == "function") {
    return col.getCount()
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return col.length
  }
  return goog.object.getCount(col)
};
goog.structs.getValues = function(col) {
  if(typeof col.getValues == "function") {
    return col.getValues()
  }
  if(goog.isString(col)) {
    return col.split("")
  }
  if(goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for(var i = 0;i < l;i++) {
      rv.push(col[i])
    }
    return rv
  }
  return goog.object.getValues(col)
};
goog.structs.getKeys = function(col) {
  if(typeof col.getKeys == "function") {
    return col.getKeys()
  }
  if(typeof col.getValues == "function") {
    return undefined
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for(var i = 0;i < l;i++) {
      rv.push(i)
    }
    return rv
  }
  return goog.object.getKeys(col)
};
goog.structs.contains = function(col, val) {
  if(typeof col.contains == "function") {
    return col.contains(val)
  }
  if(typeof col.containsValue == "function") {
    return col.containsValue(val)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val)
  }
  return goog.object.containsValue(col, val)
};
goog.structs.isEmpty = function(col) {
  if(typeof col.isEmpty == "function") {
    return col.isEmpty()
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col))
  }
  return goog.object.isEmpty(col)
};
goog.structs.clear = function(col) {
  if(typeof col.clear == "function") {
    col.clear()
  }else {
    if(goog.isArrayLike(col)) {
      goog.array.clear((col))
    }else {
      goog.object.clear(col)
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if(typeof col.forEach == "function") {
    col.forEach(f, opt_obj)
  }else {
    if(goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj)
    }else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for(var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col)
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if(typeof col.filter == "function") {
    return col.filter(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj)
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if(keys) {
    rv = {};
    for(var i = 0;i < l;i++) {
      if(f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i]
      }
    }
  }else {
    rv = [];
    for(var i = 0;i < l;i++) {
      if(f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i])
      }
    }
  }
  return rv
};
goog.structs.map = function(col, f, opt_obj) {
  if(typeof col.map == "function") {
    return col.map(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj)
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if(keys) {
    rv = {};
    for(var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col)
    }
  }else {
    rv = [];
    for(var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col)
    }
  }
  return rv
};
goog.structs.some = function(col, f, opt_obj) {
  if(typeof col.some == "function") {
    return col.some(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj)
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    if(f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true
    }
  }
  return false
};
goog.structs.every = function(col, f, opt_obj) {
  if(typeof col.every == "function") {
    return col.every(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj)
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    if(!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false
    }
  }
  return true
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"]
}else {
  goog.iter.StopIteration = Error("StopIteration")
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this
};
goog.iter.toIterator = function(iterable) {
  if(iterable instanceof goog.iter.Iterator) {
    return iterable
  }
  if(typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false)
  }
  if(goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while(true) {
        if(i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if(!(i in iterable)) {
          i++;
          continue
        }
        return iterable[i++]
      }
    };
    return newIter
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if(goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj)
    }catch(ex) {
      if(ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while(true) {
        f.call(opt_obj, iterable.next(), undefined, iterable)
      }
    }catch(ex) {
      if(ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while(true) {
      var val = iterator.next();
      if(f.call(opt_obj, val, undefined, iterator)) {
        return val
      }
    }
  };
  return newIter
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if(arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop
  }
  if(step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if(step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv
  };
  return newIter
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator)
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while(true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator)
    }
  };
  return newIter
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val)
  });
  return rval
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while(true) {
      if(f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while(true) {
      if(!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if(i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next()
    }catch(ex) {
      if(ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      }else {
        i++;
        return this.next()
      }
    }
  };
  return newIter
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while(true) {
      var val = iterator.next();
      if(dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue
      }else {
        dropping = false
      }
      return val
    }
  };
  return newIter
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while(true) {
      if(taking) {
        var val = iterator.next();
        if(f.call(opt_obj, val, undefined, iterator)) {
          return val
        }else {
          taking = false
        }
      }else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter
};
goog.iter.toArray = function(iterable) {
  if(goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable))
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val)
  });
  return array
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while(true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if(val1 != val2) {
        return false
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }else {
      if(b1 && !b2) {
        return false
      }
      if(!b2) {
        try {
          val2 = iterable2.next();
          return false
        }catch(ex1) {
          if(ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true
        }
      }
    }
  }
  return false
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next()
  }catch(e) {
    if(e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length
  });
  if(someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if(indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex]
      });
      for(var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if(indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break
        }
        if(i == 0) {
          indicies = null;
          break
        }
        indicies[i] = 0
      }
      return retVal
    }
    throw goog.iter.StopIteration;
  };
  return iter
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if(!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement
      }catch(e) {
        if(e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement
  };
  return iter
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if(argLength > 1) {
    if(argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for(var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1])
    }
  }else {
    if(opt_map) {
      this.addAll((opt_map))
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key])
  }
  return rv
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat())
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key)
};
goog.structs.Map.prototype.containsValue = function(val) {
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if(goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true
    }
  }
  return false
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if(this === otherMap) {
    return true
  }
  if(this.count_ != otherMap.getCount()) {
    return false
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for(var key, i = 0;key = this.keys_[i];i++) {
    if(!equalityFn(this.get(key), otherMap.get(key))) {
      return false
    }
  }
  return true
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0
};
goog.structs.Map.prototype.remove = function(key) {
  if(goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if(this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_()
    }
    return true
  }
  return false
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if(this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while(srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if(goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key
      }
      srcIndex++
    }
    this.keys_.length = destIndex
  }
  if(this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while(srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if(!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1
      }
      srcIndex++
    }
    this.keys_.length = destIndex
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if(goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key]
  }
  return opt_val
};
goog.structs.Map.prototype.set = function(key, value) {
  if(!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++
  }
  this.map_[key] = value
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if(map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues()
  }else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map)
  }
  for(var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i])
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this)
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key)
  }
  return transposed
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key]
  }
  return obj
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true)
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false)
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while(true) {
      if(version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if(i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key]
    }
  };
  return newIter
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if(opt_values) {
    this.addAll(opt_values)
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if(type == "object" && val || type == "function") {
    return"o" + goog.getUid((val))
  }else {
    return type.substr(0, 1) + val
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount()
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element)
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    this.add(values[i])
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    this.remove(values[i])
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element))
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear()
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty()
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element))
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this)
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for(var i = 0;i < values.length;i++) {
    var value = values[i];
    if(this.contains(value)) {
      result.add(value)
    }
  }
  return result
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues()
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this)
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col)
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if(this.getCount() > colCount) {
    return false
  }
  if(!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col)
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value)
  })
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false)
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
cljs.reader.PushbackReader = {};
cljs.reader.read_char = function read_char(reader) {
  if(function() {
    var and__3941__auto__ = reader;
    if(and__3941__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1
    }else {
      return and__3941__auto__
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader)
  }else {
    var x__3469__auto__ = reader == null ? null : reader;
    return function() {
      var or__3943__auto__ = cljs.reader.read_char[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.read_char["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader)
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if(function() {
    var and__3941__auto__ = reader;
    if(and__3941__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2
    }else {
      return and__3941__auto__
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch)
  }else {
    var x__3469__auto__ = reader == null ? null : reader;
    return function() {
      var or__3943__auto__ = cljs.reader.unread[goog.typeOf(x__3469__auto__)];
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.unread["_"];
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch)
  }
};
goog.provide("cljs.reader.StringPushbackReader");
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3410__auto__, writer__3411__auto__, opt__3412__auto__) {
  return cljs.core._write.call(null, writer__3411__auto__, "cljs.reader/StringPushbackReader")
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  if(self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx]
  }else {
    return self__.buffer.pop()
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  return self__.buffer.push(ch)
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx)
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1)
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3943__auto__ = goog.string.isBreakingWhitespace(ch);
  if(cljs.core.truth_(or__3943__auto__)) {
    return or__3943__auto__
  }else {
    return"," === ch
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch)
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return";" === ch
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  var or__3943__auto__ = cljs.reader.numeric_QMARK_.call(null, initch);
  if(or__3943__auto__) {
    return or__3943__auto__
  }else {
    var and__3941__auto__ = function() {
      var or__3943__auto____$1 = "+" === initch;
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        return"-" === initch
      }
    }();
    if(cljs.core.truth_(and__3941__auto__)) {
      return cljs.reader.numeric_QMARK_.call(null, function() {
        var next_ch = cljs.reader.read_char.call(null, reader);
        cljs.reader.unread.call(null, reader, next_ch);
        return next_ch
      }())
    }else {
      return and__3941__auto__
    }
  }
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if(arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return reader_error__delegate.call(this, rdr, msg)
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__10534) {
    var rdr = cljs.core.first(arglist__10534);
    var msg = cljs.core.rest(arglist__10534);
    return reader_error__delegate(rdr, msg)
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3941__auto__ = !(ch === "#");
  if(and__3941__auto__) {
    var and__3941__auto____$1 = !(ch === "'");
    if(and__3941__auto____$1) {
      var and__3941__auto____$2 = !(ch === ":");
      if(and__3941__auto____$2) {
        return cljs.reader.macros.call(null, ch)
      }else {
        return and__3941__auto____$2
      }
    }else {
      return and__3941__auto____$1
    }
  }else {
    return and__3941__auto__
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while(true) {
    if(function() {
      var or__3943__auto__ = ch == null;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return cljs.reader.macro_terminating_QMARK_.call(null, ch)
        }
      }
    }()) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString()
    }else {
      var G__10535 = function() {
        sb.append(ch);
        return sb
      }();
      var G__10536 = cljs.reader.read_char.call(null, rdr);
      sb = G__10535;
      ch = G__10536;
      continue
    }
    break
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while(true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if(function() {
      var or__3943__auto__ = ch === "n";
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = ch === "r";
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return ch == null
        }
      }
    }()) {
      return reader
    }else {
      continue
    }
    break
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(matches.length === 1) {
      return matches[0]
    }else {
      return matches
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if(!function() {
    var or__3943__auto__ = group3 == null;
    if(or__3943__auto__) {
      return or__3943__auto__
    }else {
      return group3.length < 1
    }
  }()) {
    return 0
  }else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if(n == null) {
      return null
    }else {
      return negate * parseInt(n, radix)
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator)
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s)
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if(function() {
    var and__3941__auto__ = !(matches == null);
    if(and__3941__auto__) {
      return matches[0] === s
    }else {
      return and__3941__auto__
    }
  }()) {
    if(matches.length === 1) {
      return matches[0]
    }else {
      return matches
    }
  }else {
    return null
  }
};
cljs.reader.match_number = function match_number(s) {
  if(cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s)
  }else {
    if(cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s)
    }else {
      if(cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s)
      }else {
        return null
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if(c === "t") {
    return"\t"
  }else {
    if(c === "r") {
      return"\r"
    }else {
      if(c === "n") {
        return"\n"
      }else {
        if(c === "\\") {
          return"\\"
        }else {
          if(c === '"') {
            return'"'
          }else {
            if(c === "b") {
              return"\b"
            }else {
              if(c === "f") {
                return"\f"
              }else {
                if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null
                }else {
                  return null
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString()
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString()
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if(cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str
  }else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str)
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code)
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if(cljs.core.truth_(mapresult)) {
    return mapresult
  }else {
    if(ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)))
    }else {
      if(ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)))
      }else {
        if(cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch)
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while(true) {
    if(cljs.core.truth_(pred.call(null, ch))) {
      var G__10537 = cljs.reader.read_char.call(null, rdr);
      ch = G__10537;
      continue
    }else {
      return ch
    }
    break
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while(true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if(cljs.core.truth_(ch)) {
    }else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading")
    }
    if(delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a)
    }else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__10538 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__10538;
        continue
      }else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__10539 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__10539;
        continue
      }
    }
    break
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet")
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if(cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _)
  }else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if(cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj
    }else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch)
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch)
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true))
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true)
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if(cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms")
  }else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l)
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while(true) {
    if(cljs.core.truth_(function() {
      var or__3943__auto__ = ch == null;
      if(or__3943__auto__) {
        return or__3943__auto__
      }else {
        var or__3943__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if(or__3943__auto____$1) {
          return or__3943__auto____$1
        }else {
          return cljs.reader.macros.call(null, ch)
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3943__auto__ = cljs.reader.match_number.call(null, s);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]")
      }
    }else {
      var G__10540 = function() {
        buffer.append(ch);
        return buffer
      }();
      var G__10541 = cljs.reader.read_char.call(null, reader);
      buffer = G__10540;
      ch = G__10541;
      continue
    }
    break
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while(true) {
    if(ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading")
    }else {
      if("\\" === ch) {
        var G__10542 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer
        }();
        var G__10543 = cljs.reader.read_char.call(null, reader);
        buffer = G__10542;
        ch = G__10543;
        continue
      }else {
        if('"' === ch) {
          return buffer.toString()
        }else {
          if(new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__10544 = function() {
              buffer.append(ch);
              return buffer
            }();
            var G__10545 = cljs.reader.read_char.call(null, reader);
            buffer = G__10544;
            ch = G__10545;
            continue
          }else {
            return null
          }
        }
      }
    }
    break
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if(t === "nil") {
    return null
  }else {
    if(t === "true") {
      return true
    }else {
      if(t === "false") {
        return false
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if(cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length))
  }else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token))
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if(cljs.core.truth_(function() {
    var or__3943__auto__ = function() {
      var and__3941__auto__ = !(void 0 === ns);
      if(and__3941__auto__) {
        return ns.substring(ns.length - 2, ns.length) === ":/"
      }else {
        return and__3941__auto__
      }
    }();
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      var or__3943__auto____$1 = name[name.length - 1] === ":";
      if(or__3943__auto____$1) {
        return or__3943__auto____$1
      }else {
        return!(token__$1.indexOf("::", 1) === -1)
      }
    }
  }())) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1)
  }else {
    if(function() {
      var and__3941__auto__ = !(ns == null);
      if(and__3941__auto__) {
        return ns.length > 0
      }else {
        return and__3941__auto__
      }
    }()) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name)
    }else {
      return cljs.core.keyword.call(null, token__$1)
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if(f instanceof cljs.core.Symbol) {
    return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], true)
  }else {
    if(typeof f === "string") {
      return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], true)
    }else {
      if(f instanceof cljs.core.Keyword) {
        return cljs.core.PersistentArrayMap.fromArray([f, true], true)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f
        }else {
          return null
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core.list.call(null, sym, cljs.reader.read.call(null, rdr, true, null, true))
  }
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg)
  }
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if(cljs.core.map_QMARK_.call(null, m)) {
  }else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map")
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if(function() {
    var G__10547 = o;
    if(G__10547) {
      if(function() {
        var or__3943__auto__ = G__10547.cljs$lang$protocol_mask$partition0$ & 262144;
        if(or__3943__auto__) {
          return or__3943__auto__
        }else {
          return G__10547.cljs$core$IWithMeta$
        }
      }()) {
        return true
      }else {
        if(!G__10547.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IWithMeta, G__10547)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IWithMeta, G__10547)
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m))
  }else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas")
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true))
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch))
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr
};
cljs.reader.macros = function macros(c) {
  if(c === '"') {
    return cljs.reader.read_string_STAR_
  }else {
    if(c === ":") {
      return cljs.reader.read_keyword
    }else {
      if(c === ";") {
        return cljs.reader.not_implemented
      }else {
        if(c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null))
        }else {
          if(c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null))
          }else {
            if(c === "^") {
              return cljs.reader.read_meta
            }else {
              if(c === "`") {
                return cljs.reader.not_implemented
              }else {
                if(c === "~") {
                  return cljs.reader.not_implemented
                }else {
                  if(c === "(") {
                    return cljs.reader.read_list
                  }else {
                    if(c === ")") {
                      return cljs.reader.read_unmatched_delimiter
                    }else {
                      if(c === "[") {
                        return cljs.reader.read_vector
                      }else {
                        if(c === "]") {
                          return cljs.reader.read_unmatched_delimiter
                        }else {
                          if(c === "{") {
                            return cljs.reader.read_map
                          }else {
                            if(c === "}") {
                              return cljs.reader.read_unmatched_delimiter
                            }else {
                              if(c === "\\") {
                                return cljs.reader.read_char
                              }else {
                                if(c === "#") {
                                  return cljs.reader.read_dispatch
                                }else {
                                  if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null
                                  }else {
                                    return null
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if(s === "{") {
    return cljs.reader.read_set
  }else {
    if(s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form")
    }else {
      if(s === '"') {
        return cljs.reader.read_regex
      }else {
        if(s === "!") {
          return cljs.reader.read_comment
        }else {
          if(s === "_") {
            return cljs.reader.read_discard
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while(true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if(ch == null) {
      if(cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading")
      }else {
        return sentinel
      }
    }else {
      if(cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__10548 = reader;
        var G__10549 = eof_is_error;
        var G__10550 = sentinel;
        var G__10551 = is_recursive;
        reader = G__10548;
        eof_is_error = G__10549;
        sentinel = G__10550;
        is_recursive = G__10551;
        continue
      }else {
        if(cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__10552 = cljs.reader.read_comment.call(null, reader, ch);
          var G__10553 = eof_is_error;
          var G__10554 = sentinel;
          var G__10555 = is_recursive;
          reader = G__10552;
          eof_is_error = G__10553;
          sentinel = G__10554;
          is_recursive = G__10555;
          continue
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if(res === reader) {
              var G__10556 = reader;
              var G__10557 = eof_is_error;
              var G__10558 = sentinel;
              var G__10559 = is_recursive;
              reader = G__10556;
              eof_is_error = G__10557;
              sentinel = G__10558;
              is_recursive = G__10559;
              continue
            }else {
              return res
            }
          }else {
            return null
          }
        }
      }
    }
    break
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false)
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if(cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s
  }else {
    if(width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while(true) {
          if(b.getLength() < width) {
            var G__10560 = b.append("0");
            b = G__10560;
            continue
          }else {
            return b.toString()
          }
          break
        }
      }else {
        return null
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div))
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  var and__3941__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if(cljs.core.truth_(and__3941__auto__)) {
    var or__3943__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if(cljs.core.truth_(or__3943__auto__)) {
      return or__3943__auto__
    }else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400)
    }
  }else {
    return and__3941__auto__
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = cljs.core.PersistentVector.fromArray([null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], true);
  var dim_leap = cljs.core.PersistentVector.fromArray([null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], true);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month)
  }
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if(cljs.core.not.call(null, isNaN(n))) {
    return n
  }else {
    return null
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if(function() {
    var and__3941__auto__ = low <= n;
    if(and__3941__auto__) {
      return n <= high
    }else {
      return and__3941__auto__
    }
  }()) {
  }else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""))
  }
  return n
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__10562 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__10562, 0, null);
  var years = cljs.core.nth.call(null, vec__10562, 1, null);
  var months = cljs.core.nth.call(null, vec__10562, 2, null);
  var days = cljs.core.nth.call(null, vec__10562, 3, null);
  var hours = cljs.core.nth.call(null, vec__10562, 4, null);
  var minutes = cljs.core.nth.call(null, vec__10562, 5, null);
  var seconds = cljs.core.nth.call(null, vec__10562, 6, null);
  var fraction = cljs.core.nth.call(null, vec__10562, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__10562, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__10562, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__10562, 10, null);
  var v = vec__10562;
  if(cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""))
  }else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, months);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 1
      }
    }();
    var days__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, days);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 1
      }
    }();
    var hours__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, hours);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 0
      }
    }();
    var minutes__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, minutes);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 0
      }
    }();
    var seconds__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, seconds);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 0
      }
    }();
    var fraction__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 0
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 0
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3943__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if(cljs.core.truth_(or__3943__auto__)) {
        return or__3943__auto__
      }else {
        return 0
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return cljs.core.PersistentVector.fromArray([years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), cljs.reader.check.call(null, 0, minutes__$1, 
    59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], true)
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var vec__10564 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__10564, 0, null);
    var months = cljs.core.nth.call(null, vec__10564, 1, null);
    var days = cljs.core.nth.call(null, vec__10564, 2, null);
    var hours = cljs.core.nth.call(null, vec__10564, 3, null);
    var minutes = cljs.core.nth.call(null, vec__10564, 4, null);
    var seconds = cljs.core.nth.call(null, vec__10564, 5, null);
    var ms = cljs.core.nth.call(null, vec__10564, 6, null);
    var offset = cljs.core.nth.call(null, vec__10564, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3)
  }else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""))
  }
};
cljs.reader.read_date = function read_date(s) {
  if(typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s)
  }else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.")
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if(cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems)
  }else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.")
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if(typeof uuid === "string") {
    return new cljs.core.UUID(uuid)
  }else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.")
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.fromArray(["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue], true));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if(cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false))
  }else {
    if(cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false))
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))))
      }else {
        return null
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f
  });
  return old_parser
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null
  });
  return old_parser
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if(goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget)
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope)
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope)
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if(this.reallyDisposed_) {
      return true
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if(ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for(;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop")
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree)
  }else {
    return goog.events.dispatchEvent(this, e)
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if(goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true
  }else {
    goog.events.removeAll(this)
  }
  this.parentEventTarget_ = null
};
if(goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope)
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope)
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if(index > -1) {
      listenerObj = listenerArray[index];
      if(!callOnce) {
        listenerObj.callOnce = false
      }
      return listenerObj
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if(!(type in this.eventTargetListeners_)) {
      return false
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if(index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index)
    }
    return false
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if(!(type in this.eventTargetListeners_)) {
      return false
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if(removed) {
      goog.events.cleanUp(key);
      key.removed = true
    }
    return removed
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for(var type in this.eventTargetListeners_) {
      if(!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for(var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true
        }
        listenerArray.length = 0
      }
    }
    return count
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if(!(type in this.eventTargetListeners_)) {
      return true
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for(var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if(listener && !listener.removed && listener.capture == capture) {
        if(listener.callOnce) {
          this.unlistenByKey(listener)
        }
        rv = listener.handleEvent(eventObject) !== false && rv
      }
    }
    return rv && eventObject.returnValue_ != false
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if(listenerArray) {
      for(var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if(listenerObj.capture == capture) {
          rv.push(listenerObj)
        }
      }
    }
    return rv
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if(listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope)
    }
    return i > -1 ? listenerArray[i] : null
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for(var i = 0;i < listenersArray.length;++i) {
        if((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true
        }
      }
      return false
    })
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if(goog.isString(e)) {
      e = new goog.events.Event(e, target)
    }else {
      if(!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent)
      }else {
        e.target = e.target || target
      }
    }
    var rv = true, currentTarget;
    if(opt_ancestorsTree) {
      for(var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv
      }
    }
    if(!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if(!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv
      }
    }
    if(opt_ancestorsTree) {
      for(i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv
      }
    }
    return rv
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for(var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if(listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
        return i
      }
    }
    return-1
  }
}
;goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if(goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal
  }
  target.onerror = function(message, url, line) {
    if(oldErrorHandler) {
      oldErrorHandler(message, url, line)
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal
  }
};
goog.debug.expose = function(obj, opt_showFn) {
  if(typeof obj == "undefined") {
    return"undefined"
  }
  if(obj == null) {
    return"NULL"
  }
  var str = [];
  for(var x in obj) {
    if(!opt_showFn && goog.isFunction(obj[x])) {
      continue
    }
    var s = x + " \x3d ";
    try {
      s += obj[x]
    }catch(e) {
      s += "*** " + e + " ***"
    }
    str.push(s)
  }
  return str.join("\n")
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space)
    };
    try {
      if(!goog.isDef(obj)) {
        str.push("undefined")
      }else {
        if(goog.isNull(obj)) {
          str.push("NULL")
        }else {
          if(goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"')
          }else {
            if(goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)))
            }else {
              if(goog.isObject(obj)) {
                if(previous.contains(obj)) {
                  str.push("*** reference loop detected ***")
                }else {
                  previous.add(obj);
                  str.push("{");
                  for(var x in obj) {
                    if(!opt_showFn && goog.isFunction(obj[x])) {
                      continue
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace)
                  }
                  str.push("\n" + space + "}")
                }
              }else {
                str.push(obj)
              }
            }
          }
        }
      }
    }catch(e) {
      str.push("*** " + e + " ***")
    }
  };
  helper(obj, "");
  return str.join("")
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for(var i = 0;i < arr.length;i++) {
    if(goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]))
    }else {
      str.push(arr[i])
    }
  }
  return"[ " + str.join(", ") + " ]"
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error
  }catch(e2) {
    return"Exception trying to expose exception! You win, we lose. " + e2
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if(goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"}
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available"
  }catch(e) {
    lineNumber = "Not available";
    threwError = true
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href
  }catch(e) {
    fileName = "Not available";
    threwError = true
  }
  if(threwError || !err.lineNumber || !err.fileName || !err.stack) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"}
  }
  return err
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if(!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller)
  }
  if(opt_message) {
    var x = 0;
    while(error["message" + x]) {
      ++x
    }
    error["message" + x] = String(opt_message)
  }
  return error
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while(fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller
    }catch(e) {
      sb.push("[exception trying to get caller]\n");
      break
    }
    depth++;
    if(depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break
    }
  }
  if(opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]")
  }else {
    sb.push("[end]")
  }
  return sb.join("")
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, [])
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if(goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]")
  }else {
    if(fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for(var i = 0;i < args.length;i++) {
        if(i > 0) {
          sb.push(", ")
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break
        }
        if(argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "..."
        }
        sb.push(argDesc)
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited))
      }catch(e) {
        sb.push("[exception trying to get caller]\n")
      }
    }else {
      if(fn) {
        sb.push("[...long stack...]")
      }else {
        sb.push("[end]")
      }
    }
  }
  return sb.join("")
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver
};
goog.debug.getFunctionName = function(fn) {
  if(goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn]
  }
  if(goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if(name) {
      goog.debug.fnNameCache_[fn] = name;
      return name
    }
  }
  var functionSource = String(fn);
  if(!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if(matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method
    }else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]"
    }
  }
  return goog.debug.fnNameCache_[functionSource]
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]")
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now()
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if(this.timer_ && this.enabled) {
    this.stop();
    this.start()
  }else {
    if(this.timer_) {
      this.stop()
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if(this.enabled) {
    var elapsed = goog.now() - this.last_;
    if(elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return
    }
    this.dispatchTick();
    if(this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now()
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK)
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if(!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now()
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if(this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if(goog.isFunction(listener)) {
    if(opt_handler) {
      listener = goog.bind(listener, opt_handler)
    }
  }else {
    if(listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener)
    }else {
      throw Error("Invalid listener argument");
    }
  }
  if(opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1
  }else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0)
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId)
};
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber)
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if(goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear()
};
goog.debug.LogBuffer.getInstance = function() {
  if(!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer
  }
  return goog.debug.LogBuffer.instance_
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if(this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName)
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if(!buffer[0]) {
    return
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]))
  }while(i != curIndex)
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if(!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for(var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if(!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_()
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if(!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_()
  }
  if(value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value]
  }
  for(var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if(level.value <= value) {
      return level
    }
  }
  return null
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name)
};
goog.debug.Logger.logToProfilers = function(msg) {
  if(goog.global["console"]) {
    if(goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg)
    }else {
      if(goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg)
      }
    }
  }
  if(goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg)
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    if(!this.handlers_) {
      this.handlers_ = []
    }
    this.handlers_.push(handler)
  }else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler)
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler)
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_
};
goog.debug.Logger.prototype.getChildren = function() {
  if(!this.children_) {
    this.children_ = {}
  }
  return this.children_
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level
  }else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if(!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_
  }
  if(this.level_) {
    return this.level_
  }
  if(this.parent_) {
    return this.parent_.getEffectiveLevel()
  }
  goog.asserts.fail("Root logger has no level set.");
  return null
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if(this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception))
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if(goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  }else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_)
  }
  if(opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller))
  }
  return logRecord
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception)
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception)
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception)
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception)
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception)
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception)
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception)
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception)
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if(this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord)
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while(target) {
      target.callPublish_(logRecord);
      target = target.getParent()
    }
  }else {
    for(var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord)
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if(this.handlers_) {
    for(var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord)
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if(!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG)
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_)
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name)
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")")
  }
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger)
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger
};
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.base(this);
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_)
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_)
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_)
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if(this.protocol_) {
    this.logger_.info("Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_)
  }else {
    this.logger_.info("Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_)
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this)
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if(this.webSocket_) {
    this.logger_.info("Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message)
};
goog.net.WebSocket.prototype.isOpen = function() {
  return!!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  this.logger_.info("WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_)
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  this.logger_.info("The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if(this.closeExpected_) {
    this.logger_.info("The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined
  }else {
    this.logger_.severe("The WebSocket disconnected unexpectedly: " + event.data);
    if(this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      this.logger_.info("Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_)
    }
  }
  this.closeExpected_ = false
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = (event.data);
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message))
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  this.logger_.severe("An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data))
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if(goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_)
  }
  this.reconnectTimer_ = null
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.close()
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.base(this, goog.net.WebSocket.EventType.MESSAGE);
  this.message = message
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.base(this, goog.net.WebSocket.EventType.ERROR);
  this.data = data
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_)
});
goog.provide("multiplay.async.websocket");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("goog.net.WebSocket.EventType");
goog.require("goog.net.WebSocket");
goog.require("goog.events");
goog.require("cljs.core.async");
multiplay.async.websocket.connect_BANG_ = function connect_BANG_(url) {
  var ws = new goog.net.WebSocket;
  var ws_send = cljs.core.async.chan.call(null);
  var ws_receive = cljs.core.async.chan.call(null);
  goog.events.listen(ws, goog.net.WebSocket.EventType.OPENED, function(e) {
    return cljs.core.async.put_BANG_.call(null, ws_receive, cljs.core.PersistentVector.fromArray([new cljs.core.Keyword(null, "opened", "opened", 4298292187), e], true))
  });
  goog.events.listen(ws, goog.net.WebSocket.EventType.CLOSED, function(e) {
    return cljs.core.async.put_BANG_.call(null, ws_receive, cljs.core.PersistentVector.fromArray([new cljs.core.Keyword(null, "closed", "closed", 3951351006), e], true))
  });
  goog.events.listen(ws, goog.net.WebSocket.EventType.MESSAGE, function(e) {
    return cljs.core.async.put_BANG_.call(null, ws_receive, cljs.core.PersistentVector.fromArray([new cljs.core.Keyword(null, "message", "message", 1968829305), e.message], true))
  });
  goog.events.listen(ws, goog.net.WebSocket.EventType.ERROR, function(e) {
    return cljs.core.async.put_BANG_.call(null, ws_receive, cljs.core.PersistentVector.fromArray([new cljs.core.Keyword(null, "error", "error", 1110689146), e], true))
  });
  ws.open(url);
  var c__5125__auto___6949 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5126__auto__ = function() {
      var switch__5075__auto__ = function(state_6935) {
        var state_val_6936 = state_6935[1];
        if(state_val_6936 === 8) {
          var inst_6927 = state_6935[2];
          var inst_6922 = inst_6927;
          var state_6935__$1 = function() {
            var statearr_6937 = state_6935;
            statearr_6937[5] = inst_6922;
            return statearr_6937
          }();
          var statearr_6938_6950 = state_6935__$1;
          statearr_6938_6950[2] = null;
          statearr_6938_6950[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_6936 === 7) {
            var inst_6931 = state_6935[2];
            var state_6935__$1 = state_6935;
            var statearr_6939_6951 = state_6935__$1;
            statearr_6939_6951[2] = inst_6931;
            statearr_6939_6951[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_6936 === 6) {
              var state_6935__$1 = state_6935;
              var statearr_6940_6952 = state_6935__$1;
              statearr_6940_6952[2] = null;
              statearr_6940_6952[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_6936 === 5) {
                var inst_6922 = state_6935[5];
                var inst_6925 = ws.send(inst_6922);
                var state_6935__$1 = function() {
                  var statearr_6941 = state_6935;
                  statearr_6941[6] = inst_6925;
                  return statearr_6941
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6935__$1, 8, ws_send)
              }else {
                if(state_val_6936 === 4) {
                  var inst_6933 = state_6935[2];
                  var state_6935__$1 = state_6935;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_6935__$1, inst_6933)
                }else {
                  if(state_val_6936 === 3) {
                    var inst_6922 = state_6935[5];
                    var state_6935__$1 = state_6935;
                    if(cljs.core.truth_(inst_6922)) {
                      var statearr_6942_6953 = state_6935__$1;
                      statearr_6942_6953[1] = 5
                    }else {
                      var statearr_6943_6954 = state_6935__$1;
                      statearr_6943_6954[1] = 6
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_6936 === 2) {
                      var inst_6921 = state_6935[2];
                      var inst_6922 = inst_6921;
                      var state_6935__$1 = function() {
                        var statearr_6944 = state_6935;
                        statearr_6944[5] = inst_6922;
                        return statearr_6944
                      }();
                      var statearr_6945_6955 = state_6935__$1;
                      statearr_6945_6955[2] = null;
                      statearr_6945_6955[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_6936 === 1) {
                        var state_6935__$1 = state_6935;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_6935__$1, 2, ws_send)
                      }else {
                        return null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5075__auto__) {
        return function() {
          var state_machine__5076__auto__ = null;
          var state_machine__5076__auto____0 = function() {
            var statearr_6947 = new Array(7);
            statearr_6947[0] = state_machine__5076__auto__;
            statearr_6947[1] = 1;
            return statearr_6947
          };
          var state_machine__5076__auto____1 = function(state_6935) {
            while(true) {
              var result__5077__auto__ = switch__5075__auto__.call(null, state_6935);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5077__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5077__auto__
              }
              break
            }
          };
          state_machine__5076__auto__ = function(state_6935) {
            switch(arguments.length) {
              case 0:
                return state_machine__5076__auto____0.call(this);
              case 1:
                return state_machine__5076__auto____1.call(this, state_6935)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5076__auto____0;
          state_machine__5076__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5076__auto____1;
          return state_machine__5076__auto__
        }()
      }(switch__5075__auto__)
    }();
    var state__5127__auto__ = function() {
      var statearr_6948 = f__5126__auto__.call(null);
      statearr_6948[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5125__auto___6949;
      return statearr_6948
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5127__auto__)
  });
  return cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "ws-send", "ws-send", 2590097227), ws_send, new cljs.core.Keyword(null, "ws-receive", "ws-receive", 3899112548), ws_receive], true)
};
goog.provide("multiplay.client");
goog.require("cljs.core");
goog.require("multiplay.utils");
goog.require("cljs.core.async");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("multiplay.views.arena");
goog.require("multiplay.async.websocket");
goog.require("multiplay.utils");
goog.require("cljs.reader");
goog.require("cljs.core.async");
multiplay.client.key_down = cljs.core.atom.call(null, null);
multiplay.client.key_event__GT_command = function key_event__GT_command(e) {
  var code = e.keyCode;
  var G__25386 = code;
  if(cljs.core._EQ_.call(null, 68, G__25386)) {
    return new cljs.core.Keyword(null, "orbit-right", "orbit-right", 1030711883)
  }else {
    if(cljs.core._EQ_.call(null, 65, G__25386)) {
      return new cljs.core.Keyword(null, "orbit-left", "orbit-left", 1845547804)
    }else {
      if(cljs.core._EQ_.call(null, 83, G__25386)) {
        return new cljs.core.Keyword(null, "orbit-down", "orbit-down", 1845319607)
      }else {
        if(cljs.core._EQ_.call(null, 87, G__25386)) {
          return new cljs.core.Keyword(null, "orbit-up", "orbit-up", 2194656880)
        }else {
          if(cljs.core._EQ_.call(null, 40, G__25386)) {
            return new cljs.core.Keyword(null, "down", "down", 1016993812)
          }else {
            if(cljs.core._EQ_.call(null, 39, G__25386)) {
              return new cljs.core.Keyword(null, "right", "right", 1122416014)
            }else {
              if(cljs.core._EQ_.call(null, 38, G__25386)) {
                return new cljs.core.Keyword(null, "up", "up", 1013907981)
              }else {
                if(cljs.core._EQ_.call(null, 37, G__25386)) {
                  return new cljs.core.Keyword(null, "left", "left", 1017222009)
                }else {
                  if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    return null
                  }else {
                    return null
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
multiplay.client.bind_key_observer = function bind_key_observer(command_chan) {
  var c__5150__auto___25547 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5151__auto__ = function() {
      var switch__5100__auto__ = function(state_25515) {
        var state_val_25516 = state_25515[1];
        if(state_val_25516 === 1) {
          var state_25515__$1 = state_25515;
          var statearr_25517_25548 = state_25515__$1;
          statearr_25517_25548[2] = null;
          statearr_25517_25548[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_25516 === 2) {
            var state_25515__$1 = state_25515;
            if(true) {
              var statearr_25518_25549 = state_25515__$1;
              statearr_25518_25549[1] = 4
            }else {
              var statearr_25519_25550 = state_25515__$1;
              statearr_25519_25550[1] = 5
            }
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_25516 === 3) {
              var inst_25513 = state_25515[2];
              var state_25515__$1 = state_25515;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25515__$1, inst_25513)
            }else {
              if(state_val_25516 === 4) {
                var inst_25469 = cljs.core.async.timeout.call(null, 100);
                var state_25515__$1 = state_25515;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25515__$1, 7, inst_25469)
              }else {
                if(state_val_25516 === 5) {
                  var state_25515__$1 = state_25515;
                  var statearr_25520_25551 = state_25515__$1;
                  statearr_25520_25551[2] = null;
                  statearr_25520_25551[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_25516 === 6) {
                    var inst_25511 = state_25515[2];
                    var state_25515__$1 = state_25515;
                    var statearr_25521_25552 = state_25515__$1;
                    statearr_25521_25552[2] = inst_25511;
                    statearr_25521_25552[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_25516 === 7) {
                      var inst_25471 = state_25515[2];
                      var inst_25505 = cljs.core.deref.call(null, multiplay.client.key_down);
                      var state_25515__$1 = function() {
                        var statearr_25522 = state_25515;
                        statearr_25522[5] = inst_25471;
                        return statearr_25522
                      }();
                      var G__25523_25553 = inst_25505;
                      if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "orbit-right", "orbit-right", 1030711883), G__25523_25553)) {
                        var statearr_25524_25554 = state_25515__$1;
                        statearr_25524_25554[1] = 23
                      }else {
                        if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "orbit-left", "orbit-left", 1845547804), G__25523_25553)) {
                          var statearr_25525_25555 = state_25515__$1;
                          statearr_25525_25555[1] = 21
                        }else {
                          if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "orbit-down", "orbit-down", 1845319607), G__25523_25553)) {
                            var statearr_25526_25556 = state_25515__$1;
                            statearr_25526_25556[1] = 19
                          }else {
                            if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "orbit-up", "orbit-up", 2194656880), G__25523_25553)) {
                              var statearr_25527_25557 = state_25515__$1;
                              statearr_25527_25557[1] = 17
                            }else {
                              if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "right", "right", 1122416014), G__25523_25553)) {
                                var statearr_25528_25558 = state_25515__$1;
                                statearr_25528_25558[1] = 15
                              }else {
                                if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "left", "left", 1017222009), G__25523_25553)) {
                                  var statearr_25529_25559 = state_25515__$1;
                                  statearr_25529_25559[1] = 13
                                }else {
                                  if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "down", "down", 1016993812), G__25523_25553)) {
                                    var statearr_25530_25560 = state_25515__$1;
                                    statearr_25530_25560[1] = 11
                                  }else {
                                    if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up", "up", 1013907981), G__25523_25553)) {
                                      var statearr_25531_25561 = state_25515__$1;
                                      statearr_25531_25561[1] = 9
                                    }else {
                                      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                        var statearr_25532_25562 = state_25515__$1;
                                        statearr_25532_25562[1] = 25
                                      }else {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_25516 === 8) {
                        var inst_25507 = state_25515[2];
                        var state_25515__$1 = function() {
                          var statearr_25533 = state_25515;
                          statearr_25533[6] = inst_25507;
                          return statearr_25533
                        }();
                        var statearr_25534_25563 = state_25515__$1;
                        statearr_25534_25563[2] = null;
                        statearr_25534_25563[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_25516 === 9) {
                          var inst_25472 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "up", "player/up", 3091920742));
                          var state_25515__$1 = state_25515;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 10, command_chan, inst_25472)
                        }else {
                          if(state_val_25516 === 10) {
                            var inst_25474 = state_25515[2];
                            var state_25515__$1 = state_25515;
                            var statearr_25535_25564 = state_25515__$1;
                            statearr_25535_25564[2] = inst_25474;
                            statearr_25535_25564[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_25516 === 11) {
                              var inst_25476 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "down", "player/down", 3097092459));
                              var state_25515__$1 = state_25515;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 12, command_chan, inst_25476)
                            }else {
                              if(state_val_25516 === 12) {
                                var inst_25478 = state_25515[2];
                                var state_25515__$1 = state_25515;
                                var statearr_25536_25565 = state_25515__$1;
                                statearr_25536_25565[2] = inst_25478;
                                statearr_25536_25565[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_25516 === 13) {
                                  var inst_25480 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "left", "player/left", 3096861714));
                                  var state_25515__$1 = state_25515;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 14, command_chan, inst_25480)
                                }else {
                                  if(state_val_25516 === 14) {
                                    var inst_25482 = state_25515[2];
                                    var state_25515__$1 = state_25515;
                                    var statearr_25537_25566 = state_25515__$1;
                                    statearr_25537_25566[2] = inst_25482;
                                    statearr_25537_25566[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_25516 === 15) {
                                      var inst_25484 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "right", "player/right", 3201464805));
                                      var state_25515__$1 = state_25515;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 16, command_chan, inst_25484)
                                    }else {
                                      if(state_val_25516 === 16) {
                                        var inst_25486 = state_25515[2];
                                        var state_25515__$1 = state_25515;
                                        var statearr_25538_25567 = state_25515__$1;
                                        statearr_25538_25567[2] = inst_25486;
                                        statearr_25538_25567[1] = 8;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_25516 === 17) {
                                          var inst_25488 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "orbit-up", "player/orbit-up", 2129109767));
                                          var state_25515__$1 = state_25515;
                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 18, command_chan, inst_25488)
                                        }else {
                                          if(state_val_25516 === 18) {
                                            var inst_25490 = state_25515[2];
                                            var state_25515__$1 = state_25515;
                                            var statearr_25539_25568 = state_25515__$1;
                                            statearr_25539_25568[2] = inst_25490;
                                            statearr_25539_25568[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_25516 === 19) {
                                              var inst_25492 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "orbit-down", "player/orbit-down", 1941577680));
                                              var state_25515__$1 = state_25515;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 20, command_chan, inst_25492)
                                            }else {
                                              if(state_val_25516 === 20) {
                                                var inst_25494 = state_25515[2];
                                                var state_25515__$1 = state_25515;
                                                var statearr_25540_25569 = state_25515__$1;
                                                statearr_25540_25569[2] = inst_25494;
                                                statearr_25540_25569[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_25516 === 21) {
                                                  var inst_25496 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "orbit-left", "player/orbit-left", 1941478515));
                                                  var state_25515__$1 = state_25515;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 22, command_chan, inst_25496)
                                                }else {
                                                  if(state_val_25516 === 22) {
                                                    var inst_25498 = state_25515[2];
                                                    var state_25515__$1 = state_25515;
                                                    var statearr_25541_25570 = state_25515__$1;
                                                    statearr_25541_25570[2] = inst_25498;
                                                    statearr_25541_25570[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_25516 === 23) {
                                                      var inst_25500 = cljs.core.vector.call(null, new cljs.core.Keyword("player", "orbit-right", "player/orbit-right", 3276295972));
                                                      var state_25515__$1 = state_25515;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25515__$1, 24, command_chan, inst_25500)
                                                    }else {
                                                      if(state_val_25516 === 24) {
                                                        var inst_25502 = state_25515[2];
                                                        var state_25515__$1 = state_25515;
                                                        var statearr_25542_25571 = state_25515__$1;
                                                        statearr_25542_25571[2] = inst_25502;
                                                        statearr_25542_25571[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_25516 === 25) {
                                                          var state_25515__$1 = state_25515;
                                                          var statearr_25543_25572 = state_25515__$1;
                                                          statearr_25543_25572[2] = new cljs.core.Keyword(null, "not-matched", "not-matched", 3326183324);
                                                          statearr_25543_25572[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                        }else {
                                                          return null
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5100__auto__) {
        return function() {
          var state_machine__5101__auto__ = null;
          var state_machine__5101__auto____0 = function() {
            var statearr_25545 = new Array(7);
            statearr_25545[0] = state_machine__5101__auto__;
            statearr_25545[1] = 1;
            return statearr_25545
          };
          var state_machine__5101__auto____1 = function(state_25515) {
            while(true) {
              var result__5102__auto__ = switch__5100__auto__.call(null, state_25515);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5102__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5102__auto__
              }
              break
            }
          };
          state_machine__5101__auto__ = function(state_25515) {
            switch(arguments.length) {
              case 0:
                return state_machine__5101__auto____0.call(this);
              case 1:
                return state_machine__5101__auto____1.call(this, state_25515)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5101__auto____0;
          state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5101__auto____1;
          return state_machine__5101__auto__
        }()
      }(switch__5100__auto__)
    }();
    var state__5152__auto__ = function() {
      var statearr_25546 = f__5151__auto__.call(null);
      statearr_25546[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5150__auto___25547;
      return statearr_25546
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5152__auto__)
  });
  window.addEventListener("keydown", function(e) {
    return cljs.core.reset_BANG_.call(null, multiplay.client.key_down, multiplay.client.key_event__GT_command.call(null, e))
  });
  return window.addEventListener("keyup", function(e) {
    return cljs.core.reset_BANG_.call(null, multiplay.client.key_down, null)
  })
};
multiplay.client.receive_websocket = function receive_websocket(p__25573, render_channel) {
  var vec__25585 = p__25573;
  var type = cljs.core.nth.call(null, vec__25585, 0, null);
  var data = cljs.core.nth.call(null, vec__25585, 1, null);
  var event = vec__25585;
  var G__25586 = type;
  if(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "message", "message", 1968829305), G__25586)) {
    var c__5150__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5151__auto__ = function() {
        var switch__5100__auto__ = function(state_25591) {
          var state_val_25592 = state_25591[1];
          if(state_val_25592 === 2) {
            var inst_25589 = state_25591[2];
            var state_25591__$1 = state_25591;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25591__$1, inst_25589)
          }else {
            if(state_val_25592 === 1) {
              var inst_25587 = cljs.reader.read_string.call(null, data);
              var state_25591__$1 = state_25591;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25591__$1, 2, render_channel, inst_25587)
            }else {
              return null
            }
          }
        };
        return function(switch__5100__auto__) {
          return function() {
            var state_machine__5101__auto__ = null;
            var state_machine__5101__auto____0 = function() {
              var statearr_25594 = new Array(5);
              statearr_25594[0] = state_machine__5101__auto__;
              statearr_25594[1] = 1;
              return statearr_25594
            };
            var state_machine__5101__auto____1 = function(state_25591) {
              while(true) {
                var result__5102__auto__ = switch__5100__auto__.call(null, state_25591);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5102__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5102__auto__
                }
                break
              }
            };
            state_machine__5101__auto__ = function(state_25591) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5101__auto____0.call(this);
                case 1:
                  return state_machine__5101__auto____1.call(this, state_25591)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5101__auto____0;
            state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5101__auto____1;
            return state_machine__5101__auto__
          }()
        }(switch__5100__auto__)
      }();
      var state__5152__auto__ = function() {
        var statearr_25595 = f__5151__auto__.call(null);
        statearr_25595[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5150__auto__;
        return statearr_25595
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5152__auto__)
    });
    return c__5150__auto__
  }else {
    if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return multiplay.utils.log.call(null, cljs.core.PersistentVector.fromArray(["Silently ignoring", event], true))
    }else {
      return null
    }
  }
};
multiplay.client.spawn_client_process_BANG_ = function spawn_client_process_BANG_(ws_send, ws_receive, command_chan, render_channel) {
  var c__5150__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5151__auto__ = function() {
      var switch__5100__auto__ = function(state_25689) {
        var state_val_25690 = state_25689[1];
        if(state_val_25690 === 1) {
          var state_25689__$1 = state_25689;
          var statearr_25691_25710 = state_25689__$1;
          statearr_25691_25710[2] = null;
          statearr_25691_25710[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_25690 === 2) {
            var state_25689__$1 = state_25689;
            if(true) {
              var statearr_25692_25711 = state_25689__$1;
              statearr_25692_25711[1] = 4
            }else {
              var statearr_25693_25712 = state_25689__$1;
              statearr_25693_25712[1] = 5
            }
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_25690 === 3) {
              var inst_25687 = state_25689[2];
              var state_25689__$1 = state_25689;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25689__$1, inst_25687)
            }else {
              if(state_val_25690 === 4) {
                var inst_25656 = cljs.core.vector.call(null, ws_receive, command_chan);
                var state_25689__$1 = state_25689;
                return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_25689__$1, 7, inst_25656)
              }else {
                if(state_val_25690 === 5) {
                  var state_25689__$1 = state_25689;
                  var statearr_25694_25713 = state_25689__$1;
                  statearr_25694_25713[2] = null;
                  statearr_25694_25713[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_25690 === 6) {
                    var inst_25685 = state_25689[2];
                    var state_25689__$1 = state_25689;
                    var statearr_25695_25714 = state_25689__$1;
                    statearr_25695_25714[2] = inst_25685;
                    statearr_25695_25714[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_25690 === 7) {
                      var inst_25659 = state_25689[5];
                      var inst_25660 = state_25689[6];
                      var inst_25658 = state_25689[2];
                      var inst_25659__$1 = cljs.core.nth.call(null, inst_25658, 0, null);
                      var inst_25660__$1 = cljs.core.nth.call(null, inst_25658, 1, null);
                      var inst_25661 = cljs.core.vector.call(null, "event received", inst_25659__$1);
                      var inst_25662 = multiplay.utils.log.call(null, inst_25661);
                      var inst_25666 = cljs.core._EQ_.call(null, ws_receive, inst_25660__$1);
                      var state_25689__$1 = function() {
                        var statearr_25696 = state_25689;
                        statearr_25696[5] = inst_25659__$1;
                        statearr_25696[7] = inst_25662;
                        statearr_25696[6] = inst_25660__$1;
                        return statearr_25696
                      }();
                      if(inst_25666) {
                        var statearr_25697_25715 = state_25689__$1;
                        statearr_25697_25715[1] = 8
                      }else {
                        var statearr_25698_25716 = state_25689__$1;
                        statearr_25698_25716[1] = 9
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_25690 === 8) {
                        var inst_25659 = state_25689[5];
                        var inst_25668 = multiplay.client.receive_websocket.call(null, inst_25659, render_channel);
                        var state_25689__$1 = state_25689;
                        var statearr_25699_25717 = state_25689__$1;
                        statearr_25699_25717[2] = inst_25668;
                        statearr_25699_25717[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_25690 === 9) {
                          var inst_25660 = state_25689[6];
                          var inst_25670 = cljs.core._EQ_.call(null, command_chan, inst_25660);
                          var state_25689__$1 = state_25689;
                          if(inst_25670) {
                            var statearr_25700_25718 = state_25689__$1;
                            statearr_25700_25718[1] = 11
                          }else {
                            var statearr_25701_25719 = state_25689__$1;
                            statearr_25701_25719[1] = 12
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_25690 === 10) {
                            var inst_25681 = state_25689[2];
                            var state_25689__$1 = function() {
                              var statearr_25702 = state_25689;
                              statearr_25702[8] = inst_25681;
                              return statearr_25702
                            }();
                            var statearr_25703_25720 = state_25689__$1;
                            statearr_25703_25720[2] = null;
                            statearr_25703_25720[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_25690 === 11) {
                              var inst_25659 = state_25689[5];
                              var state_25689__$1 = state_25689;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25689__$1, 14, ws_send, inst_25659)
                            }else {
                              if(state_val_25690 === 12) {
                                var inst_25660 = state_25689[6];
                                var inst_25675 = [cljs.core.str("No matching clause: "), cljs.core.str(inst_25660)].join("");
                                var inst_25676 = new Error(inst_25675);
                                var inst_25677 = function() {
                                  throw inst_25676;
                                }();
                                var state_25689__$1 = state_25689;
                                var statearr_25704_25721 = state_25689__$1;
                                statearr_25704_25721[2] = inst_25677;
                                statearr_25704_25721[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_25690 === 13) {
                                  var inst_25679 = state_25689[2];
                                  var state_25689__$1 = state_25689;
                                  var statearr_25705_25722 = state_25689__$1;
                                  statearr_25705_25722[2] = inst_25679;
                                  statearr_25705_25722[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_25690 === 14) {
                                    var inst_25673 = state_25689[2];
                                    var state_25689__$1 = state_25689;
                                    var statearr_25706_25723 = state_25689__$1;
                                    statearr_25706_25723[2] = inst_25673;
                                    statearr_25706_25723[1] = 13;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    return null
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5100__auto__) {
        return function() {
          var state_machine__5101__auto__ = null;
          var state_machine__5101__auto____0 = function() {
            var statearr_25708 = new Array(9);
            statearr_25708[0] = state_machine__5101__auto__;
            statearr_25708[1] = 1;
            return statearr_25708
          };
          var state_machine__5101__auto____1 = function(state_25689) {
            while(true) {
              var result__5102__auto__ = switch__5100__auto__.call(null, state_25689);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5102__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5102__auto__
              }
              break
            }
          };
          state_machine__5101__auto__ = function(state_25689) {
            switch(arguments.length) {
              case 0:
                return state_machine__5101__auto____0.call(this);
              case 1:
                return state_machine__5101__auto____1.call(this, state_25689)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5101__auto____0;
          state_machine__5101__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5101__auto____1;
          return state_machine__5101__auto__
        }()
      }(switch__5100__auto__)
    }();
    var state__5152__auto__ = function() {
      var statearr_25709 = f__5151__auto__.call(null);
      statearr_25709[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5150__auto__;
      return statearr_25709
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5152__auto__)
  });
  return c__5150__auto__
};
multiplay.client.run = function run() {
  var render_channel = multiplay.views.arena.create_BANG_.call(null);
  var map__25725 = multiplay.async.websocket.connect_BANG_.call(null, [cljs.core.str("ws://"), cljs.core.str(multiplay.utils.host)].join(""));
  var map__25725__$1 = cljs.core.seq_QMARK_.call(null, map__25725) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25725) : map__25725;
  var ws_receive = cljs.core.get.call(null, map__25725__$1, new cljs.core.Keyword(null, "ws-receive", "ws-receive", 3899112548));
  var ws_send = cljs.core.get.call(null, map__25725__$1, new cljs.core.Keyword(null, "ws-send", "ws-send", 2590097227));
  var command_channel = cljs.core.async.chan.call(null);
  multiplay.client.spawn_client_process_BANG_.call(null, ws_send, ws_receive, command_channel, render_channel);
  return multiplay.client.bind_key_observer.call(null, command_channel)
};
goog.exportSymbol("multiplay.client.run", multiplay.client.run);
